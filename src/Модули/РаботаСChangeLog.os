#Использовать logos

// Лог модуля
Перем Лог;

#Область ПрограммныйИнтерфейс

// Инициализирует файл Changelog.md
//
// Параметры:
//  ИмяФайла    - Строка     - имя создаваемого файла
//
Процедура ИнициализироватьChangeLog(Знач ИмяФайла) Экспорт
	
	Лог.Информация("Начало инициализации %1", ИмяФайла);
	
	Версия = "1.0.0.0";
	ДатаВФормате = Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd");
	Результат = СтрШаблон(
			"# Changelog
			|
			|Все изменения по проекту.
			|
			|## [%1] - %2
			|
			|### Внимание!
			|
			|* Важная заметка 1 **жирный** *курсив*
			|* Важная заметка 2 ~~Зачеркнутый~~
			|
			|### Добавлено
			|
			|* Добавлено дело 1 ***жирный курсив***
			|* Добавлено дело 2 `выделенный`
			|* Картинка ![Описание](https://camo.githubusercontent.com/b0ae38dceb7087a93c566bcf5fd05b0e511edd3d523a290e0a9fe465b4c97df0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d696e666f726d6174696f6e616c)
			|		
			|### Изменено
			|
			|* Изменение 1 __снова жиный__ _снова курсив_
			|* Изменение 2
			|
			|### Исправлено
			|
			|* Исправление ошибки", Версия, ДатаВФормате);
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Результат);
	ТД.Записать(ИмяФайла);
	
	Лог.Информация("Окончание инициализации %1", ИмяФайла);
	
КонецПроцедуры

// Конвертирует файл Changelog.md в один из форматов
//
// Параметры:
//  Параметры    - Структура     - структура конвертации
//
Процедура Конвертировать(Знач Параметры) Экспорт
	
	Лог.Информация("Начало получения новости ChangeLog");
	
	// Шаг 0. Проверка заполненных параметров
	ФайлОсновной = Параметры.ИсходныйФайл;
	Если НЕ ФайловыеОперации.ФайлСуществует(ФайлОсновной) Тогда
		ТекстОшибки = "Параметр ""-in"" - содержит полный путь к не существующему файлу ChangeLog.md";
		ОбщегоНазначения.ЗавершениеРаботыОшибка(ТекстОшибки);
	КонецЕсли;
	
	ФайлРезультат = Параметры.ФайлРезультат;
	
	мФормат = Параметры.Формат;
	мФормат = СокрЛП(НРег(мФормат));
	
	ФорматЗаполнен = мФормат = Перечисления.ФорматChangeLog.Текст
		ИЛИ мФормат = Перечисления.ФорматChangeLog.ПолныйHTML 		
		ИЛИ мФормат = Перечисления.ФорматChangeLog.КраткийHTML;
	
	Если НЕ ФорматЗаполнен Тогда

		ОбщегоНазначения.ЗавершениеРаботыОшибка("Опция -format = ""%1"" может быть одной из списка: %2, %3, %4",
			мФормат,
			Перечисления.ФорматChangeLog.Текст,
			Перечисления.ФорматChangeLog.КраткийHTML,
			Перечисления.ФорматChangeLog.ПолныйHTML);

	КонецЕсли;

	Лог.Информация("Формат вывода: ""%1""", мФормат);

	мВерсия = Параметры.Версия;
	Если ПустаяСтрока(мВерсия) Тогда
		мВерсия = МаксимальнаяВерсияИзФайлаChangeLog(ФайлОсновной);
		Если НЕ ПустаяСтрока(мВерсия) Тогда
			Лог.Информация("Определена максимальная версия ""%1"" в файле ChangeLog", мВерсия);
		КонецЕсли;
	Иначе
		Лог.Информация("Получение информации по версия ""%1"" из файла ChangeLog", мВерсия);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мВерсия) Тогда
		ТекстОшибки = "В файле ChangeLog не найдена область с версией. В виде ""## [1.0.0.0] - 2023-01-01""";
		ОбщегоНазначения.ЗавершениеРаботыОшибка(ТекстОшибки);
	КонецЕсли;
	
	ИсходныйТекст = ПолучитьОписаниеВерсииChangeLog(ФайлОсновной, мВерсия);
			
	Если мФормат = Перечисления.ФорматChangeLog.КраткийHTML Тогда
		Текст = MarkdownВHTML(ИсходныйТекст);
	ИначеЕсли мФормат = Перечисления.ФорматChangeLog.ПолныйHTML Тогда
		Текст = ОбщегоНазначения.ПрочитатьДанныеИзМакета("ChangeLogTemplate.html");
		Структура = Новый Структура();
		Структура.Вставить("Title", мВерсия);
		Структура.Вставить("Text", MarkdownВHTML(ИсходныйТекст));
		Текст = СтроковыеОперации.ЗаменитьПараметры(Текст, Структура);
	Иначе
		Текст = MarkdownВТекст(ИсходныйТекст);
	КонецЕсли;

	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Текст);
	ТД.Записать(ФайлРезультат);
	
	Лог.Информация("Окончание получения новости ChangeLog");
	
КонецПроцедуры

// BSLLS:LatinAndCyrillicSymbolInWord-off

// Преобразует строку в формате Markdown в строку с BB-кодами.
//
// Параметры:
//   ИсходнаяСтрока - Строка - Строка c MarkDown.
//
// Возвращаемое значение:
//   Строка - Строка с BB-кодами.
//
// Примеры:
//  MarkdownВТекст("Привет **это** _я_") = "Привет [b]это[/b] [i]я[/i]";
//
Функция MarkdownВТекст(Знач ИсходнаяСтрока) Экспорт

	Заголовки = Новый Структура();
	Заголовки.Вставить("Added", МассивЗаголовков(СинонимыAdded()));
	Заголовки.Вставить("Changed", МассивЗаголовков(СинонимыChanged()));
	Заголовки.Вставить("Deprecated", МассивЗаголовков(СинонимыDeprecated()));
	Заголовки.Вставить("Removed", МассивЗаголовков(СинонимыRemoved()));
	Заголовки.Вставить("Fixed", МассивЗаголовков(СинонимыFixed()));
	Заголовки.Вставить("Security", МассивЗаголовков(СинонимыSecurity()));
	Заголовки.Вставить("Attention", МассивЗаголовков(СинонимыAttention()));
	
	Текст = "";
	КлассCSS = "";
	Для Индекс = 1 По СтрЧислоСтрок(ИсходнаяСтрока) Цикл

		Стр = СокрЛП(СтрПолучитьСтроку(ИсходнаяСтрока, Индекс));
		Если ПустаяСтрока(Стр) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Стр, "#") Тогда

			// Для заголовка определяем класс префикса
			мСтр = Стр;
			Пока СтрНачинаетсяС(мСтр, "#") Цикл
				мСтр = Сред(мСтр, 2);
			КонецЦикла;
			мСтр = СокрЛП(мСтр);
			Префикс = ПрефиксСтроки(Заголовки, мСтр);
			Если НЕ ПустаяСтрока(Префикс) Тогда
				КлассCSS = Префикс;								
			КонецЕсли;			

		Иначе

			// Класс не задан, игнорируем строки
			Если ПустаяСтрока(КлассCSS) Тогда
				Продолжить;
			КонецЕсли;
			
			// Класс задан, накапливаем
			Если СтрНачинаетсяС(Стр, "* ") ИЛИ СтрНачинаетсяС(Стр, "- ") Тогда
				Стр = Сред(Стр, 3);
			КонецЕсли;
			
			Стр = ЗаменитьBBCode(Стр);
			
			Текст = Текст + КлассCSS + Стр + Символы.ПС;
	
		КонецЕсли;
				
	КонецЦикла;

	Если ПустаяСтрока(Текст) Тогда
		Текст = ЗаменитьBBCode(ИсходнаяСтрока);
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Преобразует строку в формате Markdown в строку HTML.
//
// Параметры:
//   ИсходнаяСтрока - Строка - Строка c MarkDown.
//
// Возвращаемое значение:
//   Строка - Текст HTML.
//
// Примеры:
//  MarkdownВHTML("Привет **это** _я_") = "Привет <strong>это</strong> <em>я</em>";
//
Функция MarkdownВHTML(Знач ИсходнаяСтрока) Экспорт
	
	ТекстHTML = ИсходнаяСтрока;
	Если НЕ ПустаяСтрока(ТекстHTML) И НЕ СтрНачинаетсяС(ТекстHTML, "#") Тогда
		ТекстHTML = Символы.ПС + ТекстHTML;
	КонецЕсли;

	// header
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "##### (.*)", "<h5>$1</h5>");
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "#### (.*)", "<h4>$1</h4>");
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "### (.*)", "<h3>$1</h3>");
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "## (.*)", "<h2>$1</h2>");
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "# (.*)", "<h1>$1</h1>");
	
	// **жирный** __жирный__
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "(\*\*|__)(.*?)\1", "<strong>$2</strong>");
	// *курсив* _курсив_
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "(\*|_)(\S(.*?\S)?)(\*|_)", "<em>$2</em>");
	// `выделенный`
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "[`](.*?)[`]", "<code>$1</code>");
	// "выделенный"
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\:\""(.*?)\""\:", "<q>$1</q>");
	// ~~Зачеркнутый~~
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\~\~(.*?)\~\~", "<del>$1</del>");
	// Горизонтальные линии
	// --- *** ___ (три и более)
	СимволПС_ТегПрочерк = Символы.ПС + "<hr />";
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "[-]{3,}", СимволПС_ТегПрочерк);
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "[*]{3,}", СимволПС_ТегПрочерк);
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "[_]{3,}", СимволПС_ТегПрочерк);
	
	// Картинки
	// ![alt-текст](https://github.com/images/modules/search/mona-love.png "Текст заголовка логотипа 1")
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML,
			"\!\[([^\[]+)\]\(([^\""]+) \""([^\)]+)\""\)",
			"<img src=""$2"" alt=""$1"" title=""$3"">");
	
	// ![Это опциональный alt-текст](https://i.imgur.com/HzsGS7G.png)
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML,
			"\!\[([^\[]+)\]\(([^\)]+)\)",
			"<img src=""$2"" alt=""$1"">");
	
	// Это гиперссылка [here](myLib/README.md)
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML,
			"\[([^\[]+)\]\(([^\)]+)\)",
			"<a href=""$2"" target=""_blank"">$1</a>");
	
	// mails
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML,
			"([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)",
			"<a href=""mailto:$1"">$1</a>");
	
	// ul
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML,
			"\n\* (.*)",
			Символы.ПС + "<ul>" + Символы.ПС + "<li>$1</li>" + Символы.ПС + "</ul>");
	
	// ol
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML,
			"\n\- (.*)",
			Символы.ПС + "<ol>" + Символы.ПС + "<li>$1</li>" + Символы.ПС + "</ol>");
	
	// blockquote
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML,
			"\n(\>)(.*)",
			Символы.ПС + "<blockquote>$2</blockquote>");
	
	РегВыражение = Новый РегулярноеВыражение("^<\/?(ul|ol|li|h|p|bl)");
	РегВыражение.ИгнорироватьРегистр = Истина;
	РегВыражение.Многострочный = Истина;
	РезультатПреобразования = "";
	Для Индекс = 1 По СтрЧислоСтрок(ТекстHTML) Цикл
		Стр = СтрПолучитьСтроку(ТекстHTML, Индекс);
		Если РегВыражение.НайтиСовпадения(Стр).Количество() > 0 Тогда
			РезультатПреобразования = РезультатПреобразования + Стр + Символы.ПС;
		Иначе
			РезультатПреобразования = РезультатПреобразования + "<p>" + Стр + "</p>" + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	ТекстHTML = РезультатПреобразования;
	
	// Удаляем лишнее
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\n<\/ul>\s?<ul>", "");
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\n<\/ol>\s?<ol>", "");
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, "<\/blockquote>\n<blockquote>", Символы.ПС);
	
	// Меняем для ul класс если найдено <h3 class=""updnew"">
	
	ТекстHTML = ЗаменитьЗаголовкиHTML(ТекстHTML, СинонимыAdded(), "updnew");
	ТекстHTML = ЗаменитьЗаголовкиHTML(ТекстHTML, СинонимыChanged(), "updedt");
	ТекстHTML = ЗаменитьЗаголовкиHTML(ТекстHTML, СинонимыDeprecated(), "upddep");
	ТекстHTML = ЗаменитьЗаголовкиHTML(ТекстHTML, СинонимыRemoved(), "upddel");
	ТекстHTML = ЗаменитьЗаголовкиHTML(ТекстHTML, СинонимыFixed(), "upderr");
	ТекстHTML = ЗаменитьЗаголовкиHTML(ТекстHTML, СинонимыSecurity(), "updsec");
	ТекстHTML = ЗаменитьЗаголовкиHTML(ТекстHTML, СинонимыAttention(), "updnws");
	
	Возврат ТекстHTML;

КонецФункции

// BSLLS:LatinAndCyrillicSymbolInWord-on

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СинонимыAdded()
	Возврат "Добавлено|Новый функционал|FEATURES|Added";
КонецФункции

Функция СинонимыChanged()
	Возврат "Изменения|Изменено|IMPROVEMENTS|Changed";
КонецФункции

Функция СинонимыDeprecated()
	Возврат "Устарело|Deprecated";
КонецФункции

Функция СинонимыRemoved()
	Возврат "Удалено|Removed";
КонецФункции

Функция СинонимыFixed()
	Возврат "Исправление ошибок|Замечания к обновлению|Исправлено|BUG FIXES|Fixed";
КонецФункции

Функция СинонимыSecurity()
	Возврат "Безопасность|Security";
КонецФункции

Функция СинонимыAttention()
	Возврат "Внимание!|Новости|News|BREAKING CHANGES|Attention!";
КонецФункции

Функция МассивЗаголовков(Знач Заголовки)
	Возврат СтроковыеОперации.РазложитьСтрокуВМассивПодстрок(НРег(Заголовки), "|", Ложь);
КонецФункции

Функция ПодстрокаВМассиве(Знач Массив, Знач Подстрока)
	
	Для Каждого Элемент Из Массив Цикл
		Если СтрНайти(НРег(Подстрока), НРег(Элемент)) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ЗаменитьЗаголовкиHTML(ТекстHTML, Заголовки, КлассCSS)
	
	ИсходныйШаблон = СтрШаблон("\<h3\>(%1)\<\/h3\>\n<ul>", Заголовки);
	ЗаменаШаблон = СтрШаблон("<h3>$1</h3>%1<ul class=""%2"">", Символы.ПС, КлассCSS);
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, ИсходныйШаблон, ЗаменаШаблон);
	
	ИсходныйШаблон = СтрШаблон("\<h2\>(%1)\<\/h2\>\n<ul>", Заголовки);
	ЗаменаШаблон = СтрШаблон("<h2>$1</h2>%1<ul class=""%2"">", Символы.ПС, КлассCSS);
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML,	ИсходныйШаблон, ЗаменаШаблон);
	
	ИсходныйШаблон = СтрШаблон("\<h3\>(%1)\<\/h3\>\n<ol>", Заголовки);
	ЗаменаШаблон = СтрШаблон("<h3>$1</h3>%1<ol class=""%2"">", Символы.ПС, КлассCSS);
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, ИсходныйШаблон, ЗаменаШаблон);
	
	ИсходныйШаблон = СтрШаблон("\<h2\>(%1)\<\/h2\>\n<ol>", Заголовки);
	ЗаменаШаблон = СтрШаблон("<h2>$1</h2>%1<ol class=""%2"">", Символы.ПС, КлассCSS);
	ТекстHTML = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(ТекстHTML, ИсходныйШаблон, ЗаменаШаблон);
	
	Возврат ТекстHTML;
	
КонецФункции

Функция МаксимальнаяВерсияИзФайлаChangeLog(ИмяФайла)
	
	мВерсия = "";
	
	РегВыражение = Новый РегулярноеВыражение("# \[(.*)\]");
	РегВыражение.ИгнорироватьРегистр = Истина;
	РегВыражение.Многострочный = Истина;
	Области = Новый ТекстовыйДокумент;
	Области.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	Текст = Области.ПолучитьТекст();

	Массив = РегВыражение.НайтиСовпадения(Текст);
	Индекс = 0;
	ТаблицаВерсий = Новый ТаблицаЗначений;
	ТаблицаВерсий.Колонки.Добавить("Версия");
	ТаблицаВерсий.Колонки.Добавить("ВесВерсии");
	Пока Индекс < Массив.Количество() Цикл
		Элемент = Массив[Индекс].Группы[1];
		НоваяСтрока = ТаблицаВерсий.Добавить();
		
		ВерсияСтрокой = Элемент.Значение;
		Вес = ОбщегоНазначения.ВесВерсии(ВерсияСтрокой);
		
		НоваяСтрока.Версия = ВерсияСтрокой;
		НоваяСтрока.ВесВерсии = Вес;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если ТаблицаВерсий.Количество() > 0 Тогда
		ТаблицаВерсий.Сортировать("ВесВерсии Убыв");
		мВерсия = ТаблицаВерсий[0].Версия;
	КонецЕсли;
	
	Возврат мВерсия;
	
КонецФункции

Функция ПолучитьОписаниеВерсииChangeLog(Знач ИмяФайла, Знач Версия)

	Результат = "";
	Области = Новый ТекстовыйДокумент;
	Области.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	ТекущаяВерсияФайла = "";
	
	Для а = 1 По Области.КоличествоСтрок() Цикл
		
		Текст = СокрЛП(Области.ПолучитьСтроку(а));
		Если ПустаяСтрока(Текст) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(НРег(Текст), "# [" + НРег(Версия) + "]") > 0 Тогда
			ТекущаяВерсияФайла = Версия;
			Продолжить;
		Иначе
			Если СтрНачинаетсяС(Текст, "#") И СтрНайти(Текст, "# [") > 0 И СтрНайти(Текст, "]") > 0 Тогда
				Если НЕ ПустаяСтрока(ТекущаяВерсияФайла) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(ТекущаяВерсияФайла) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Результат = Результат + Текст + Символы.ПС;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаменитьBBCode(Знач Строка)

	Стр = Строка;
	Стр = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(Стр, "(\*\*|__)(.*?)\1", "[b]$2[/b]");
	Стр = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(Стр, "(\*|_)(\S(.*?\S)?)(\*|_)", "[i]$2[/i]");
	Стр = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(Стр, "\~\~(.*?)\~\~", "[s]$1[/s]");
	Стр = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(Стр, "[`](.*?)[`]", "[code]$1[/code]");
	Стр = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(Стр, 
		"\!\[([^\[]+)\]\(([^\""]+) \""([^\)]+)\""\)",
		"<img src=""$2"" alt=""$1"" title=""$3"">");
	Стр = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(Стр, 
		"\!\[([^\[]+)\]\(([^\)]+)\)", 
		"[img]$2[/img]");
	Стр = ОбщегоНазначения.ЗаменитьПоРегулярномуВыражению(Стр,
		"\[([^\[]+)\]\(([^\)]+)\)", 
		"[url=""$2""]$1[/url]");

	Возврат Стр;

КонецФункции

Функция ПрефиксСтроки(Заголовки, Строка)

	Если ПодстрокаВМассиве(Заголовки.Added, Строка) Тогда
		Возврат "[+] ";
	ИначеЕсли ПодстрокаВМассиве(Заголовки.Changed, Строка) Тогда
		Возврат "[*] ";
	ИначеЕсли ПодстрокаВМассиве(Заголовки.Fixed, Строка) Тогда
		Возврат "[-] ";
	ИначеЕсли ПодстрокаВМассиве(Заголовки.Attention, Строка) Тогда
		Возврат "[!] ";
	ИначеЕсли ПодстрокаВМассиве(Заголовки.Deprecated, Строка) Тогда
		Возврат "[D] ";
	ИначеЕсли ПодстрокаВМассиве(Заголовки.Removed, Строка) Тогда
		Возврат "[R] ";
	ИначеЕсли ПодстрокаВМассиве(Заголовки.Security, Строка) Тогда
		Возврат "[S] ";
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

#КонецОбласти

Лог = ПараметрыСистемы.Лог();