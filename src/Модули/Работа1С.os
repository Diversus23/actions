#Использовать v8runner
#Использовать asserts
#Использовать v8storage

#Область ПрограммныйИнтерфейс

Функция КонструкторОбщий() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить("connection");
	Результат.Добавить("v8version");
	Результат.Добавить("language");
	Результат.Добавить("locale");
	Возврат Результат;
	
КонецФункции

// Инициализирует параметры для создания файловой базы
//
// Возвращаемое значение:
//	Массив - массив строк всех параметров
//
Функция КонструкторСозданияФайловойБазы() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить("v8version");
	Результат.Добавить("language");
	Результат.Добавить("locale");
	Результат.Добавить("template");
	Результат.Добавить("basename");
	Возврат Результат;
	
КонецФункции

// Инициализирует параметры для создания серверной базы
//
// Возвращаемое значение:
//	Массив - массив строк всех параметров
//
Функция КонструкторСозданияСервернойБазы() Экспорт
	
	Результат = КонструкторСозданияФайловойБазы();
	Результат.Добавить("server");
	Результат.Добавить("ref");
	Результат.Добавить("dbms");
	Результат.Добавить("dbserver");
	Результат.Добавить("dbuser");
	Результат.Добавить("dbpassword");
	Результат.Добавить("dbname");
	Результат.Добавить("sqloffs");
	Результат.Добавить("createdb");
	Результат.Добавить("allowschjob");
	Результат.Добавить("allowlicdstr");
	Результат.Добавить("cadmuser");
	Результат.Добавить("cadmpassword");
	Возврат Результат;
	
КонецФункции

// Добавляет в команду приложения для FTP общие опции
//
// Параметры:
//  Команда    - КомандаПриложения      - объект  описание команды
//	МассивПараметров - Массив			- массив команд, которые надо зарегистрировать
//
// BSLLS:CognitiveComplexity-off
// BSLLS:CyclomaticComplexity-off
Процедура ОписаниеКоманды(Команда, Знач МассивПараметров) Экспорт
	
	СтрокаШаблона = "%1 %2";
	
	Если МассивПараметров.Найти("connection") <> Неопределено Тогда
		Текст = СтрШаблон(СтрокаШаблона,
				"Строка соединения с информационной базой 1С.",
				"Для файловой ""/FC:\Base1C"", а серверной ""/Sserver\base"" (обязательный)");
		Команда.Опция("connection с", "", Текст)
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("user") <> Неопределено Тогда
		Команда.Опция("user u n", "",
			"Имя пользователя (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("password") <> Неопределено Тогда
		Команда.Опция("password pwd p", "",
			"Пароль пользователя (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("server") <> Неопределено Тогда
		Команда.Опция("server", "",
			"Адрес кластера серверов 1С ([<протокол>://]<адрес>[:<порт>]) (обязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("ref") <> Неопределено Тогда
		Команда.Опция("ref", "",
			"Имя базы в кластере 1С (обязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("dbms") <> Неопределено Тогда
		Команда.Опция("dbms", "",
			"Тип сервера СУБД: MSSQLServer <по умолчанию>, PostgreSQL, IBMDB2, OracleDatabase (необязательный)")
			.ТСтрока();				
	КонецЕсли;
	
	Если МассивПараметров.Найти("dbserver") <> Неопределено Тогда
		Команда.Опция("dbserver", "",
			"Адрес сервера СУБД. Если не указано, то равен ""--server"" (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("dbuser") <> Неопределено Тогда
		Команда.Опция("dbuser", "",
			"Пользователь сервера СУБД (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("dbpassword") <> Неопределено Тогда
		Команда.Опция("dbpassword", "",
			"Пароль сервера СУБД (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("dbname") <> Неопределено Тогда
		Команда.Опция("dbname", "",
			"Имя базы на сервере СУБД. Если не указано, то равен ""--ref"" (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("sqloffs") <> Неопределено Тогда
		Команда.Опция("sqloffs", "",
			"Смещение дат на сервере MS SQL: 0; 2000 <по умолчанию> (необязательный)")
			.ТЧисло();
	КонецЕсли;
	
	Если МассивПараметров.Найти("createdb") <> Неопределено Тогда
		Команда.Опция("createdb", "",
			"Создавать базу данных в случае отсутствия (необязательный)")
			.ТБулево();
	КонецЕсли;
	
	Если МассивПараметров.Найти("allowschjob") <> Неопределено Тогда
		Команда.Опция("allowschjob", "",
			"Разрешить регламентные задания (необязательный)")
			.ТБулево();
	КонецЕсли;
	
	Если МассивПараметров.Найти("allowlicdstr") <> Неопределено Тогда
		Команда.Опция("allowlicdstr", "",
			"Разрешить выдачу лицензий сервером 1С (необязательный)")
			.ТБулево();
	КонецЕсли;
	
	Если МассивПараметров.Найти("cadmuser") <> Неопределено Тогда
		Команда.Опция("cadmuser", "",
			"Имя администратора кластера (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("cadmpassword") <> Неопределено Тогда
		Команда.Опция("cadmpassword", "",
			"Пароль администратора кластера (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("template") <> Неопределено Тогда
		Текст = СтрШаблон(СтрокаШаблона,
				"Путь к шаблону для создания информационной базы (*.cf; *.dt).",
				"Если шаблон не указан, то будет создана пустая ИБ (необязательный)");
		Команда.Опция("template t", "", Текст)
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("basename") <> Неопределено Тогда
		Команда.Опция("basename n", "",
			"Имя в списке баз пользователя. Если не задано, то ИБ в список не добавляется (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("v8version") <> Неопределено Тогда
		Команда.Опция("v8version v", "",
			"Версия платформы 1С (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("ordinaryapp") <> Неопределено Тогда
		Текст = СтрШаблон(СтрокаШаблона,
				"Запуск толстого клиента (1 = толстый, 0 = тонкий клиент, -1 = без указания клиента).",
				"По умолчанию используется значение 0 (тонкий клиент). (обязательный)");
		Команда.Опция("ordinaryapp o", "", Текст)
			.ТЧисло();
	КонецЕсли;
	
	Если МассивПараметров.Найти("uccode") <> Неопределено Тогда
		Команда.Опция("uccode uc", "",
			"Ключ разрешения запуска (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("language") <> Неопределено Тогда
		Команда.Опция("language", "",
			"Код языка запуска платформы (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("locale") <> Неопределено Тогда
		Команда.Опция("locale", "",
			"Код локализации сеанса платформы (необязательный)")
			.ТСтрока();
	КонецЕсли;
	
	Если МассивПараметров.Найти("nocacheuse") <> Неопределено Тогда
		Текст = СтрШаблон(СтрокаШаблона,
				"Признак - не использовать кэш платформы для ускорения операций с базой,",
				"а также не надо добавлять базу в список баз 1C пользователя. (необязательный)");
		Команда.Опция("nocacheuse", "", Текст)
			.ТБулево();
	КонецЕсли;
	
КонецПроцедуры

// Читает параметры из команды приложения
//
// Параметры:
//  Команда    - КомандаПриложения      - объект  описание команды
//	МассивПараметров - Массив			- массив команд, которые надо зарегистрировать
//
Функция ПрочитатьПараметры(Знач Команда, Знач МассивПараметров = Неопределено) Экспорт
	
	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);
	ВыводОтладочнойИнформации = ЧтениеОпций.ЗначениеОпции("verbose");
	ПараметрыСистемы.УстановитьРежимОтладки(ВыводОтладочнойИнформации);
	
	ПараметрыКоманды = Новый Структура;
	Если МассивПараметров.Найти("connection") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("СтрокаПодключения", ЧтениеОпций.ЗначениеОпции("connection", Истина));
	КонецЕсли;
	Если МассивПараметров.Найти("user") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("Пользователь", ЧтениеОпций.ЗначениеОпции("user"));
	Иначе
		ПараметрыКоманды.Вставить("Пользователь", "");
	КонецЕсли;
	Если МассивПараметров.Найти("password") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("Пароль", ЧтениеОпций.ЗначениеОпции("password"));
	Иначе
		ПараметрыКоманды.Вставить("Пароль", "");
	КонецЕсли;
	Если МассивПараметров.Найти("v8version") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("ВерсияПлатформы", ЧтениеОпций.ЗначениеОпции("v8version"));
	КонецЕсли;
	Если МассивПараметров.Найти("ordinaryapp") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("РежимЗапуска", ЧтениеОпций.ЗначениеОпции("ordinaryapp"));
		Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.РежимЗапуска) Тогда
			ПараметрыКоманды.РежимЗапуска = 0;
		КонецЕсли;
	КонецЕсли;
	Если МассивПараметров.Найти("language") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("КодЯзыка", ЧтениеОпций.ЗначениеОпции("language"));
	КонецЕсли;
	Если МассивПараметров.Найти("locale") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("КодЯзыкаСеанса", ЧтениеОпций.ЗначениеОпции("locale"));
	КонецЕсли;
	Если МассивПараметров.Найти("uccode") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("КлючРазрешенияЗапуска", ЧтениеОпций.ЗначениеОпции("uccode"));
	КонецЕсли;
	Если МассивПараметров.Найти("nocacheuse") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("НеИспользоватьКэш", ЧтениеОпций.ЗначениеОпции("nocacheuse"));
	КонецЕсли;
	Если МассивПараметров.Найти("server") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("Сервер1С", ЧтениеОпций.ЗначениеОпции("server", Истина));
	КонецЕсли;
	Если МассивПараметров.Найти("ref") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("ИмяИБ", ЧтениеОпций.ЗначениеОпции("ref", Истина));
	КонецЕсли;
	Если МассивПараметров.Найти("dbms") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("ТипСУБД", ЧтениеОпций.ЗначениеОпции("dbms"));
		Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.ТипСУБД) Тогда
			ПараметрыКоманды.ТипСУБД = Перечисления.ТипыСУБД.MSSQLServer;
		КонецЕсли;
	КонецЕсли;
	Если МассивПараметров.Найти("dbserver") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("СерверСУБД", ЧтениеОпций.ЗначениеОпции("dbserver"));
	КонецЕсли;
	Если МассивПараметров.Найти("dbuser") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("ПользовательСУБД", ЧтениеОпций.ЗначениеОпции("dbuser"));
	КонецЕсли;
	Если МассивПараметров.Найти("dbpassword") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("ПарольСУБД", ЧтениеОпций.ЗначениеОпции("dbpassword"));
	КонецЕсли;
	Если МассивПараметров.Найти("dbname") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("ИмяБД", ЧтениеОпций.ЗначениеОпции("dbname"));
	КонецЕсли;
	Если МассивПараметров.Найти("sqloffs") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("СмещениеДат", ЧтениеОпций.ЗначениеОпции("sqloffs"));
		Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.СмещениеДат) Тогда
			ПараметрыКоманды.СмещениеДат = 2000;
		КонецЕсли;
	КонецЕсли;
	Если МассивПараметров.Найти("createdb") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("СоздаватьБД", ЧтениеОпций.ЗначениеОпции("createdb"));
	КонецЕсли;
	Если МассивПараметров.Найти("allowschjob") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("РазрешитьРегЗадания", ЧтениеОпций.ЗначениеОпции("allowschjob"));
	КонецЕсли;
	Если МассивПараметров.Найти("allowlicdstr") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("РазрешитьВыдачуЛицензий", ЧтениеОпций.ЗначениеОпции("allowlicdstr"));
	КонецЕсли;
	Если МассивПараметров.Найти("cadmuser") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("АдминистраторКластера", ЧтениеОпций.ЗначениеОпции("cadmuser"));
	КонецЕсли;
	Если МассивПараметров.Найти("cadmpassword") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("ПарольКластера", ЧтениеОпций.ЗначениеОпции("cadmpassword"));
	КонецЕсли;
	Если МассивПараметров.Найти("template") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("ПутьКШаблону", ЧтениеОпций.ЗначениеОпции("template"));
	КонецЕсли;
	Если МассивПараметров.Найти("basename") <> Неопределено Тогда
		ПараметрыКоманды.Вставить("ИмяБазыВСписке", ЧтениеОпций.ЗначениеОпции("basename"));
	КонецЕсли;
	
	Возврат ПараметрыКоманды;
	
КонецФункции
// BSLLS:CognitiveComplexity-on
// BSLLS:CyclomaticComplexity-on

#КонецОбласти