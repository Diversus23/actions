#Использовать logos
#Использовать 1connector
#Использовать ftp

// Лог модуля
Перем Лог;

// BSLLS:LatinAndCyrillicSymbolInWord-off

#Область ПрограммныйИнтерфейс

// Добавляет в команду приложения для FTP общие опции
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт

	Команда.Опция("server", "",
		"Имя FTP-сервера (обязательный)")
		.ТСтрока();

	Команда.Опция("login l", "",
		"Логин FTP-сервера. По умолчанию ""anonymous"" (необязательный)")
		.ТСтрока();

	Команда.Опция("password p", "",
		"Пароль FTP-сервера. По умолчанию ""anonymous"" (необязательный)")
		.ТСтрока();

	Команда.Опция("port", "",
		"Порт на FTP-сервере. Если не указано, то будет использован 21 порт (необязательный)")
		.ТЧисло();

	Команда.Опция("timeout t", "",
		"Таймаут подключения к FTP-серверу. По умолчанию - 30 секунд (необязательный)")
		.ТЧисло();

	Команда.Опция("passive", "",
		"Флаг пассивного режима (необязательный)")
		.ТБулево();

	Команда.Опция("secure", "",
		"Флаг защищенного соединения (необязательный)")
		.ТБулево();
		
КонецПроцедуры

// Получает и проверяет параметры для команд FTP
//
// Параметры:
//  Команда    - КомандаПриложения     - команда приложения
//
// Возвращаемое значение:
//	Структура - Подготовленные для работы с FTP параметры.
//
Функция ПолучитьСтруктуруПараметровFTP(Знач Команда) Экспорт

	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);
	ВыводОтладочнойИнформации = ЧтениеОпций.ЗначениеОпции("verbose");
	ПараметрыСистемы.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Сервер", ЧтениеОпций.ЗначениеОпции("server", Истина));
	ПараметрыКоманды.Вставить("ИмяПользователя", ЧтениеОпций.ЗначениеОпции("login", Ложь));
	ПараметрыКоманды.Вставить("Пароль", ЧтениеОпций.ЗначениеОпции("password", Ложь));
	ПараметрыКоманды.Вставить("Порт", ЧтениеОпций.ЗначениеОпции("port", Ложь, РаботаFTP.ПортПоУмолчанию()));
	ПараметрыКоманды.Вставить("Таймаут", ЧтениеОпций.ЗначениеОпции("timeout", Ложь, РаботаFTP.ТаймаутПоУмолчанию()));
	ПараметрыКоманды.Вставить("ПассивныйРежим", ЧтениеОпций.ЗначениеОпции("passive", Ложь));
	ПараметрыКоманды.Вставить("ПассивныйРежим", ЗначениеЗаполнено(ПараметрыКоманды.ПассивныйРежим));
	ПараметрыКоманды.Вставить("ЗащищенноеСоединение", ЧтениеОпций.ЗначениеОпции("secure", Ложь));
	ПараметрыКоманды.Вставить("ЗащищенноеСоединение", ЗначениеЗаполнено(ПараметрыКоманды.ЗащищенноеСоединение));

	Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.ИмяПользователя)
		И НЕ ЗначениеЗаполнено(ПараметрыКоманды.Пароль) Тогда
		ПараметрыКоманды.ИмяПользователя = "anonymous";
		ПараметрыКоманды.Пароль = "anonymous";
	КонецЕсли;

	Возврат ПараметрыКоманды;

КонецФункции

// Получает и проверяет параметры для команд FTP (для команд get и put)
//
// Параметры:
//  Команда    - КомандаПриложения     - команда приложения
//
// Возвращаемое значение:
//	Структура - Подготовленные для работы с FTP параметры.
//
Функция ПолучитьСтруктуруПараметровFTPGetPut(Знач Команда) Экспорт

	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);

	ПараметрыКоманды = ПолучитьСтруктуруПараметровFTP(Команда);
	ПараметрыКоманды.Вставить("ПутьНаСервере", ЧтениеОпций.ЗначениеОпции("remote", Ложь, "/"));
	ПараметрыКоманды.Вставить("Маска", ЧтениеОпций.ЗначениеОпции("mask", Ложь, "*"));
	ПараметрыКоманды.Вставить("ПутьЛокально", ЧтениеОпций.ЗначениеОпции("local"));
	ПараметрыКоманды.Вставить("Рекурсивно", ЧтениеОпций.ЗначениеОпции("recursive", Ложь, Ложь));

	Возврат ПараметрыКоманды;

КонецФункции

// Получает и проверяет параметры для команд FTP (для команд delete)
//
// Параметры:
//  Команда    - КомандаПриложения     - команда приложения
//
// Возвращаемое значение:
//	Структура - Подготовленные для работы с FTP параметры.
//
Функция ПолучитьСтруктуруПараметровFTPDelete(Знач Команда) Экспорт

	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);

	ПараметрыКоманды = ПолучитьСтруктуруПараметровFTP(Команда);
	ПараметрыКоманды.Вставить("ПутьНаСервере", ЧтениеОпций.ЗначениеОпции("remote", Ложь, "/"));
	ПараметрыКоманды.Вставить("Маска", ЧтениеОпций.ЗначениеОпции("mask", Ложь, "*"));

	Возврат ПараметрыКоманды;

КонецФункции

// Инициализирует новое FTP-соединение
//
// Параметры:
//  Настройки    - Структура     - настройки соединения
//
// Возвращаемое значение:
//	FtpСоединение - Подготовленное для работы FTP-соединение.
//
Функция НовоеFTPСоединение(Знач Настройки) Экспорт
	
	Возврат Новый FtpСоединение(
		Настройки.Сервер,
		Настройки.Порт,
		Настройки.ИмяПользователя,
		Настройки.Пароль, ,
		Настройки.ПассивныйРежим,
		Настройки.Таймаут,
		Настройки.ЗащищенноеСоединение);
	
КонецФункции

// FTP-порт по умолчанию
//
// Возвращаемое значение:
//	Число - 21 порт
//
Функция ПортПоУмолчанию() Экспорт

	Порт = 21;
	Возврат Порт;

КонецФункции

// FTP-таймаут по умолчанию
//
// Возвращаемое значение:
//	Число - 30 секунд
//
Функция ТаймаутПоУмолчанию() Экспорт

	Таймаут = 30;
	Возврат Таймаут;

КонецФункции

// Получает файлы по FTP
//
// Параметры:
//  Параметры    - Структура     - настройки соединения и получения файлов
//
// Возвращаемое значение:
//	Массив - массив полученных файлов.
//
Функция ПолучениеФайлов(Знач Параметры) Экспорт
	
	Результат = Новый Массив();
	
	Лог.Информация("Начало загрузки файлов с FTP");
		
	Попытка
		FTPСоединение = НовоеFTPСоединение(Параметры);
		FTPСоединение.УстановитьТекущийКаталог(Параметры.ПутьНаСервере);
		Лог.Информация("Текущий каталог на сервере <%1>", Параметры.ПутьНаСервере);
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка подключения к серверу FTP: %1", ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
		
	МассивФайлов = FtpСоединение.НайтиФайлы(Параметры.ПутьНаСервере, Параметры.Маска, Параметры.Рекурсивно);
	Для Каждого ФайлНаСервере Из МассивФайлов Цикл

		ИмяФайла = ПреобразоватьВЛокальныйПуть(Параметры.ПутьНаСервере, 
			ФайлНаСервере.ПолноеИмя, Параметры.ПутьЛокально);
		НовыйФайл = Новый Файл(ИмяФайла);

		Если НЕ ФайловыеОперации.КаталогСуществует(НовыйФайл.Путь) Тогда
			ФайловыеОперации.ОбеспечитьКаталог(НовыйФайл.Путь);
		КонецЕсли;
		
		Лог.Информация("Начало получения файла <%1> << <%2>", ИмяФайла, ФайлНаСервере);
		Попытка
			FtpСоединение.Получить(ФайлНаСервере.ПолноеИмя, НовыйФайл.ПолноеИмя);
			Результат.Добавить(НовыйФайл.ПолноеИмя);
			Лог.Информация("Файл <%1> получен", НовыйФайл.ПолноеИмя);
		Исключение
			ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка получения файла по FTP: %1", ОписаниеОшибки());
		КонецПопытки;

	КонецЦикла;
	
	Лог.Информация("Загружено %1 файлов", Результат.Количество());
	Лог.Информация("Завершение загрузки файлов с FTP");

	Возврат Результат;
		
КонецФункции

// Отправляет файлы по FTP
//
// Параметры:
//  Параметры    - Структура     - настройки соединения и отправки файлов
//
// Возвращаемое значение:
//	Массив - массив переданных на FTP файлов.
//
Функция ОтправкаФайлов(Знач Параметры) Экспорт

	Результат = Новый Массив();
	Лог.Информация("Начало передачи файлов каталога по FTP");	
	
	Попытка
		Соединение = НовоеFTPСоединение(Параметры);
		Соединение.УстановитьТекущийКаталог(Параметры.ПутьНаСервере);
		Лог.Информация("Текущий каталог на сервере <%1>", Параметры.ПутьНаСервере);
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка подключения к серверу FTP: %1", ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;

	Файлы = НайтиФайлы(Параметры.ПутьЛокально, Параметры.Маска, Истина);	
	Для Каждого ЛокальныйФайл Из Файлы Цикл
		
		ФайлНаСервере = ЛокальныйПутьВFTP(Параметры.ПутьНаСервере, Параметры.ПутьЛокально, ЛокальныйФайл.ПолноеИмя);
		ПутьНаСервере = ПолучитьПутьФайлаНаFTP(ФайлНаСервере);

		// Если каталога, куда перемещаем не существует, создадим его
		Попытка
			Соединение.СоздатьКаталог(ПутьНаСервере);
			Лог.Отладка("Каталог на FTP <%1> создан", ПутьНаСервере);
		Исключение
			Лог.Отладка("Не удалось создать каталог на FTP <%1>", ПутьНаСервере);
		КонецПопытки;		

		Лог.Информация("Начало отправки файла <%1> >> <%2>", ЛокальныйФайл.ПолноеИмя, ФайлНаСервере);
		Попытка
			Соединение.Записать(ЛокальныйФайл.ПолноеИмя, ФайлНаСервере);
			Лог.Информация("Файл <%1> отправлен", ЛокальныйФайл.ПолноеИмя);
			Результат.Добавить(ФайлНаСервере);
		Исключение
			ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка передачи файла по FTP: %1", ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

	Лог.Информация("Передано %1 файлов", Результат.Количество());
	Лог.Информация("Завершение передачи файлов каталога по FTP");

	Возврат Результат;

КонецФункции

// Удаление файлов на FTP
//
// Параметры:
//  Параметры    - Структура     - настройки соединения и отправки файлов
//
Процедура УдалениеФайлов(Знач Параметры) Экспорт

	Лог.Информация("Начало удаления файлов на FTP");	
	
	Попытка
		Соединение = НовоеFTPСоединение(Параметры);
		Соединение.УстановитьТекущийКаталог(Параметры.ПутьНаСервере);
		Лог.Информация("Текущий каталог на сервере <%1>", Параметры.ПутьНаСервере);
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка подключения к серверу FTP: %1", ОписаниеОшибки());
	КонецПопытки;

	Лог.Информация("Начало удаления файлов Путь <%1> Маска <%2>", Параметры.ПутьНаСервере, Параметры.Маска);
	Попытка
		Соединение.Удалить(Параметры.ПутьНаСервере, Параметры.Маска);		
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка удаления файлов на FTP: %1", ОписаниеОшибки());
	КонецПопытки;	
	Лог.Информация("Завершение удаление файлов на FTP");

КонецПроцедуры

// Существует ли файл на FTP-сервере
//
// Параметры:
//	ПолноеИмяФайла - Строка - имя файла на FTP. Пример: /chatgpt/folder/test.txt
//  Параметры    - Структура     - настройки соединения и отправки файлов
//
// Возвращаемое значение:
//	Булево - существует файл или нет на FTP
//
Функция ФайлСуществует(Знач ПолноеИмяФайла, Знач Параметры) Экспорт

	Попытка
		Соединение = НовоеFTPСоединение(Параметры);		
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка подключения к серверу FTP: %1", ОписаниеОшибки());
	КонецПопытки;

	ПутьКФайлу = ПолучитьПутьФайлаНаFTP(ПолноеИмяФайла);
	ИмяФайла = ПолучитьИмяФайлаНаFTP(ПолноеИмяФайла);
	НайденныеФайлы = Соединение.НайтиФайлы(ПутьКФайлу, ИмяФайла, Ложь);

	Возврат НайденныеФайлы.Количество() > 0;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПутьФайлаНаFTP(Знач ИмяФайлаНаСервере)
	
	Индекс = СтрНайти(ИмяФайлаНаСервере, "/", НаправлениеПоиска.СКонца);
	Если Индекс > 0 Тогда
		Возврат Лев(ИмяФайлаНаСервере, Индекс);
	КонецЕсли;

	Возврат ИмяФайлаНаСервере;

КонецФункции

Функция ПолучитьИмяФайлаНаFTP(Знач ИмяФайлаНаСервере)
	
	Индекс = СтрНайти(ИмяФайлаНаСервере, "/", НаправлениеПоиска.СКонца);
	Если Индекс > 0 Тогда
		Возврат Сред(ИмяФайлаНаСервере, Индекс + 1);
	КонецЕсли;

	Если СтрНачинаетсяС(ИмяФайлаНаСервере, "/") Тогда
		Возврат Прав(ИмяФайлаНаСервере, СтрДлина(ИмяФайлаНаСервере) - 1);
	КонецЕсли;

	Возврат ИмяФайлаНаСервере;

КонецФункции

Функция ЛокальныйПутьВFTP(Знач ПутьНаСервере, Знач ПутьЛокально, Знач ПолноеИмя)

	// ПутьНаСервере - "/ChatGPT/"
	// ПутьЛокально - "C:\Temp\"
	// ПолноеИмя - "C:\Temp\Folder\2.txt"
	// ====
	// Результаn - "/ChatGPT/Folder/2.txt"

	Лог.Отладка("ПутьНаСервере: %1
				|ПутьЛокально: %2
				|ПолноеИмя: %3", ПутьНаСервере, ПутьЛокально, ПолноеИмя);

	Результат = ПолноеИмя;
	Если СтрНачинаетсяС(Результат, ПутьЛокально) Тогда
		Результат = Сред(Результат, СтрДлина(ПутьЛокально) + 1);
	КонецЕсли;

	Лог.Отладка("Результат (удалили путь локально): %1", Результат);

	РазделительОС = ПолучитьРазделительПути();
	Если РазделительОС = "\" Тогда
		Результат = СтрЗаменить(Результат, "\", "/");
	КонецЕсли;

	Если НЕ ПустаяСтрока(Результат) Тогда
		Если СтрНачинаетсяС(Результат, "/") Тогда
			ИндексСКоторогоКопируем = 2;
			Результат = Сред(Результат, ИндексСКоторогоКопируем);
		КонецЕсли;
	КонецЕсли;

	Лог.Отладка("Результат (удалили разделитель): %1", Результат);

	Результат = ДополнитьРазделителемFTP(ПутьНаСервере) + Результат;
	
	Возврат Результат;

КонецФункции

Функция ПреобразоватьВЛокальныйПуть(Знач ПутьНаСервере, Знач ФайлНаСервере, Знач ЛокальныйПуть)

	// ПутьНаСервере - "/"
	// ФайлНаСервере - "/journalext/index.html"
	// ЛокальныйПуть - "C:\Temp"
	// ====
	// Результат	 - "C:\Temp\journalext\index.html"

	Лог.Отладка("ПутьНаСервере: %1
				|ФайлНаСервере: %2
				|ЛокальныйПуть: %3", ПутьНаСервере, ФайлНаСервере, ЛокальныйПуть);

	Результат = ФайлНаСервере;
	Если СтрНачинаетсяС(Результат, ПутьНаСервере) Тогда
		Результат = Сред(Результат, СтрДлина(ПутьНаСервере) + 1);
	КонецЕсли;

	Лог.Отладка("Результат (удалили путь на сервере): %1", Результат);

	РазделительОС = ПолучитьРазделительПути();
	Если РазделительОС <> "/" Тогда
		Результат = СтрЗаменить(Результат, "/", РазделительОС);
	КонецЕсли;
	
	Лог.Отладка("Результат (удалили разделитель): %1", Результат);

	Результат = ОбъединитьПути(ЛокальныйПуть, Результат);

	Возврат Результат;

КонецФункции

Функция ДополнитьРазделителемFTP(Стр)

	Если ПустаяСтрока(Стр) Тогда
		Возврат "/";
	КонецЕсли;

	Результат = Стр;
	Если НЕ СтрЗаканчиваетсяНа(Результат, "/") Тогда
		Результат = Результат + "/";
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

// BSLLS:LatinAndCyrillicSymbolInWord-on

Лог = ПараметрыСистемы.Лог();