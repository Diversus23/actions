#Использовать logos
#Использовать 1connector

Перем Лог;

Функция КонструкторОбфускцииОбщегоМодуля() Экспорт

    НастройкиОбфускации = Новый Структура();
    НастройкиОбфускации.Вставить("ModuleType", "CommonModule"); // Общий модуль обрабатываем
    НастройкиОбфускации.Вставить("ByteCode", 1); // Обязательный реквизит
    НастройкиОбфускации.Вставить("EncryptStrings", 1); // Шифровать строки
    НастройкиОбфускации.Вставить("ControlFlow", 1); // Контроль потока
    НастройкиОбфускации.Вставить("FormatResult", 0); // Форматировать результат
    НастройкиОбфускации.Вставить("KeepCase", 0);
    НастройкиОбфускации.Вставить("InsertTests", 1); // Для модулей форм и объектов, включить в код тесты проверки реквизитов
    НастройкиОбфускации.Вставить("ControlFlowLevel", 1);
	
	Возврат НастройкиОбфускации;
	
КонецФункции

Процедура ОбфускацияФайла1С(Знач Параметры) Экспорт
	
    Лог.Информация("Начало обфускации файла");
    
    Адрес = "https://netlenka.org/Module/ApiClientProtect";
    ИсходныйФайл = Параметры.ИсходныйФайл;   
    ОбфусцированныйФайл = Параметры.ФайлРезультат;    
    ApiKey = Параметры.КлючAPI;
    
    // public class ApiRequest
    // {
    //     public string ApiKey { get; set; }
    //     public string Text { get; set; }
    //     public bool EncryptStrings { get; set; }
    //     public bool InsertTests { get; set; }
    //     public string ModuleType { get; set; }
    //     public bool ControlFlow { get; set; }
    //     public int ControlFlowLevel { get; set; }
    //     public bool FormatResult { get; set; }
    //     public bool KeepCase { get; set; }
    //     public bool ByteCode { get; set; }
    //     public bool IsImage { get; set; }
    //     public bool CreatePDB { get; set; }
    //     public bool Base64 { get; set; }
    // }
    //
    // public enum ModuleType
    // {
    //     Unknown, CommonModule, FormModule, ManagedFormModule, ObjectModule, SystemModule, CommandModule,
    //     ObjectManager, Image
    // }
    
    ТекстовыйФайл = Новый ТекстовыйДокумент();
    ТекстовыйФайл.Прочитать(ИсходныйФайл, КодировкаТекста.UTF8);
    ДанныеДляОбфускации = "";
    Текст = ТекстовыйФайл.ПолучитьТекст();
    Для Индекс = 1 По СтрЧислоСтрок(Текст) Цикл
        ДанныеДляОбфускации = ДанныеДляОбфускации + СтрПолучитьСтроку(Текст, Индекс) + Символы.ВК + Символы.ПС;
    КонецЦикла;
    
	Структура = Параметры.НастройкиОбфускации;
	Структура.Вставить("ApiKey", ApiKey); // Ключ API
    
    ЗаписьJSON = Новый ЗаписьJSON();
    ЗаписьJSON.УстановитьСтроку();
    ЗаписатьJSON(ЗаписьJSON, Структура);
    ТекстЗапросаJSON = ЗаписьJSON.Закрыть();
    
    Данные = Новый Структура;
    Данные.Вставить("inputData", ТекстЗапросаJSON);
    Лог.Информация("Отправка запроса серверу обфускации");
    Ответ = КоннекторHTTP.Post(Адрес, Данные);
    ЧтениеJSON = Новый ЧтениеJSON();
    ЧтениеJSON.УстановитьСтроку(Ответ.Текст());
    Структура = ПрочитатьJSON(ЧтениеJSON);
    ЧтениеJSON.Закрыть();
    Если Структура.StatusCode = 200 Тогда
        ЧтениеJSON = Новый ЧтениеJSON();
        ЧтениеJSON.УстановитьСтроку(Структура.Content);
        Структура = ПрочитатьJSON(ЧтениеJSON);
        ЧтениеJSON.Закрыть();
        
        Если ВРег(ОбфусцированныйФайл) = ВРег(ИсходныйФайл) Тогда
            УдалитьФайлы(ОбфусцированныйФайл);
        КонецЕсли;
        
        // Записываем в кодировке UTF-8
        ЗТ = Новый ЗаписьТекста(ОбфусцированныйФайл, "windows-1251");
        ЗТ.Закрыть();
        ЗТ = Новый ЗаписьТекста(ОбфусцированныйФайл, "UTF-8", , Истина);
        ЗТ.Записать(Структура.Text);
        ЗТ.Закрыть();
        
        Лог.Информация("Обфускация файла успешно завершена");
    Иначе
        ТекстОшибки = СтрШаблон("Произошла ошибка обфускации %1 (%2)", Структура.Content, Структура.StatusCode);
        ВызватьИсключение ТекстОшибки;
    КонецЕсли;
    
    Лог.Информация("Окончание процесса обфускации");

КонецПроцедуры

Лог = ПараметрыСистемы.Лог();