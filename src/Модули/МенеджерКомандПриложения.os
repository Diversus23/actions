Перем мИсполнителиКоманд;

Процедура ЗарегистрироватьКоманды(Знач Парсер) Экспорт
	
	мИсполнителиКоманд = КонструкторИсполнителиКоманд();
	
	ОбщегоНазначения.РегистрацияГлобальныхПараметровКоманд(Парсер);
	
	ДобавитьКоманду("help", "КомандаСправкаПоПараметрам", Парсер);
	ДобавитьКоманду("version", "КомандаВерсия", Парсер);
	ДобавитьКоманду("zip", "КомандаУправлениеZIP", Парсер);
	ДобавитьКоманду("unzip", "КомандаУправлениеZIP", Парсер);
	ДобавитьКоманду("createibfile", "КомандаСоздатьИнформационнуюБазу1С", Парсер);
	ДобавитьКоманду("createibserver", "КомандаСоздатьИнформационнуюБазу1С", Парсер);
	ДобавитьКоманду("checkconfig", "КомандаПроверитьСинтаксис", Парсер);
	ДобавитьКоманду("obfuscation", "КомандаОбфускация", Парсер);
	ДобавитьКоманду("autodoc", "КомандаАвтодокументация", Парсер);
	ДобавитьКоманду("changelog", "КомандаУправлениеChangeLog", Парсер, "ОсобенностиChangeLog");
	ДобавитьКоманду("changelog-init", "КомандаУправлениеChangeLog", Парсер, "ОписаниеФорматаChangeLog");
	
КонецПроцедуры

Функция НайтиКоманду(Знач ИмяКоманды) Экспорт
	
	Возврат мИсполнителиКоманд.Найти(ИмяКоманды, "ИмяКоманды");
	
КонецФункции

Функция ПолучитьКоманду(Знач ИмяКоманды) Экспорт
	
	СтрокаТаблицы = НайтиКоманду(ИмяКоманды);
	Если СтрокаТаблицы = Неопределено Тогда
		ВызватьИсключение "Неверная операция. Команда '" + ИмяКоманды + "' не предусмотрена";
	КонецЕсли;
	
	Возврат СтрокаТаблицы.КлассРеализации;
	
КонецФункции

Функция ВыполнитьКоманду(Знач ИмяКоманды, Знач ПараметрыКоманды) Экспорт
	
	Команда = ПолучитьКоманду(ИмяКоманды);
	Возврат Команда.ВыполнитьКоманду(ПараметрыКоманды);
	
КонецФункции

Функция РезультатыКоманд() Экспорт
	
	РезультатыКоманд = Новый Структура;
	РезультатыКоманд.Вставить("НеРеализовано", 255);
	РезультатыКоманд.Вставить("Успех", 0);
	РезультатыКоманд.Вставить("НеверныеПараметры", 5);
	РезультатыКоманд.Вставить("ОшибкаВремениВыполнения", 1);
	
	Возврат РезультатыКоманд;
	
КонецФункции

Функция КодВозвратаКоманды(Знач Команда) Экспорт
	
	Возврат Число(Команда);
	
КонецФункции

Функция КонструкторИсполнителиКоманд()
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("ИмяКоманды");
	Таблица.Колонки.Добавить("КлассРеализации");
	Таблица.Колонки.Добавить("ДополнительноеОписание");
	Возврат Таблица;
КонецФункции

Процедура ДобавитьКоманду(Знач ИмяКоманды, Знач КлассРеализации, Знач Парсер, Знач ДополнительноеОписание = Неопределено)
	
	РеализацияКоманды = Новый(КлассРеализации);
	РеализацияКоманды.ЗарегистрироватьКоманду(ИмяКоманды, Парсер);
	
	НоваяСтрока = мИсполнителиКоманд.Добавить();
	НоваяСтрока.ИмяКоманды = ИмяКоманды;
	НоваяСтрока.КлассРеализации = РеализацияКоманды;
	НоваяСтрока.ДополнительноеОписание = ДополнительноеОписание;
	
КонецПроцедуры

Процедура ПоказатьСправкуПоКомандам() Экспорт
	
	ВыполнитьКоманду("help", Новый Соответствие);
	
КонецПроцедуры

Функция ТекстовоеОписаниеКоманд() Экспорт
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	МенеджерКомандПриложения.ЗарегистрироватьКоманды(Парсер);
	ВозможныеКоманды = Парсер.СправкаВозможныеКоманды();
	ПС = Символы.ПС;
	ДС = ПС + ПС;
	
	Результат = "# Описание команд" + ДС;
	
	Результат = Результат + "| Команда | Описание |" + ПС
		+ "| --- | --- |" + ПС;
	Для Каждого Команда Из ВозможныеКоманды Цикл
		Результат = Результат
			+ "| [`" + Команда.Команда + "`](#" + Команда.Команда + ")" + " | " + Команда.Пояснение + " |" + ПС;
	КонецЦикла;
	
	Результат = Результат + ПС;
	
	// Таблица = Новый ТаблицаЗначений;
	// Таблица.Колонки.Добавить("Имя");
	// Таблица.Колонки.Добавить("ЭтоФлаг");
	// Таблица.Колонки.Добавить("Пояснение");
	// Таблица.Колонки.Добавить("ЭтоГлобальныйПараметр");
	// Таблица.Колонки.Добавить("ЭтоКоллекция");
	
	Для Каждого Команда Из ВозможныеКоманды Цикл
		
		// Команда и пояснение
		Результат = Результат + "## " + Команда.Команда + ДС + Команда.Пояснение + "." + ДС;
			
		// Параметры команды
		ТекстПараметры = "";
		Для Каждого Параметр Из Команда.Параметры Цикл
			ТекстПараметры = ТекстПараметры
				+ "- **" + Параметр.Имя + "** " + Параметр.Пояснение + "." + Символы.ПС;
		КонецЦикла;				
		Если НЕ ПустаяСтрока(ТекстПараметры) Тогда
			Результат = Результат + "### Параметры команды" + ДС;
			Результат = Результат + ТекстПараметры;
			Результат = Результат + ПС;
		КонецЕсли;		
				
		ОписаниеКоманды = НайтиКоманду(Команда.Команда);
		Если ОписаниеКоманды.ДополнительноеОписание <> Неопределено Тогда
			ДанныеМакета = ОбщегоНазначения.ПрочитатьДанныеИзМакета(ОписаниеКоманды.ДополнительноеОписание);
			Результат = Результат + ДанныеМакета + ДС;
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции