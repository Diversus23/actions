#Использовать 1connector

#Область ПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("url u", "",
		"URL сервера Allure Docker Service (обязательный)")
		.ТСтрока();

	Команда.Опция("project", "",
		"Имя проекта на сервере Allure Docker Service (обязательный)")
		.ТСтрока();

	Команда.Опция("execution_type et", "",
		"Тип запуска. Пример: ""jenkins"" или ""gitlab"" (не обязательный)")
		.ТСтрока();

	Команда.Опция("execution_from ef", "",
		"Запуск из ветки. Пример http://my-gitlab-url/job/my-job/7/ (не обязательный)")
		.ТСтрока();

	Команда.Опция("execution_name en", "",
		"Если вам не подходит ""execution_type"", можете заменить. Пример my-execution-name (не обязательный)")
		.ТСтрока();		

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	Лог = ПараметрыСистемы.Лог();
	Лог.Информация("Начало создания отчетов на сервере Allure Docker Service");

	Параметры = ПолучитьСтруктуруПараметров(Команда);	
	// Готовим запрос
	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("project_id", Параметры.Проект);
	Если ЗначениеЗаполнено(Параметры.Тип) Тогда
		СтруктураЗапроса.Вставить("execution_type", Параметры.Тип);
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.Имя) Тогда
		СтруктураЗапроса.Вставить("execution_name", Параметры.Имя);
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.Откуда) Тогда
		СтруктураЗапроса.Вставить("execution_from", Параметры.Откуда);
	КонецЕсли;
	Адрес = РаботаAllure.ПостоянныйАдресAllureDickerService(Параметры.АдресСервера) 
		+ "/generate-report?"
		+ ОбщегоНазначения.СтруктуруВПараметрыHTTPЗапроса(СтруктураЗапроса);	

	// Отправляем запрос
	Таймаут = РаботаAllure.ТаймаутAllureDickerService();
	Попытка
		Ответ = КоннекторHTTP.Get(Адрес, Неопределено, Новый Структура("Таймаут", Таймаут)).Json();
	Исключение
		Текст = ОписаниеОшибки();
		ОбщегоНазначения.ЗавершениеРаботыОшибка(
			"Ошибка отправки данных на сервер Allure Docker Service:
			|%1", Текст);
	КонецПопытки;

	// Анализ ответа
	ТекстОтвета = Ответ["meta_data"]["message"];
	Если СтрНайти(ТекстОтвета, "successfully") = 0 Тогда
	 	ОбщегоНазначения.ЗавершениеРаботыОшибка(
			"Ошибка генерации отчета данных на сервере Allure: %1",
			ТекстОтвета);
	КонецЕсли;

	Лог.Информация("Создание отчетов на сервере Allure Docker Service завершена");

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруПараметров(Знач Команда)
	
	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);	
	ВыводОтладочнойИнформации = ЧтениеОпций.ЗначениеОпции("verbose");	
	ПараметрыСистемы.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	ПараметрыКоманды = Новый Структура;	
	ПараметрыКоманды.Вставить("АдресСервера", ЧтениеОпций.ЗначениеОпции("url", Истина));
	ПараметрыКоманды.Вставить("Проект", ЧтениеОпций.ЗначениеОпции("project", Истина));
	ПараметрыКоманды.Вставить("Тип", ЧтениеОпций.ЗначениеОпции("execution_type", Ложь));
	ПараметрыКоманды.Вставить("Откуда", ЧтениеОпций.ЗначениеОпции("execution_from", Ложь));
	ПараметрыКоманды.Вставить("Имя", ЧтениеОпций.ЗначениеОпции("execution_name", Ложь));

	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции