#Использовать json

#Область ПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("path p", "",
		"Путь куда будет сохранен файл (обязательный)")
		.ТСтрока();

	Команда.Опция("name n", "",
		"Имя CI (обязательный)")
		.ТСтрока();

	Команда.Опция("type t", "",
		"Тип CI (обязательный)")
		.ТСтрока();

	Команда.Опция("url u", "", 
		"URL CI")
		.ТСтрока();
		
	Команда.Опция("buildOrder bo o", "", 
		"Pipeline ID")
		.ТЧисло();
		
	Команда.Опция("buildName bn", "",
		"Имя билда (содержание коммита, комментарий коммита и т.д.)")
		.ТСтрока();
		
	Команда.Опция("buildUrl bu", "", 
		"Pipeline URL")
		.ТСтрока();
		
	Команда.Опция("reportUrl ru", "", 
		"URL на опубликованный отчет Allure")
		.ТСтрока();

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	Лог = ПараметрыСистемы.Лог();
	Лог.Информация("Создаем файл Allure executors.json");

	Параметры = ПолучитьСтруктуруПараметров(Команда);	
	
	Если НЕ ФайловыеОперации.КаталогСуществует(Параметры.ПутьКРезультатам) Тогда
		ФайловыеОперации.ОбеспечитьКаталог(Параметры.ПутьКРезультатам);
	КонецЕсли;

	ПутьКФайлу = ОбъединитьПути(Параметры.ПутьКРезультатам, "executors.json");
	СоздатьФайл(ПутьКФайлу, Параметры);
	Лог.Информация("Окончание создания файла executors.json");

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруПараметров(Знач Команда)
	
	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);	
	ВыводОтладочнойИнформации = ЧтениеОпций.ЗначениеОпции("verbose");	
	ПараметрыСистемы.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	ПараметрыКоманды = Новый Структура;	
	ПараметрыКоманды.Вставить("ПутьКРезультатам", ЧтениеОпций.ЗначениеОпции("path", Истина));
	ПараметрыКоманды.Вставить("name", ЧтениеОпций.ЗначениеОпции("name", Истина));
	ПараметрыКоманды.Вставить("type", ЧтениеОпций.ЗначениеОпции("type", Истина));
	ПараметрыКоманды.Вставить("url", ЧтениеОпций.ЗначениеОпции("url", Истина));
	ПараметрыКоманды.Вставить("buildOrder", ЧтениеОпций.ЗначениеОпции("buildOrder", Истина));
	ПараметрыКоманды.Вставить("buildName", ЧтениеОпций.ЗначениеОпции("buildName", Истина));
	ПараметрыКоманды.Вставить("buildUrl", ЧтениеОпций.ЗначениеОпции("buildUrl", Истина));
	ПараметрыКоманды.Вставить("reportUrl", ЧтениеОпций.ЗначениеОпции("reportUrl", Истина));

	Возврат ПараметрыКоманды;
	
КонецФункции

Процедура СоздатьФайл(Знач ПутьКФайлу, Знач ПараметрыКоманды)
	
	Если НЕ ФайловыеОперации.ФайлСуществует(ПутьКФайлу) Тогда
		МассивИзФайла = Новый Массив;
	Иначе
		Файл = ФайловыеОперации.ПрочитатьТекстФайла(ПутьКФайлу);
		ПарсерJson = Новый ПарсерJSON();		
		МассивИзФайла = ПарсерJson.ПрочитатьJSON(Файл);
	КонецЕсли;

	Результат = Новый Соответствие();
	Результат.Вставить("name", ПараметрыКоманды.name);
	Результат.Вставить("type", ПараметрыКоманды.type);
	Результат.Вставить("url", ПараметрыКоманды.url);
	Результат.Вставить("buildOrder", ПараметрыКоманды.buildOrder);
	Результат.Вставить("buildName", ПараметрыКоманды.buildName);
	Результат.Вставить("buildUrl", ПараметрыКоманды.buildUrl);
	Результат.Вставить("reportUrl", ПараметрыКоманды.reportUrl);

	МассивИзФайла.Вставить(0, Результат);
	Запись = Новый ЗаписьJSON();
	Запись.ОткрытьФайл(ПутьКФайлу, , , Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, Символы.Таб));	
	Попытка
		ЗаписатьJSON(Запись, МассивИзФайла);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	Запись.Закрыть();
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции