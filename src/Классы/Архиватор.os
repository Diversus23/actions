#Использовать asserts

// Имя архива
Перем ИмяФайла;
// Лог для вывода информации
Перем Лог;

#Область ПрограммныйИнтерфейс

// Возвращается имя файла архива
//
// Возвращаемое значение:
//	Строка - Имя файла.
//
Функция ИмяФайла() Экспорт

    Возврат ИмяФайла;

КонецФункции

// Добавляет файлы в архив.
//
// Параметры:
//  МассивФайлов    - Массив     - массив с полными именами файлов.
//
// Возвращаемое значение:
//	Булево - Истина, если все файлы были добавлены в архив.
//
Функция Добавить(Знач МассивФайлов) Экспорт

	ЗаписьZIP = Новый ЗаписьZipФайла(ИмяФайла);
	Для Каждого ИмяДобавляемогоФайла Из МассивФайлов Цикл
		Лог.Информация("Добавление файла (каталога) <%1>", ИмяДобавляемогоФайла);
		ЗаписьZIP.Добавить(ИмяДобавляемогоФайла,
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	КонецЦикла;
	ЗаписьZIP.Записать();

	Возврат Истина;

КонецФункции

// Извлекает файлы из архива.
//
// Параметры:
//  Путь    - Строка     - полный путь куда надо распаковать архив.
//
// Возвращаемое значение:
//	Булево - Истина, если все файлы были распакованы.
//
Функция Распаковать(Знач Путь) Экспорт
	
	Лог.Информация("Начало распаковки архива");
	
	Попытка
		ЧтениеZIP = Новый ЧтениеZipФайла(ИмяФайла);	
		ЧтениеZIP.ИзвлечьВсе(Путь, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ОбщегоНазначения.ЗавершениеРаботыОшибка(Инфо.ПодробноеОписаниеОшибки());
	КонецПопытки;
	
	Лог.Информация("Распаковка архива завершена");
	
	Возврат Истина;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта(ИмяАрхива)

    ИмяФайла = ИмяАрхива;

КонецПроцедуры

#КонецОбласти

Лог = ПараметрыСистемы.Лог();