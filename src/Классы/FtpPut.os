#Область ПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
    
	РаботаFTP.ОписаниеКоманды(Команда);

	Команда.Опция("local", "",
		"Директория из которой будут отправляться файлы на FTP-сервер на локальном компьютере (обязательный).
		|Пример: C:\Path\")
		.ТСтрока();

	Команда.Опция("mask m", "",
		СтрШаблон("%1 %2",
			"Маска файлов для отправки на сервер. Если не указана, то используется маска ""*"" (необязательный).",
			"Пример: *.txt"))
		.ТСтрока();

	Команда.Опция("remote r", "",
		"Имя директории на FTP-сервере, куда необходимо сохранить отправляемые файлы (необязательный).
		|Если не указано, то будет сохранено в корень ""/""")
		.ТСтрока();

	Команда.Опция("recursive r", "",
		СтрШаблон("%1 %2",
			"Флаг рекурсивного копирования файлов на FTP-сервер (необязательный).",
			"По умолчанию копирование выполняется только с локальной директории"))
		.ТБулево();

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(Команда);
	РаботаFTP.ОтправкаФайлов(СтруктураПараметров);
    
КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруПараметров(Знач Команда)

	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);	
	ВыводОтладочнойИнформации = ЧтениеОпций.ЗначениеОпции("verbose");	
	ПараметрыСистемы.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Сервер", ЧтениеОпций.ЗначениеОпции("server", Истина));
	ПараметрыКоманды.Вставить("ИмяПользователя", ЧтениеОпций.ЗначениеОпции("login"));
	ПараметрыКоманды.Вставить("Пароль", ЧтениеОпций.ЗначениеОпции("password"));
	ПараметрыКоманды.Вставить("Порт", ЧтениеОпций.ЗначениеОпции("port"));
	ПараметрыКоманды.Вставить("Таймаут", ЧтениеОпций.ЗначениеОпции("timeout"));
	ПараметрыКоманды.Вставить("ПутьНаСервере", ЧтениеОпций.ЗначениеОпции("remote"));
	ПараметрыКоманды.Вставить("ПутьЛокально", ЧтениеОпций.ЗначениеОпции("local", Истина));
	ПараметрыКоманды.Вставить("Маска", ЧтениеОпций.ЗначениеОпции("mask"));
	ПараметрыКоманды.Вставить("Рекурсивно", ЧтениеОпций.ЗначениеОпции("recursive"));

	Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.ИмяПользователя)
		И НЕ ЗначениеЗаполнено(ПараметрыКоманды.Пароль) Тогда
		ПараметрыКоманды.ИмяПользователя = "anonymous";
		ПараметрыКоманды.Пароль = "anonymous";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.Порт) Тогда
		ПараметрыКоманды.Порт = РаботаFTP.ПортПоУмолчанию();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.Таймаут) Тогда
		ПараметрыКоманды.Таймаут = РаботаFTP.ТаймаутПоУмолчанию();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.ПутьНаСервере) Тогда
		ПараметрыКоманды.ПутьНаСервере = "/";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.Маска) Тогда
		ПараметрыКоманды.Маска = "*";
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.Рекурсивно) Тогда
		ПараметрыКоманды.Рекурсивно = Ложь;
	КонецЕсли;

	Возврат ПараметрыКоманды; 

КонецФункции // ПолучитьСтруктуруПараметров()

#КонецОбласти // СлужебныеПроцедурыИФункции