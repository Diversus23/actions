///////////////////////////////////////////////////////////////////////////////////////////////////
// Код взят из пакета packman
// ToDo: Добавить поиск последней платформы, в случае если не задан параметр -v8version

Перем мКлючиЗапуска;

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Выполнить проверку синтаксиса конфигурации 1С");
	
	МассивПараметров = ОбщегоНазначения.ОбщиеПараметрыV8();
	ОбщегоНазначения.РегистрацияОбщихПараметровV8(ОписаниеКоманды, Парсер, МассивПараметров);

	мКлючиЗапуска = Новый Структура();
	мКлючиЗапуска.Вставить("ThinClient", "Тонкий клиент");
	мКлючиЗапуска.Вставить("WebClient", "Веб-клиент");
	мКлючиЗапуска.Вставить("Server", "Сервер");
	мКлючиЗапуска.Вставить("ExternalConnection", "Внешнее соединение");
	мКлючиЗапуска.Вставить("ThickClientOrdinaryApplication", "Толстый клиент об. прил.");
	мКлючиЗапуска.Вставить("ThickClientManagedApplication", "Толстый клиент упр. прил");
	мКлючиЗапуска.Вставить("ThickClientServerManagedApplication", "Толстый клиент упр. прил. клиент-сервер");
	мКлючиЗапуска.Вставить("ThickClientServerOrdinaryApplication", "Толстый клиент об. прил. клиент-сервер");
	мКлючиЗапуска.Вставить("ExternalConnectionServer", "Внешнее соединение клиент-сервер");
	мКлючиЗапуска.Вставить("ConfigLogIntegrity", "Логическая целостность конфигурации");
	мКлючиЗапуска.Вставить("IncorrectReferences", "Поиск некорректных ссылок");
	мКлючиЗапуска.Вставить("DistributiveModules", "Поставка без исходных текстов");
	мКлючиЗапуска.Вставить("EmptyHandlers", "Поиск пустых обработчиков");

	Для Каждого КлючЗначение Из мКлючиЗапуска Цикл
		Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-" + КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	Парсер.ДобавитьКоманду(ОписаниеКоманды);
	
КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   Параметры - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач Параметры) Экспорт
    
	ВозможныйРезультат = МенеджерКомандПриложения.РезультатыКоманд();
	Лог = ПараметрыСистемы.ПолучитьЛог();
	Лог.Информация("Начало проверки конфигурации");

	Конфигуратор = ОбщегоНазначения.НастроитьКонфигуратор(Параметры);

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/DasableStartupMessages");
	ПараметрыЗапуска.Добавить("/DisableStartupDialogs");
	ПараметрыЗапуска.Добавить("/CheckConfig");

	ПараметрыПроверки = Новый Структура();
	Для Каждого КлючЗначение Из Параметры Цикл
		Если КлючЗначение.Значение = Истина Тогда
			КлючПроверки = КлючЗначение.Ключ;
			Если СтрНачинаетсяС(КлючПроверки, "-") Тогда
				КлючПроверки = Сред(КлючПроверки, 2);
			КонецЕсли;
			ПараметрыПроверки.Вставить(КлючПроверки, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;

	Если ПараметрыПроверки.Количество() = 0 Тогда
		ПараметрыПроверки.Вставить("ThinClient", Истина);
		ПараметрыПроверки.Вставить("WebClient", Истина);
		ПараметрыПроверки.Вставить("Server", Истина);
		ПараметрыПроверки.Вставить("ExternalConnection", Истина);
		ПараметрыПроверки.Вставить("ExternalConnectionServer", Истина);
	КонецЕсли;	

	Успешно = Истина;
	Попытка
		Конфигуратор.ВыполнитьРасширеннуюПроверкуКонфигуратора(ПараметрыПроверки);
	Исключение
		Успешно = Ложь;
	КонецПопытки;
	
	ЛогПроверкиИзКонфигуратора = Конфигуратор.ВыводКоманды();

	Если Не Успешно Тогда
		Лог.Ошибка("Проверка завершена с ошибками
			|" + ЛогПроверкиИзКонфигуратора);
		Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
	КонецЕсли;

	Лог.Информация("Проверка завершена");

	Возврат ВозможныйРезультат.Успех;

КонецФункции