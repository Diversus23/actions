#Использовать json

#Область ПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("path p", "",
		"Путь куда будет сохранен файл (обязательный)")
		.ТСтрока();

	Команда.Опция("v8version v", "",
		"Версия платформы 1С (не обязательный)")
		.ТСтрока();

	Команда.Опция("branch b", "",
		"Ветка коммита на котором выполнялись тесты (не обязательный)")
		.ТСтрока();

	Команда.Опция("sha s", "",
		"SHA коммита на котором выполнялись тесты (не обязательный)")
		.ТСтрока();

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	Лог = ПараметрыСистемы.Лог();
	Лог.Информация("Создаем файл с категориями Allure categories.json");

	Параметры = ПолучитьСтруктуруПараметров(Команда);	
	
	Если НЕ ФайловыеОперации.КаталогСуществует(Параметры.ПутьКРезультатам) Тогда
		ФайловыеОперации.ОбеспечитьКаталог(Параметры.ПутьКРезультатам);
	КонецЕсли;

	ПутьКФайлу = ОбъединитьПути(Параметры.ПутьКРезультатам, "categories.json");
	Если НЕ ЗначениеЗаполнено(Параметры.ИмяКатегории) Тогда
		МассивСтрок = СтроковыеФункции.РазложитьСтрокуВМассивСлов(Параметры.ПутьКРезультатам, "/\");
		Если МассивСтрок.Количество() = 0 Тогда
			ВызватьИсключение "Не удалось получить каталоги из пути";
		КонецЕсли;
		Параметры.ИмяКатегории = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;

	СоздатьФайл(ПутьКФайлу, Параметры.ИмяКатегории);
	Лог.Информация("Окончание создания файла categories.json");

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруПараметров(Знач Команда)
	
	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);	
	ВыводОтладочнойИнформации = ЧтениеОпций.ЗначениеОпции("verbose");	
	ПараметрыСистемы.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	ПараметрыКоманды = Новый Структура;	
	ПараметрыКоманды.Вставить("ПутьКРезультатам", ЧтениеОпций.ЗначениеОпции("path", Истина));
	ПараметрыКоманды.Вставить("Версия1С", ЧтениеОпций.ЗначениеОпции("v8version", Ложь));
	ПараметрыКоманды.Вставить("Ветка", ЧтениеОпций.ЗначениеОпции("branch", Ложь));

	Возврат ПараметрыКоманды;
	
КонецФункции

Процедура СоздатьФайл(Знач ПутьКФайлу, Знач ИмяКатегории)
	ПарсерJson = Новый ПарсерJSON();

	ДанныеДляСохранения = "[{""name"":""%1""}]";
	ДанныеДляСохранения = СтрЗаменить(ДанныеДляСохранения, "%1", ИмяКатегории);
	ДанныеДляСохранения = ПарсерJSON.ПрочитатьJSON(ДанныеДляСохранения);
	Запись = Новый ЗаписьJSON();
	Запись.ОткрытьФайл(ПутьКФайлу, , , Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, Символы.Таб));	
	Попытка
		ЗаписатьJSON(Запись, ДанныеДляСохранения);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;	
	Запись.Закрыть();
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции