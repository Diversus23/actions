// Лог
Перем Лог;

#Область ПрограммныйИнтерфейс

// Выполняет запуск процесса
//
// Параметры:
//	СтрокаЗапуска - Строка - строка запуска
//	БезОжидания - Булево - запуск выполняется без лжидания завершения. По умолчанию Ложь
//
// Возвращаемое значение:
//	Структура
//		* КодВозврата - Число - код возврата запуска. Если не 0, то ошибка
//		* Результат - Строка - текст вывода
//		* Идентификатор - Число - идентификатор приложения
//
Функция ЗапуститьИПодождать(Знач СтрокаЗапуска, Знач БезОжидания = Ложь) Экспорт

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();

	Процесс = СоздатьПроцесс(СтрокаЗапуска, "./", Истина, Истина);
	Попытка
		Процесс.Запустить();
	Исключение
		Если ПараметрыСистемы.ЭтоWindows Тогда
			ШаблонЗапуска = "cmd /c %1";
		Иначе
			ШаблонЗапуска = "sh -c '%1'";
		КонецЕсли;
		СтрокаЗапуска = СтрШаблон(ШаблонЗапуска, СтрокаЗапуска);
		Процесс = СоздатьПроцесс(СтрокаЗапуска, "./", Истина, Истина);
		Процесс.Запустить();
	КонецПопытки;

	Идентификатор = Процесс.Идентификатор;
	ЗаписатьИнформациюОЗапуске(СтрокаЗапуска, Идентификатор);
	Если БезОжидания Тогда
		Возврат Новый Структура("КодВозврата, Результат, Идентификатор", 0, "", Идентификатор);
	КонецЕсли;

	ПериодОпросаВМиллисекундах = 1000;	
	Приостановить(ПериодОпросаВМиллисекундах);

	Пока НЕ Процесс.Завершен Цикл
		
		Если ПериодОпросаВМиллисекундах <> 0 Тогда
			Приостановить(ПериодОпросаВМиллисекундах);
		КонецЕсли;

		ЗаписатьИнформациюЛога(Процесс.ПотокВывода.Прочитать(), ЗаписьXML, Ложь);
		ЗаписатьИнформациюЛога(Процесс.ПотокОшибок.Прочитать(), ЗаписьXML, Истина);

	КонецЦикла;

	Процесс.ОжидатьЗавершения(); // финальный сброс буферов
	ЗаписатьИнформациюЛога(Процесс.ПотокВывода.Прочитать(), ЗаписьXML, Ложь);
	ЗаписатьИнформациюЛога(Процесс.ПотокОшибок.Прочитать(), ЗаписьXML, Истина);
	РезультатРаботыПроцесса = ЗаписьXML.Закрыть();

	Возврат Новый Структура("КодВозврата, Результат, Идентификатор", 
		Процесс.КодВозврата, РезультатРаботыПроцесса, Идентификатор);

КонецФункции // ЗапуститьИПодождать(СтрокаЗапуска)

// Завершает работу приложения по PID
//
// Параметры:
//	Идентификатор - Число - PID процесса
//
Процедура ЗавершитьПроцессПоИдентификатору(Знач Идентификатор) Экспорт

	Процесс = НайтиПроцессПоИдентификатору(Идентификатор);
	Если ЗначениеЗаполнено(Процесс) Тогда
		Процесс.Завершить();
		Лог.Информация("Процесс с PID %1 завершен", Идентификатор);
	Иначе
		Лог.Предупреждение("При попытке завершить с PID %1 он не найден", Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Завершает работу процессов по имени
//
// Параметры:
//	ИмяПроцесса - Строка - имя процесса
//
Процедура ЗавершитьПроцессПоИмени(Знач ИмяПроцесса) Экспорт

	МассивПроцессов = НайтиПроцессыПоИмени(ИмяПроцесса);
	Для Каждого Процесс Из МассивПроцессов Цикл
		ЗавершитьПроцессПоИдентификатору(Процесс.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта()

	Лог = ПараметрыСистемы.Лог();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьИнформациюОЗапуске(Знач СтрокаЗапуска, Идентификатор)

	Если ЗначениеЗаполнено(ПараметрыСистемы.КаталогКонтроля) Тогда
		ИмяФайла = ОбъединитьПути(ПараметрыСистемы.КаталогКонтроля, Строка(Новый УникальныйИдентификатор), ".json");
		Структура = Новый Структура("Идентификатор", Идентификатор);
		Структура = Новый Структура("СтрокаЗапуска", СтрокаЗапуска);
		РаботаJSON.ЗаписатьФайлJSON(ИмяФайла, Структура);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьИнформациюЛога(Знач СтрокаЗаписи, ЗаписьXML, ЭтоОшибка)
	
	Если Не ПустаяСтрока(СтрокаЗаписи) Тогда
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, Символы.ВК, "");
		Если СтрокаЗаписи <> "" Тогда
			Если ЭтоОшибка = Истина Тогда
				Лог.Ошибка("%1", СтрокаЗаписи);
			Иначе
				Лог.Информация("%1", СтрокаЗаписи);
			КонецЕсли;
			ЗаписьXML.ЗаписатьБезОбработки(СтрокаЗаписи);
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти