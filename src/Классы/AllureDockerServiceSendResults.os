#Использовать 1connector

#Область ПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт

	Команда.Опция("url u", "",
		"URL сервера Allure Docker Service (обязательный)")
		.ТСтрока();
	
	Команда.Опция("path p", "",
		"Каталог с результатами Allure Docker Service (обязательный)")
		.ТСтрока();

	Команда.Опция("project", "",
		"Имя проекта на сервере Allure Docker Service (обязательный)")
		.ТСтрока();

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт
		
	Лог = ПараметрыСистемы.Лог();
	Лог.Информация("Начало отправки данных на сервер Allure Docker Service");

	Параметры = ПолучитьСтруктуруПараметров(Команда);

	// Подготовка результата
	Массив = Новый Массив;
	Файлы = НайтиФайлы(Параметры.Каталог, "*.*", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		Структура = Новый Структура("file_name, content_base64", Файл.Имя, Base64Строка(ДвоичныеДанные));
		Массив.Добавить(Структура);
	КонецЦикла;
	Результат = Новый Структура("results", Массив);

	// Отправка json на в Allure Docker Service
	Заголовки = Новый Соответствие;	
	Заголовки.Вставить("Content-Type", "application/json");	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	ПараметрыЗаписиJSON = Новый Структура("ПереносСтрок", ПереносСтрокJSON.Нет);
	ДополнительныеПараметры.Вставить("ПараметрыЗаписиJSON", ПараметрыЗаписиJSON);
	ДополнительныеПараметры.Вставить("Таймаут", РаботаAllure.ТаймаутAllureDickerService());

	// Готовим запрос
	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("force_project_creation", "true"); // Создавать проект, если он отсутствует
	СтруктураЗапроса.Вставить("project_id", Параметры.Проект); // Сам проект
	Адрес = РаботаAllure.ПостоянныйАдресAllureDickerService(Параметры.АдресСервера) 
		+ "/send-results?"
		+ ОбщегоНазначения.СтруктуруВПараметрыHTTPЗапроса(СтруктураЗапроса);	

	// Отправляем запрос	
	Попытка
		Ответ = КоннекторHTTP.Post(Адрес, Неопределено, Результат, ДополнительныеПараметры).Json();
	Исключение
		Текст = ОписаниеОшибки();
		ОбщегоНазначения.ЗавершениеРаботыОшибка(
			"Ошибка отправки данных на сервер Allure Docker Service:
			|%1", Текст);
	КонецПопытки;

	// Анализ ответа
	ТекстОтвета = Ответ["meta_data"]["message"];
	Если СтрНайти(ТекстОтвета, "successfully") = 0 Тогда
	  	ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка отправки данных на сервер Allure: %1",
		  ТекстОтвета);
	КонецЕсли;

	Лог.Информация("Отправка данных на сервер Allure Docker Service завершена");

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруПараметров(Знач Команда)
	
	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);	
	ВыводОтладочнойИнформации = ЧтениеОпций.ЗначениеОпции("verbose");	
	ПараметрыСистемы.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Каталог", ЧтениеОпций.ЗначениеОпции("path", Истина));
	ПараметрыКоманды.Вставить("АдресСервера", ЧтениеОпций.ЗначениеОпции("url", Истина));
	ПараметрыКоманды.Вставить("Проект", ЧтениеОпций.ЗначениеОпции("project", Истина));

	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции