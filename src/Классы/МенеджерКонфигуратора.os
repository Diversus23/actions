#Использовать v8runner
#Использовать asserts
#Использовать v8storage

// BSLLS:NumberOfOptionalParams-off

// Лог модуля
Перем Лог;
// Каталог под временную ИБ, если она нужна
Перем КаталогВременнойИБ;
// Конфигуратор 1С
Перем Конфигуратор;

#Область ПрограммныйИнтерфейс

// Доступ напрямую к управлению конфигрутору.
//
// Возвращаемое значение:
//	УправлениеКонфигуратором - конфигуратор.
//
Функция Конфигуратор() Экспорт

	Возврат Конфигуратор;
	
КонецФункции

// Инициализирует МенеджерКонфигуратора. Надо вызывать всегда после создания объекта
//
// Параметры:
//  Параметры    - Структура     - настройки запуска конфигуратора
//
Процедура Инициализация(Знач Параметры) Экспорт
	
	ТекущаяПроцедура = "Инициализация";
	Ожидаем.Что(Параметры.СтрокаПодключения, ТекущаяПроцедура + ": не задана строка подключения").Заполнено();
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Конфигуратор.УстановитьКонтекст(Параметры.СтрокаПодключения, Параметры.Пользователь, Параметры.Пароль);

	Если Параметры.Свойство("ВерсияПлатформы") И ЗначениеЗаполнено(Параметры.ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(Параметры.ВерсияПлатформы);
	КонецЕсли;
	
	Если Параметры.Свойство("КлючРазрешенияЗапуска") И ЗначениеЗаполнено(Параметры.КлючРазрешенияЗапуска) Тогда
		Конфигуратор.УстановитьКлючРазрешенияЗапуска(Параметры.КлючРазрешенияЗапуска);
	КонецЕсли;
	
	Если Параметры.Свойство("КодЯзыка") И ЗначениеЗаполнено(Параметры.КодЯзыка) Тогда
		Конфигуратор.УстановитьКодЯзыка(Параметры.КодЯзыка);
	КонецЕсли;
	
	Если Параметры.Свойство("КодЯзыкаСеанса") И ЗначениеЗаполнено(Параметры.КодЯзыкаСеанса) Тогда
		Конфигуратор.УстановитьКодЯзыкаСеанса(Параметры.КодЯзыкаСеанса);
	КонецЕсли;
	
КонецПроцедуры

// Уничтожает МенеджерКонфигуратора. Надо вызывать всегда после того, как объекта перестал быть нужен.
//
Процедура Деструктор() Экспорт
	Попытка
		Если КаталогВременнойИБ <> Неопределено Тогда
			ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
		КонецЕсли;
	Исключение
		Лог.Отладка(ОписаниеОшибки());
	КонецПопытки;
	
	КаталогВременнойИБ = Неопределено;
КонецПроцедуры

// Создает файловую базу 1С.
//
// Параметры:
//  Параметры    - Структура     - настройки запуска конфигуратора
//
Процедура СоздатьФайловуюИБ(Знач Параметры) Экспорт
	
	Лог.Информация("Создание файловой ИБ");
	Лог.Информация("Каталог %1", Параметры.КаталогБазы);
	
	Попытка
		Конфигуратор.СоздатьФайловуюБазу(Параметры.КаталогБазы,
			Параметры.ПутьКШаблону,
			Параметры.ИмяБазыВСписке);
		Лог.Информация("Создание файловой ИБ завершено");
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при создании файловой ИБ %1",
			ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Создает серверную базу 1С.
//
// Параметры:
//  Параметры    - Структура     - настройки запуска конфигуратора
//
// BSLLS:CyclomaticComplexity-off
// BSLLS:CognitiveComplexity-off
Процедура СоздатьСервернуюИБ(Знач Параметры) Экспорт

	Лог.Информация("Создание серверной ИБ");

	// Заполнение параметров базы 1С
	ПараметрыБазы1С = Новый Структура();
	ПараметрыБазы1С.Вставить("Сервер1С", Параметры.Сервер1С);
	Лог.Информация("Сервер 1С: %1", Параметры.Сервер1С);
	ПараметрыБазы1С.Вставить("ИмяИБ", Параметры.ИмяИБ);
	Лог.Информация("Имя базы 1С: %1", Параметры.ИмяИБ);
	Если ЗначениеЗаполнено(Параметры.РазрешитьРегЗадания) Тогда
		ПараметрыБазы1С.Вставить("РазрешитьРегЗадания", Параметры.РазрешитьРегЗадания);
	Иначе
		ПараметрыБазы1С.Вставить("РазрешитьРегЗадания", Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.РазрешитьРегЗадания) Тогда
		ПараметрыБазы1С.Вставить("РазрешитьВыдачуЛицензий", Параметры.РазрешитьВыдачуЛицензий);
	Иначе
		ПараметрыБазы1С.Вставить("РазрешитьВыдачуЛицензий", Ложь);
	КонецЕсли;
	
	// Параметры СУБД
	ПараметрыСУБД = Новый Структура();

	Если ЗначениеЗаполнено(Параметры.ТипСУБД) Тогда
		ПараметрыСУБД.Вставить("ТипСУБД", Параметры.ТипСУБД);
	Иначе
		ПараметрыСУБД.Вставить("ТипСУБД", Перечисления.ТипыСУБД.MSSQLServer);
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.СерверСУБД) Тогда
		ПараметрыСУБД.Вставить("СерверСУБД", Параметры.СерверСУБД);	
	Иначе
		ПараметрыСУБД.Вставить("СерверСУБД", Параметры.Сервер1С);	
	КонецЕсли;
	Лог.Информация("Сервер БД %1:%2", ПараметрыСУБД.ТипСУБД, ПараметрыСУБД.СерверСУБД);
	
	Если ЗначениеЗаполнено(Параметры.ПользовательСУБД) Тогда
		ПараметрыСУБД.Вставить("ПользовательСУБД", Параметры.ПользовательСУБД);
		Лог.Информация("ПользовательСУБД: %1", ПараметрыСУБД.ПользовательСУБД);
	Иначе
		ПараметрыСУБД.Вставить("ПользовательСУБД", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПарольСУБД) Тогда
		ПараметрыСУБД.Вставить("ПарольСУБД", Параметры.ПарольСУБД);
		Лог.Информация("ПарольСУБД: ***");
	Иначе
		ПараметрыСУБД.Вставить("ПарольСУБД", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИмяБД) Тогда
		ПараметрыСУБД.Вставить("ИмяБД", Параметры.ИмяБД);
	Иначе
		ПараметрыСУБД.Вставить("ИмяБД", ПараметрыБазы1С.ИмяИБ);
	КонецЕсли;
	Лог.Информация("Имя базы БД: %1", ПараметрыСУБД.ИмяБД);

	Если ЗначениеЗаполнено(Параметры.СмещениеДат) Тогда
		ПараметрыСУБД.Вставить("СмещениеДат", Параметры.СмещениеДат);
	Иначе
		ПараметрыСУБД.Вставить("СмещениеДат", 2000);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.СоздаватьБД) Тогда
		ПараметрыСУБД.Вставить("СоздаватьБД", Параметры.СоздаватьБД);
	Иначе
		ПараметрыСУБД.Вставить("СоздаватьБД", Истина);
	КонецЕсли;
	
	АвторизацияВКластере = Новый Структура();
	Если ЗначениеЗаполнено(Параметры.АдминистраторКластера) Тогда
		АвторизацияВКластере.Вставить("Имя", Параметры.АдминистраторКластера);
		Лог.Информация("Администратор кластера: %1", АвторизацияВКластере.Имя);
	Иначе
		АвторизацияВКластере.Вставить("Имя", "");
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ПарольКластера) Тогда
		АвторизацияВКластере.Вставить("Пароль", Параметры.ПарольКластера);
		Лог.Информация("Пароль администратора кластера: ***");
	Иначе
		АвторизацияВКластере.Вставить("Пароль", "");
	КонецЕсли;
	ОшибкаЕслиСуществует = Истина;
	
	ПутьКШаблону = "";
	Если ЗначениеЗаполнено(Параметры.ПутьКШаблону) Тогда
		ПутьКШаблону = Параметры.ПутьКШаблону;
		Лог.Информация("Шаблон создаваемой ИБ: %1", ПутьКШаблону);
	КонецЕсли;
	
	ИмяБазыВСписке = "";
	Если ЗначениеЗаполнено(Параметры.ИмяБазыВСписке) Тогда
		ИмяБазыВСписке = Параметры.ИмяБазыВСписке;
		Лог.Информация("Имя в списке баз пользователя: %1", ИмяБазыВСписке);
	КонецЕсли;

	Попытка

		Конфигуратор.СоздатьСервернуюБазу(ПараметрыБазы1С,
			ПараметрыСУБД,
			АвторизацияВКластере,
			ОшибкаЕслиСуществует,
			ПутьКШаблону,
			ИмяБазыВСписке);

		Лог.Информация("Создание ИБ завершено");

	Исключение

		ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при создании ИБ на сервере %1",
			Конфигуратор.ВыводКоманды());
			
	КонецПопытки;	
	
КонецПроцедуры
// BSLLS:CognitiveComplexity-on
// BSLLS:CyclomaticComplexity-on

// Выгрузить информационную базу 1С в DT-файл.
//
// Параметры:
//  Параметры    - Структура     - настройки для запуска
//
Процедура ВыгрузитьИБ(Знач Параметры) Экспорт
	
	Лог.Информация("Начало выгрузки информационной базы 1С");
	Попытка
		Лог.Информация("Выгрузка в файл <%1>", Параметры.ПутьКФайлу);
		Конфигуратор.ВыгрузитьИнформационнуюБазу(Параметры.ПутьКФайлу);
		Лог.Информация("Выгрузка завершена");
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Вывод = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Вывод) Тогда
			ТекстОшибки = СтрШаблон("%1. %2", ТекстОшибки, Вывод);
		КонецЕсли;
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при выгрузке ИБ: %1", ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Загрузить информационную базу 1С из DT-файл.
//
// Параметры:
//  Параметры    - Структура     - настройки для запуска
//
Процедура ЗагрузитьИБ(Знач Параметры) Экспорт
	
	Лог.Информация("Начало загрузки информационной базы 1С");	
	Попытка
		Лог.Информация("Загрузка из файла <%1>", Параметры.ПутьКФайлу);
		Конфигуратор.ЗагрузитьИнформационнуюБазу(Параметры.ПутьКФайлу);
		Если Параметры.УдалитьПослеЗагрузки = Истина Тогда
			УдалитьФайлы(Параметры.ПутьКФайлу);
			Лог.Информация("Исходный dt-файл %1 удален", Параметры.ПутьКФайлу);
		КонецЕсли;
		Лог.Информация("Загрузка завершена");
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Вывод = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Вывод) Тогда
			ТекстОшибки = СтрШаблон("%1. %2", ТекстОшибки, Вывод);
		КонецЕсли;
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при загрузке ИБ: %1", ТекстОшибки);
	КонецПопытки;

КонецПроцедуры

// BSLLS:NumberOfOptionalParams-on

// Возвращает имя базы для серверной ИБ, последняя папка для файловой ИБ.
//
// Возвращаемое значение:
//	Строка - имя базы.
//
Функция ИмяИБ() Экспорт
	
	СимволовОтНачала = 3;
	Контекст = Конфигуратор.ПолучитьКонтекст();
	КлючСоединенияСБазой = СокрЛП(Контекст.КлючСоединенияСБазой);
	ТекИмяБазы = "";
	Если СтрНачинаетсяС(ВРег(КлючСоединенияСБазой), "/F") Тогда
		ТекИмяБазы = Сред(КлючСоединенияСБазой, СимволовОтНачала);
		ТекИмяБазы = ФайловыеОперации.УдалитьПоследнийРазделительПути(ТекИмяБазы);
		НомерСлеша = 0;		
		Для Сч = 1 По СтрДлина(ТекИмяБазы) Цикл
			Если Сред(ТекИмяБазы, Сч, 1) = "\" Тогда
				НомерСлеша = Сч;
			КонецЕсли;
		КонецЦикла;
		ТекИмяБазы = Сред(ТекИмяБазы, НомерСлеша + 1);
	ИначеЕсли СтрНачинаетсяС(ВРег(КлючСоединенияСБазой), "/S") Тогда
		ТекИмяБазы = Сред(КлючСоединенияСБазой, СимволовОтНачала);
	Иначе
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Не известен контекст выполнения %1", КлючСоединенияСБазой);
	КонецЕсли;
		
	Возврат СокрЛП(ТекИмяБазы);

КонецФункции

// Возвращает имя файла, построенном по принципу: Префикс (имя базы) + ДатаВремя + Расширение
//
// Параметры:
//	Префикс - Строка - префикс имени. Если не задано, то будет определено по имени базы.
//	ФорматДаты - Строка - формат даты.
//	Расширение - Строка - расширение для файла.
//	
// Возвращаемое значение:
//	Строка - имя файла.
//
// Пример: Base_2017_04_28_19_02_12.dt
Функция ИмяФайлаПоИмениИБНаДату(Знач Префикс = "", Знач ФорматДаты = "yyyy_MM_dd_ЧЧ_мм_сс",
	Знач Расширение = "dt") Экспорт

	Результат = "";

	Если НЕ ПустаяСтрока(Префикс) Тогда
		Результат = Префикс + "_";
	Иначе
		ИмяБазы = ИмяИБ();
		Если НЕ ПустаяСтрока(ИмяБазы) Тогда
			Результат = ИмяБазы + "_";
		КонецЕсли;
	КонецЕсли;

	Результат = Результат + Формат(ТекущаяДата(), "ДФ=" + ФорматДаты) + "." + Расширение;

	Возврат Результат;

КонецФункции

// Осуществляет проверку конфигурации
//
// Параметры:
//	ПараметрыПроверки - Структура - ключи проверки конфигуации.
//
Процедура ВыполнитьПроверкуКонфигурации(Знач ПараметрыПроверки) Экспорт

	Лог.Информация("Выполнение проверки конфигурации");

	Если ПараметрыПроверки.Количество() = 0 Тогда
		ПараметрыПроверки = Работа1С.ПараметрыПроверкиКонфигурацииПоУмолчанию();
		Лог.Информация("Параметры проверки не переданы, используем ключи по умолчанию");
	КонецЕсли;

	КлючиПроверки = Работа1С.КлючиПроверкиКонфигурации();
	Лог.Информация("> Проверка с ключами:");
	Для Каждого КлючЗначение Из ПараметрыПроверки Цикл
		Лог.Информация(">>> %1 - %2", КлючЗначение.Ключ, КлючиПроверки[КлючЗначение.Ключ]);
	КонецЦикла;
	
	Попытка
		Конфигуратор.ВыполнитьРасширеннуюПроверкуКонфигуратора(ПараметрыПроверки);
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Вывод = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Вывод) Тогда
			ТекстОшибки = СтрШаблон("%1. %2", ТекстОшибки, Вывод);
		КонецЕсли;
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Проверка завершена с ошибками: %1", ТекстОшибки);		
	КонецПопытки;
	
	Лог.Информация("Проверка завершена");

КонецПроцедуры

// Выгружает файл конфигурации из ИБ
//
// Параметры:
//  ИмяФайла - Строка - Путь к результату - выгружаемому файлу конфигурации (*.cf)
//
Процедура ВыгрузитьКонфигурациюВФайл(Знач ИмяФайла) Экспорт

	Лог.Информация("Выгрузка конфигурации в cf-файл");

	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Не указан имя cf-файла конфигурации");
	КонецЕсли;
	Файл = Новый Файл(ИмяФайла);
	ФС.ОбеспечитьКаталог(Файл.Путь);

	Попытка
		Конфигуратор.ВыгрузитьКонфигурациюВФайл(ИмяФайла);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Вывод = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Вывод) Тогда
			ТекстОшибки = СтрШаблон("%1. %2", ТекстОшибки, Вывод);
		КонецЕсли;
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Выгрузка конфигурации завершилась с ошибками: %1", ТекстОшибки);		
	КонецПопытки;

	Лог.Информация("Выгрузка в cf-файл завершена");

КонецПроцедуры

// Загружает файл конфигурации в текущую базу данных.
//	Параметры:
//		ПутьКФайлу - Строка - Путь к файлу *.cf
//		СниматьСПоддержки - Булево - снимает с поддержки, отключает от хранилища, по умолчанию Истина
//
Процедура ЗагрузитьКонфигурациюИзФайла(Знач ПутьКФайлу, Знач СниматьСПоддержки = Истина) Экспорт
	Перем ФайлЗагрузки, ПараметрыЗапуска;

	Лог.Информация("Загружаем файл конфигурации %1", ПутьКФайлу);
	ФайлЗагрузки = Новый Файл(ПутьКФайлу);
	Ожидаем.Что(ФайлЗагрузки.Существует(), "Путь к файлу загрузки не существует " + ФайлЗагрузки.ПолноеИмя).ЕстьИстина();

	Если ТипЗнч(СниматьСПоддержки) = Тип("Булево") И СниматьСПоддержки Тогда
		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryUnbindCfg -force");
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/ManageCfgSupport -disableSupport -force");
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	КонецЕсли;

	Попытка
		Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлЗагрузки.ПолноеИмя);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Вывод = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Вывод) Тогда
			ТекстОшибки = СтрШаблон("%1. %2", ТекстОшибки, Вывод);
		КонецЕсли;
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Загрузка конфигурации завершилась с ошибками: %1", ТекстОшибки);		
	КонецПопытки;	

	Лог.Информация("Загрузка конфигурации из cf-файла успешно завершена");

КонецПроцедуры

// Выгружает файл расширения из ИБ
//
// Параметры:
//  ПутьКФайлу - Строка - Путь к результату - выгружаемому файлу конфигурации (*.cfe)
//  ИмяРасширения - Строка - Имя расширения
//
Процедура ВыгрузитьРасширениеВФайл(Знач ПутьКФайлу, Знач ИмяРасширения) Экспорт

	Лог.Информация("Запускаю выгрузку расширения %1 в файл <%2>", ИмяРасширения, ПутьКФайлу);

	Попытка
		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/DumpCfg");
		ПараметрыЗапуска.Добавить("""" + ФайловыеОперации.АбсолютныйПуть(ПутьКФайлу) + """");
		ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка выгрузки расширения в файл %1 (%2)", 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Конфигуратор.ВыводКоманды());
	КонецПопытки;

	Лог.Информация("Выгрузка расширения в файл завершена");

КонецПроцедуры

// Загружает файл расширения в текущую базу данных.
//	Параметры:
//		ПутьКФайлу - Строка - Путь к файлу *.cfe
//		ИмяРасширения - Строка - имя расширения
//		ОбновитьКонфигурациюИБ - Строка - обновить конфигуарцию ИБ после загрузки расширения
//
Процедура ЗагрузитьФайлРасширения(Знач ПутьКФайлу, Знач ИмяРасширения, Знач ОбновитьКонфигурациюИБ = Ложь) Экспорт

	Лог.Информация("Загружаю файл расширения <%1>", ПутьКФайлу);

	Файл = Новый Файл(ПутьКФайлу);
	Ожидаем.Что(Файл.Существует(), "Путь к файлу загрузки не существует " + Файл.ПолноеИмя).ЕстьИстина();
	Конфигуратор.ЗагрузитьРасширениеИзФайла(Файл.ПолноеИмя, ИмяРасширения, ОбновитьКонфигурациюИБ);

	Лог.Информация("Загрузка расширения %1 из cfe-файла успешно завершена", ИмяРасширения);

КонецПроцедуры

// Выводит информацию о всех установленных расширениях в конфигурации
//
Процедура ПоказатьСписокВсехРасширенийКонфигурации() Экспорт
	СписокВсехРасширений = ПолучитьСписокВсехРасширений();
	Лог.Информация("Список расширений конфигурации:
				   |%1", СписокВсехРасширений);
КонецПроцедуры

// Получает информацию о всех установленных расширениях в конфигурации
//
// Возвращаемое значение:
//	Строка - список всех расширений в конфигурации.
Функция ПолучитьСписокВсехРасширений() Экспорт

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();

	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/DumpDBCfgList");
	ПараметрыЗапуска.Добавить("-AllExtensions");
	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

	Возврат Конфигуратор.ВыводКоманды();

КонецФункции

// Собирает из исходников расширение с указанным именем
//
// Параметры:
//	Каталог - Строка - путь каталогу с иходниками расширения
// 	ИмяРасширения - Строка - Имя расширения
//	ОбновитьКонфигурациюИБ - Булево - Признак обновления расширения в базе, 
//									  имеет смысл только на пустой базе или при первой загрузке.
//
Процедура СобратьИзИсходниковРасширение(Знач Каталог, Знач ИмяРасширения, Знач ОбновитьКонфигурациюИБ = Ложь) Экспорт

	Лог.Информация("Выполняю сборку/загрузку расширения %1 из каталога <%2>", ИмяРасширения, Каталог);

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + Каталог + """");
	ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");

	Если ОбновитьКонфигурациюИБ Тогда
		ПараметрыЗапуска.Добавить("/UpdateDBCfg");
	КонецЕсли;

	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);	

	Попытка
		ПоказатьСписокВсехРасширенийКонфигурации();
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка выгрузки расширения в файл %1",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Лог.Информация("Сборка/загрузка расширения %1 завершена", ИмяРасширения);

КонецПроцедуры

// Собирает из исходников расширение с указанным именем
//
// Параметры:
// 	ИмяРасширения - Строка - Имя расширения
//	Каталог - Строка - путь каталогу с иходниками расширения
//
Процедура РазобратьРасширениеНаИсходники(Знач ИмяРасширения, Знач Каталог) Экспорт

	Лог.Информация("Выполняю разборку расширения %1 на исходники в каталог <%2>", ИмяРасширения, Каталог);

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/DumpConfigToFiles """ + Каталог + """");
	ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");

	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка выгрузки расширения в исходный код %1",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Лог.Информация("Разборка расширения завершена");

КонецПроцедуры

// Обновляет расширение в ИБ 1С
//
// Параметры:
//   ИмяРасширения - Строка - имя расширения
//
Процедура ОбновитьРасширение(Знач ИмяРасширения) Экспорт

	Лог.Информация("Запускаю обновление расширения %1", ИмяРасширения);

	Попытка
		Конфигуратор.ОбновитьКонфигурациюБазыДанных(Ложь, Ложь, Ложь, ИмяРасширения);
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка обновления расширения ""%1"": %2",
			ИмяРасширения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Лог.Информация("Обновление расширения завершено.");

КонецПроцедуры

#КонецОбласти

Лог = ПараметрыСистемы.Лог();