#Использовать v8runner
#Использовать asserts
#Использовать v8storage
#Использовать 1commands

// BSLLS:NumberOfOptionalParams-off

// Лог модуля
Перем Лог;
// Каталог под временную ИБ, если она нужна
Перем КаталогВременнойИБ;
// Конфигуратор 1С
Перем Конфигуратор;

#Область ПрограммныйИнтерфейс

// Доступ напрямую к управлению конфигрутору.
//
// Возвращаемое значение:
//	УправлениеКонфигуратором - конфигуратор.
//
Функция Конфигуратор() Экспорт

	Возврат Конфигуратор;
	
КонецФункции

// Инициализирует МенеджерКонфигуратора. Надо вызывать всегда после создания объекта
//
// Параметры:
//  Параметры    - Структура     - настройки запуска конфигуратора
//
Процедура Инициализация(Знач Параметры) Экспорт
	
	ТекущаяПроцедура = "Инициализация";
	Ожидаем.Что(Параметры.СтрокаПодключения, ТекущаяПроцедура + ": не задана строка подключения").Заполнено();
	
	Если НЕ Работа1С.ПроверитьУстановку1С() Тогда		
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Не установлена платформа 1С");		
	КонецЕсли;

	Конфигуратор = Новый УправлениеКонфигуратором();
	
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	Конфигуратор.УстановитьКонтекст(Параметры.СтрокаПодключения, Параметры.Пользователь, Параметры.Пароль);

	Если Параметры.Свойство("ВерсияПлатформы") И ЗначениеЗаполнено(Параметры.ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(Параметры.ВерсияПлатформы);
	КонецЕсли;
	
	Если Параметры.Свойство("КлючРазрешенияЗапуска") И ЗначениеЗаполнено(Параметры.КлючРазрешенияЗапуска) Тогда
		Конфигуратор.УстановитьКлючРазрешенияЗапуска(Параметры.КлючРазрешенияЗапуска);
	КонецЕсли;
	
	Если Параметры.Свойство("КодЯзыка") И ЗначениеЗаполнено(Параметры.КодЯзыка) Тогда
		Конфигуратор.УстановитьКодЯзыка(Параметры.КодЯзыка);
	КонецЕсли;
	
	Если Параметры.Свойство("КодЯзыкаСеанса") И ЗначениеЗаполнено(Параметры.КодЯзыкаСеанса) Тогда
		Конфигуратор.УстановитьКодЯзыкаСеанса(Параметры.КодЯзыкаСеанса);
	КонецЕсли;
	
КонецПроцедуры

// Уничтожает МенеджерКонфигуратора. Надо вызывать всегда после того, как объекта перестал быть нужен.
//
Процедура Деструктор() Экспорт
	Попытка
		Если КаталогВременнойИБ <> Неопределено Тогда
			ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
		КонецЕсли;
	Исключение
		Лог.Отладка(ОписаниеОшибки());
	КонецПопытки;
	
	КаталогВременнойИБ = Неопределено;
КонецПроцедуры

// Создает файловую базу 1С.
//
// Параметры:
//  Параметры    - Структура     - настройки запуска конфигуратора
//
Процедура СоздатьФайловуюИБ(Знач Параметры) Экспорт
	
	Лог.Информация("Создание файловой ИБ");
	Лог.Информация("Каталог %1", Параметры.КаталогБазы);
	
	Попытка
		Конфигуратор.СоздатьФайловуюБазу(Параметры.КаталогБазы,
			Параметры.ПутьКШаблону,
			Параметры.ИмяБазыВСписке);
		Лог.Информация("Создание файловой ИБ завершено");
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при создании файловой ИБ %1", ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Создает серверную базу 1С.
//
// Параметры:
//  Параметры    - Структура     - настройки запуска конфигуратора
//
// BSLLS:CyclomaticComplexity-off
// BSLLS:CognitiveComplexity-off
Процедура СоздатьСервернуюИБ(Знач Параметры) Экспорт

	Лог.Информация("Создание серверной ИБ");

	// Заполнение параметров базы 1С
	ПараметрыБазы1С = Новый Структура();
	ПараметрыБазы1С.Вставить("Сервер1С", Параметры.Сервер1С);
	Лог.Информация("Сервер 1С: %1", Параметры.Сервер1С);
	ПараметрыБазы1С.Вставить("ИмяИБ", Параметры.ИмяИБ);
	Лог.Информация("Имя базы 1С: %1", Параметры.ИмяИБ);
	Если ЗначениеЗаполнено(Параметры.РазрешитьРегЗадания) Тогда
		ПараметрыБазы1С.Вставить("РазрешитьРегЗадания", Параметры.РазрешитьРегЗадания);
	Иначе
		ПараметрыБазы1С.Вставить("РазрешитьРегЗадания", Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.РазрешитьРегЗадания) Тогда
		ПараметрыБазы1С.Вставить("РазрешитьВыдачуЛицензий", Параметры.РазрешитьВыдачуЛицензий);
	Иначе
		ПараметрыБазы1С.Вставить("РазрешитьВыдачуЛицензий", Ложь);
	КонецЕсли;
	
	// Параметры СУБД
	ПараметрыСУБД = Новый Структура();

	Если ЗначениеЗаполнено(Параметры.ТипСУБД) Тогда
		ПараметрыСУБД.Вставить("ТипСУБД", Параметры.ТипСУБД);
	Иначе
		ПараметрыСУБД.Вставить("ТипСУБД", Перечисления.ТипыСУБД.MSSQLServer);
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.СерверСУБД) Тогда
		ПараметрыСУБД.Вставить("СерверСУБД", Параметры.СерверСУБД);	
	Иначе
		ПараметрыСУБД.Вставить("СерверСУБД", Параметры.Сервер1С);	
	КонецЕсли;
	Лог.Информация("Сервер БД %1:%2", ПараметрыСУБД.ТипСУБД, ПараметрыСУБД.СерверСУБД);
	
	Если ЗначениеЗаполнено(Параметры.ПользовательСУБД) Тогда
		ПараметрыСУБД.Вставить("ПользовательСУБД", Параметры.ПользовательСУБД);
		Лог.Информация("ПользовательСУБД: %1", ПараметрыСУБД.ПользовательСУБД);
	Иначе
		ПараметрыСУБД.Вставить("ПользовательСУБД", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПарольСУБД) Тогда
		ПараметрыСУБД.Вставить("ПарольСУБД", Параметры.ПарольСУБД);
		Лог.Информация("ПарольСУБД: ***");
	Иначе
		ПараметрыСУБД.Вставить("ПарольСУБД", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИмяБД) Тогда
		ПараметрыСУБД.Вставить("ИмяБД", Параметры.ИмяБД);
	Иначе
		ПараметрыСУБД.Вставить("ИмяБД", ПараметрыБазы1С.ИмяИБ);
	КонецЕсли;
	Лог.Информация("Имя базы БД: %1", ПараметрыСУБД.ИмяБД);

	Если ЗначениеЗаполнено(Параметры.СмещениеДат) Тогда
		ПараметрыСУБД.Вставить("СмещениеДат", Параметры.СмещениеДат);
	Иначе
		ПараметрыСУБД.Вставить("СмещениеДат", 2000);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.СоздаватьБД) Тогда
		ПараметрыСУБД.Вставить("СоздаватьБД", Параметры.СоздаватьБД);
	Иначе
		ПараметрыСУБД.Вставить("СоздаватьБД", Истина);
	КонецЕсли;
	
	АвторизацияВКластере = Новый Структура();
	Если ЗначениеЗаполнено(Параметры.АдминистраторКластера) Тогда
		АвторизацияВКластере.Вставить("Имя", Параметры.АдминистраторКластера);
		Лог.Информация("Администратор кластера: %1", АвторизацияВКластере.Имя);
	Иначе
		АвторизацияВКластере.Вставить("Имя", "");
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ПарольКластера) Тогда
		АвторизацияВКластере.Вставить("Пароль", Параметры.ПарольКластера);
		Лог.Информация("Пароль администратора кластера: ***");
	Иначе
		АвторизацияВКластере.Вставить("Пароль", "");
	КонецЕсли;
	ОшибкаЕслиСуществует = Истина;
	
	ПутьКШаблону = "";
	Если ЗначениеЗаполнено(Параметры.ПутьКШаблону) Тогда
		ПутьКШаблону = Параметры.ПутьКШаблону;
		Лог.Информация("Шаблон создаваемой ИБ: %1", ПутьКШаблону);
	КонецЕсли;
	
	ИмяБазыВСписке = "";
	Если ЗначениеЗаполнено(Параметры.ИмяБазыВСписке) Тогда
		ИмяБазыВСписке = Параметры.ИмяБазыВСписке;
		Лог.Информация("Имя в списке баз пользователя: %1", ИмяБазыВСписке);
	КонецЕсли;

	Попытка

		Конфигуратор.СоздатьСервернуюБазу(ПараметрыБазы1С,
			ПараметрыСУБД,
			АвторизацияВКластере,
			ОшибкаЕслиСуществует,
			ПутьКШаблону,
			ИмяБазыВСписке);

		Лог.Информация("Создание ИБ завершено");

	Исключение

		Текст = Конфигуратор.ВыводКоманды();
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при создании ИБ на сервере %1", Текст);
			
	КонецПопытки;	
	
КонецПроцедуры
// BSLLS:CognitiveComplexity-on
// BSLLS:CyclomaticComplexity-on

// Выгрузить информационную базу 1С в DT-файл.
//
// Параметры:
//  Параметры    - Структура     - настройки для запуска
//
Процедура ВыгрузитьИБ(Знач Параметры) Экспорт
	
	Лог.Информация("Начало выгрузки информационной базы 1С");
	Попытка
		Лог.Информация("Выгрузка в файл <%1>", Параметры.ПутьКФайлу);
		Конфигуратор.ВыгрузитьИнформационнуюБазу(Параметры.ПутьКФайлу);
		Лог.Информация("Выгрузка завершена");
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Вывод = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Вывод) Тогда
			ТекстОшибки = СтрШаблон("%1. %2", ТекстОшибки, Вывод);
		КонецЕсли;
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при выгрузке ИБ: %1", ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Загрузить информационную базу 1С из DT-файл.
//
// Параметры:
//  Параметры    - Структура     - настройки для запуска
//
Процедура ЗагрузитьИБ(Знач Параметры) Экспорт
	
	Лог.Информация("Начало загрузки информационной базы 1С");	
	Попытка
		Лог.Информация("Загрузка из файла <%1>", Параметры.ПутьКФайлу);
		Конфигуратор.ЗагрузитьИнформационнуюБазу(Параметры.ПутьКФайлу);
		Если Параметры.УдалитьПослеЗагрузки = Истина Тогда
			УдалитьФайлы(Параметры.ПутьКФайлу);
			Лог.Информация("Исходный dt-файл %1 удален", Параметры.ПутьКФайлу);
		КонецЕсли;
		Лог.Информация("Загрузка завершена");
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Вывод = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Вывод) Тогда
			ТекстОшибки = СтрШаблон("%1. %2", ТекстОшибки, Вывод);
		КонецЕсли;
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при загрузке ИБ: %1", ТекстОшибки);
	КонецПопытки;

КонецПроцедуры

// BSLLS:NumberOfOptionalParams-on

// Возвращает имя базы для серверной ИБ, последняя папка для файловой ИБ.
//
// Возвращаемое значение:
//	Строка - имя базы.
//
Функция ИмяИБ() Экспорт
	
	СимволовОтНачала = 3;
	Контекст = Конфигуратор.ПолучитьКонтекст();
	КлючСоединенияСБазой = СокрЛП(Контекст.КлючСоединенияСБазой);
	ТекИмяБазы = "";
	Если СтрНачинаетсяС(ВРег(КлючСоединенияСБазой), "/F") Тогда
		ТекИмяБазы = Сред(КлючСоединенияСБазой, СимволовОтНачала);
		ТекИмяБазы = ФайловыеОперации.УдалитьПоследнийРазделительПути(ТекИмяБазы);
		НомерСлеша = 0;		
		Для Сч = 1 По СтрДлина(ТекИмяБазы) Цикл
			Если Сред(ТекИмяБазы, Сч, 1) = "\" Тогда
				НомерСлеша = Сч;
			КонецЕсли;
		КонецЦикла;
		ТекИмяБазы = Сред(ТекИмяБазы, НомерСлеша + 1);
	ИначеЕсли СтрНачинаетсяС(ВРег(КлючСоединенияСБазой), "/S") Тогда
		ТекИмяБазы = Сред(КлючСоединенияСБазой, СимволовОтНачала);
	Иначе
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Не известен контекст выполнения %1", КлючСоединенияСБазой);
	КонецЕсли;
		
	Возврат СокрЛП(ТекИмяБазы);

КонецФункции

// Возвращает имя файла, построенном по принципу: Префикс (имя базы) + ДатаВремя + Расширение
//
// Параметры:
//	Префикс - Строка - префикс имени. Если не задано, то будет определено по имени базы.
//	ФорматДаты - Строка - формат даты.
//	Расширение - Строка - расширение для файла.
//	
// Возвращаемое значение:
//	Строка - имя файла.
//
// Пример: Base_2017_04_28_19_02_12.dt
Функция ИмяФайлаПоИмениИБНаДату(Знач Префикс = "", Знач ФорматДаты = "yyyy_MM_dd_ЧЧ_мм_сс",
	Знач Расширение = "dt") Экспорт

	Результат = "";

	Если НЕ ПустаяСтрока(Префикс) Тогда
		Результат = Префикс + "_";
	Иначе
		ИмяБазы = ИмяИБ();
		Если НЕ ПустаяСтрока(ИмяБазы) Тогда
			Результат = ИмяБазы + "_";
		КонецЕсли;
	КонецЕсли;

	Результат = Результат + Формат(ТекущаяДата(), "ДФ=" + ФорматДаты) + "." + Расширение;

	Возврат Результат;

КонецФункции

// Осуществляет проверку конфигурации
//
// Параметры:
//	ПараметрыПроверки - Структура - ключи проверки конфигуации.
//	ИмяФайла - Строка - имя файла, куда будут записаны результаты проверки.
//
Процедура ВыполнитьПроверкуКонфигурации(Знач ПараметрыПроверки, Знач ИмяФайла = Неопределено) Экспорт

	Лог.Информация("Выполнение проверки конфигурации");

	ТекстФайла = "";
	Если ПараметрыПроверки.Количество() = 0 Тогда
		ПараметрыПроверки = Работа1С.ПараметрыПроверкиКонфигурацииПоУмолчанию();
		Стр = "Параметры проверки не переданы, используем ключи по умолчанию";
		Лог.Информация(Стр);
		ТекстФайла = ТекстФайла + Стр + Символы.ПС;
	КонецЕсли;

	КлючиПроверки = Работа1С.КлючиПроверкиКонфигурации();
	Стр = "Проверка с ключами:";
	Лог.Информация(Стр);
	ТекстФайла = ТекстФайла + Стр + Символы.ПС;
	Для Каждого КлючЗначение Из ПараметрыПроверки Цикл
		Стр = СтрШаблон("%1 - %2", КлючЗначение.Ключ, КлючиПроверки[КлючЗначение.Ключ]);
		Лог.Информация(Стр);
		ТекстФайла = ТекстФайла + Стр + Символы.ПС;
	КонецЦикла;
	Стр = "===========================";
	Лог.Информация(Стр);
	ТекстФайла = ТекстФайла + Стр + Символы.ПС;
	
	Попытка
		Конфигуратор.ВыполнитьРасширеннуюПроверкуКонфигуратора(ПараметрыПроверки);
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Вывод = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Вывод) Тогда
			ТекстОшибки = СтрШаблон("%1. %2", ТекстОшибки, Вывод);
		КонецЕсли;
		Стр = СтрШаблон("Failed: проверка конфигурации средствами платформы завершена с ошибками:
						|===========================
						|%1
						|CheckConfig: БЫЛИ ОШИБКИ
						|===========================", ТекстОшибки);
		ТекстФайла = ТекстФайла + Стр + Символы.ПС + "";
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			ФайловыеОперации.ЗаписатьТекстФайла(ИмяФайла, ТекстФайла);
		КонецЕсли;
		ОбщегоНазначения.ЗавершениеРаботыОшибка(Стр);
	КонецПопытки;
	
	Стр = "Проверка завершена";
	Лог.Информация(Стр);
	ТекстФайла = ТекстФайла + Стр + Символы.ПС;
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ФайловыеОперации.ЗаписатьТекстФайла(ИмяФайла, ТекстФайла);
	КонецЕсли;

КонецПроцедуры

// Запускает конфигурацию в режиме предприятия и выполняет произвольный код, возвращая файл
//
// Параметры:
//	Код - Строка - код, который нужно выполнить. В коде на выходе должна быть заполнена струтура "Результат",
//					в случае получения ошибки, вернуть ошибку надо в переменной Результат.ТекстОшибки
//
// Возвращаемое значение:
//	Структура - что-то, что должно быть возвращено обратно в скрипт.
//		* ТекстОшибки - Строка - если в процессе была ошибка, будет передано в этом свойстве
//		
Функция ВыполнитьПроизвольныйКодВРежимеПредприятия(Знач Код) Экспорт

	Лог.Информация("Выполнение кода в режиме 1С:Предприятие");
	ИмяФайла = ВременныеФайлы.НовоеИмяФайла();
	ОбработкаСборщик = ОбъединитьПути(ОбщегоНазначения.КаталогПроекта(), "tools", "ВыполнениеПроизвольногоКода.epf");

    Если Не ФайловыеОперации.ФайлСуществует(ОбработкаСборщик) Тогда
        ОбщегоНазначения.ЗавершениеРаботыОшибка("Не обнаружена обработка выполнения произвольного кода каталоге '%1'", 
			ОбработкаСборщик);
    КонецЕсли;

	Настройки = Новый Структура();
	Настройки.Вставить("Код", Код);
	JSON = РаботаJSON.СтруктураВJSON(Настройки);
	ФайловыеОперации.ЗаписатьТекстФайла(ИмяФайла, JSON);

    Попытка
		Конфигуратор.ЗапуститьВРежимеПредприятия(ИмяФайла, Истина,
		 	"/Execute""" + ОбработкаСборщик + """");
	Исключение
		УдалитьФайлы(ИмяФайла);
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Не удалось выполнить произвольный код в режиме 1С:Предприятие: %1",
			ОписаниеОшибки());
	КонецПопытки;

	JSON = ФайловыеОперации.ПрочитатьТекстФайла(ИмяФайла);
	Результат = РаботаJSON.JSONВСтруктуру(JSON, Ложь);
	УдалитьФайлы(ИмяФайла);

	Если НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка выполнения произвольного кода в режиме 1С:Предприятие: %1",
			Результат.ТекстОшибки);
	КонецЕсли;

	Лог.Информация("Выполнение кода в режиме 1С:Предприятие завершено");

	Возврат Результат;

КонецФункции

// Выполнить сборку дистрибутива с обновлениями
//
// Параметры:
//	Версия - Строка, Неопределено - версия для получения информации из конфигурации
//	ИмяМакета - Строка - имя макета для получения описания изменений
//
// Возвращаемое значение:
//	Структура - структура с информацией о конфиуграции
//		* Имя - Строка - имя конфигурации
//		* Версия - Строка - версия обновления
//		* Поставщик - Строка - информация о поставщике
//		* Синоним - Строка - синоним конфигурации
//		* ОписаниеИзмененийHTML - Строка - описание версии в HTML
//		* ОписаниеИзмененийТекст - Строка - описание версии в txt
//		* ТекстОшибки - Строка - если в процессе была ошибка, будет передано в этом свойстве
//		
Функция ПолучитьИнформациюОМетаданных(Знач Версия = Неопределено, Знач ИмяМакета = "ОписаниеИзмененийСистемы") Экспорт

	Лог.Информация("Сбор информации о метаданных");
	ИмяФайла = ВременныеФайлы.НовоеИмяФайла();
	ОбработкаСборщик = ОбъединитьПути(ОбщегоНазначения.КаталогПроекта(), "tools", "СборИнформацииОМетаданных.epf");

    Если Не ФайловыеОперации.ФайлСуществует(ОбработкаСборщик) Тогда
        ОбщегоНазначения.ЗавершениеРаботыОшибка("Не обнаружена обработка сбора данных в каталоге '%1'", 
			ОбработкаСборщик);
    КонецЕсли;

	Настройки = Новый Структура();
	Настройки.Вставить("Версия", Версия);
	Настройки.Вставить("ИмяМакета", ИмяМакета);
	JSON = РаботаJSON.СтруктураВJSON(Настройки);
	ФайловыеОперации.ЗаписатьТекстФайла(ИмяФайла, JSON);

    Попытка
		Конфигуратор.ЗапуститьВРежимеПредприятия(ИмяФайла, Истина,
		 	"/Execute""" + ОбработкаСборщик + """");
	Исключение
		УдалитьФайлы(ИмяФайла);
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Не удалось получить информацию о метаданных при сборке: %1",
			ОписаниеОшибки());
	КонецПопытки;

	JSON = ФайловыеОперации.ПрочитатьТекстФайла(ИмяФайла);
	ИнформацияОМетаданных = РаботаJSON.JSONВСтруктуру(JSON, Ложь);
	УдалитьФайлы(ИмяФайла);

	Если НЕ ПустаяСтрока(ИнформацияОМетаданных.ТекстОшибки) Тогда
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка получения информации из конфигурации: %1",
			ИнформацияОМетаданных.ТекстОшибки);
	КонецЕсли;

	Лог.Информация("Сбор информации о конфигурации завершен");

	Возврат ИнформацияОМетаданных;

КонецФункции

// Осуществляет установку признака легальности получения обновлений
//
Процедура УстановитьПризнакЛегальности() Экспорт

	Лог.Информация("Подтверждение легальности получения обновлений");
	Код = 
	"Попытка
	|	Результат.Вставить(""Успешно"", Ложь);
	|	ОбновлениеИнформационнойБазыСлужебный.ЗаписатьПодтверждениеЛегальностиПолученияОбновлений();
	|	ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы(Ложь);			
	|	Результат.Успешно = Истина;
	|Исключение
	|	Результат.ТекстОшибки = СтрШаблон(""Не удалось установить признак легальности получения конфигурации: %1"",
	|		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	|КонецПопытки;";
	Результат = ВыполнитьПроизвольныйКодВРежимеПредприятия(Код);
	Если Результат.Успешно = Истина Тогда
		Лог.Информация("Подтверждение легальности выполнено успешно");
	Иначе
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Подтверждение легальности не выполнено");
	КонецЕсли;

КонецПроцедуры

// Выгружает файл конфигурации из ИБ
//
// Параметры:
//  ИмяФайла - Строка - Путь к результату - выгружаемому файлу конфигурации (*.cf)
//
Процедура ВыгрузитьКонфигурациюВФайл(Знач ИмяФайла) Экспорт

	Лог.Информация("Выгрузка конфигурации в cf-файл");

	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Не указан имя cf-файла конфигурации");
	КонецЕсли;
	Файл = Новый Файл(ИмяФайла);
	ФС.ОбеспечитьКаталог(Файл.Путь);

	Попытка
		Конфигуратор.ВыгрузитьКонфигурациюВФайл(ИмяФайла);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Вывод = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Вывод) Тогда
			ТекстОшибки = СтрШаблон("%1. %2", ТекстОшибки, Вывод);
		КонецЕсли;
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Выгрузка конфигурации завершилась с ошибками: %1", ТекстОшибки);		
	КонецПопытки;

	Лог.Информация("Выгрузка в cf-файл завершена");

КонецПроцедуры

// Загружает файл конфигурации в текущую базу данных.
//	Параметры:
//		ПутьКФайлу - Строка - Путь к файлу *.cf
//		СниматьСПоддержки - Булево - снимает с поддержки, отключает от хранилища, по умолчанию Истина
//
Процедура ЗагрузитьКонфигурациюИзФайла(Знач ПутьКФайлу, Знач СниматьСПоддержки = Истина) Экспорт
	Перем ФайлЗагрузки, ПараметрыЗапуска;

	Лог.Информация("Загружаем файл конфигурации %1", ПутьКФайлу);
	ФайлЗагрузки = Новый Файл(ПутьКФайлу);
	Ожидаем.Что(ФайлЗагрузки.Существует(), "Путь к файлу загрузки не существует " + ФайлЗагрузки.ПолноеИмя).ЕстьИстина();

	Если ТипЗнч(СниматьСПоддержки) = Тип("Булево") И СниматьСПоддержки Тогда
		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryUnbindCfg -force");
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/ManageCfgSupport -disableSupport -force");
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	КонецЕсли;

	Попытка
		Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлЗагрузки.ПолноеИмя);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Вывод = Конфигуратор.ВыводКоманды();
		Если НЕ ПустаяСтрока(Вывод) Тогда
			ТекстОшибки = СтрШаблон("%1. %2", ТекстОшибки, Вывод);
		КонецЕсли;
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Загрузка конфигурации завершилась с ошибками: %1", ТекстОшибки);		
	КонецПопытки;	

	Лог.Информация("Загрузка конфигурации из cf-файла успешно завершена");

КонецПроцедуры

// Выгружает файл расширения из ИБ
//
// Параметры:
//  ПутьКФайлу - Строка - Путь к результату - выгружаемому файлу конфигурации (*.cfe)
//  ИмяРасширения - Строка - Имя расширения
//
Процедура ВыгрузитьРасширениеВФайл(Знач ПутьКФайлу, Знач ИмяРасширения) Экспорт

	Лог.Информация("Запускаю выгрузку расширения %1 в файл <%2>", ИмяРасширения, ПутьКФайлу);

	Попытка
		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/DumpCfg");
		ПараметрыЗапуска.Добавить("""" + ФайловыеОперации.АбсолютныйПуть(ПутьКФайлу) + """");
		ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка выгрузки расширения в файл %1 (%2)", 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Конфигуратор.ВыводКоманды());
	КонецПопытки;

	Лог.Информация("Выгрузка расширения в файл завершена");

КонецПроцедуры

// Загружает файл расширения в текущую базу данных.
//	Параметры:
//		ПутьКФайлу - Строка - Путь к файлу *.cfe
//		ИмяРасширения - Строка - имя расширения
//		ОбновитьКонфигурациюИБ - Строка - обновить конфигуарцию ИБ после загрузки расширения
//
Процедура ЗагрузитьФайлРасширения(Знач ПутьКФайлу, Знач ИмяРасширения, Знач ОбновитьКонфигурациюИБ = Ложь) Экспорт

	Лог.Информация("Загружаю файл расширения <%1>", ПутьКФайлу);

	Файл = Новый Файл(ПутьКФайлу);
	Ожидаем.Что(Файл.Существует(), "Путь к файлу загрузки не существует " + Файл.ПолноеИмя).ЕстьИстина();
	Конфигуратор.ЗагрузитьРасширениеИзФайла(Файл.ПолноеИмя, ИмяРасширения, ОбновитьКонфигурациюИБ);

	Лог.Информация("Загрузка расширения %1 из cfe-файла успешно завершена", ИмяРасширения);

КонецПроцедуры

// Выводит информацию о всех установленных расширениях в конфигурации
//
Процедура ПоказатьСписокВсехРасширенийКонфигурации() Экспорт
	СписокВсехРасширений = ПолучитьСписокВсехРасширений();
	Лог.Информация("Список расширений конфигурации:
				   |%1", СписокВсехРасширений);
КонецПроцедуры

// Получает информацию о всех установленных расширениях в конфигурации
//
// Возвращаемое значение:
//	Строка - список всех расширений в конфигурации.
Функция ПолучитьСписокВсехРасширений() Экспорт

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();

	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/DumpDBCfgList");
	ПараметрыЗапуска.Добавить("-AllExtensions");
	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

	Возврат Конфигуратор.ВыводКоманды();

КонецФункции

// Собирает из исходников конфигурацию
//
// Параметры:
//	Каталог - Строка - путь каталогу с иходниками расширения
//
Процедура ЗагрузитьКонфигурациюИзФайловXML(Знач Каталог) Экспорт

	Лог.Информация("Выполняю сборку/загрузку конфигурации из каталога <%1>", Каталог);

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + Каталог + """");
	ПараметрыЗапуска.Добавить("/UpdateDBCfg");

	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);			
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при загрузке конфигурации из файлов %1 %2",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Конфигуратор.ВыводКоманды());
	КонецПопытки;

	Лог.Информация("Загрузка конфигурации завершена");

КонецПроцедуры

// Выгружает конфигурацию в исходники XML
//
// Параметры:
//	КаталогВыгрузки - Строка - путь каталогу с иходниками расширения
//  ФайлВерсии - Строка - Путь к файлу версии
//  ТолькоИзмененные - Булево - Выгружать только измененные файлы для ускорения выгрузки
//  ИспользоватьПереименования - Булево - Переименовывать файлы в имена по папкам согласно иерархии метаданных
//
Процедура ВыгрузитьКонфигурациюВФайлыXML(КаталогВыгрузки, Знач ФайлВерсии = "",
	Знач ТолькоИзмененные = Ложь,
	Знач ИспользоватьПереименования = Ложь) Экспорт

	Лог.Информация("Выполняю выгрузку конфигурации в каталог XML <%1>", КаталогВыгрузки);
	КаталогРаспаковки = ?(ИспользоватьПереименования, ВременныеФайлы.СоздатьКаталог(), КаталогВыгрузки);

	ФайлОбъект = Новый Файл(ФайлВерсии);
	ТолькоИзмененные = (ТолькоИзмененные И ФайлОбъект.Существует());
	ИспользоватьПереименования = ?(ТолькоИзмененные, Ложь, ИспользоватьПереименования);
	Попытка
		Конфигуратор.ВыгрузитьКонфигурациюВФайлы(КаталогРаспаковки, , ТолькоИзмененные, ФайлВерсии);
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при выгрузке конфигурации в каталог XML %1 %2",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Конфигуратор.ВыводКоманды());
	КонецПопытки;

	Лог.Информация("Выгрузка в исходники завершена.");

КонецПроцедуры

// Собирает из исходников расширение с указанным именем
//
// Параметры:
//	Каталог - Строка - путь каталогу с иходниками расширения
// 	ИмяРасширения - Строка - Имя расширения
//	ОбновитьКонфигурациюИБ - Булево - Признак обновления расширения в базе, 
//									  имеет смысл только на пустой базе или при первой загрузке.
//
Процедура СобратьИзИсходниковРасширение(Знач Каталог, Знач ИмяРасширения, Знач ОбновитьКонфигурациюИБ = Ложь) Экспорт

	Лог.Информация("Выполняю сборку/загрузку расширения %1 из каталога <%2>", ИмяРасширения, Каталог);

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + Каталог + """");
	ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");

	Если ОбновитьКонфигурациюИБ Тогда
		ПараметрыЗапуска.Добавить("/UpdateDBCfg");
	КонецЕсли;

	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);	

	Попытка
		ПоказатьСписокВсехРасширенийКонфигурации();
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка выгрузки расширения в файл %1",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Лог.Информация("Сборка/загрузка расширения %1 завершена", ИмяРасширения);

КонецПроцедуры

// Собирает из исходников расширение с указанным именем
//
// Параметры:
// 	ИмяРасширения - Строка - Имя расширения
//	Каталог - Строка - путь каталогу с иходниками расширения
//
Процедура РазобратьРасширениеНаИсходники(Знач ИмяРасширения, Знач Каталог) Экспорт

	Лог.Информация("Выполняю разборку расширения %1 на исходники в каталог <%2>", ИмяРасширения, Каталог);

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/DumpConfigToFiles """ + Каталог + """");
	ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");

	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка выгрузки расширения в исходный код %1",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Лог.Информация("Разборка расширения завершена");

КонецПроцедуры

// Обновляет расширение в ИБ 1С
//
// Параметры:
//   ИмяРасширения - Строка - имя расширения
//
Процедура ОбновитьРасширение(Знач ИмяРасширения) Экспорт

	Лог.Информация("Запускаю обновление расширения %1", ИмяРасширения);

	Попытка
		Конфигуратор.ОбновитьКонфигурациюБазыДанных(Ложь, Ложь, Ложь, ИмяРасширения);
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка обновления расширения ""%1"": %2",
			ИмяРасширения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Лог.Информация("Обновление расширения завершено.");

КонецПроцедуры

// Выполняем запуск тестов для Vannessa Automation
//
// Параметры:
//	ПутьКФичам - Строка - Путь к фичам, может быть пустым
//	РабочийКаталогПроекта - Строка - Путь к каталогу с проектом, по умолчанию каталог ./
//	ПутьКНастройкам - Строка - Путь к файлу настроек запуска тестов
//	ПутьКИнструментам - Строка - пут Булево, Неопределено к инструментам, по умолчанию ВанессаАДД.ПутьИнструментаБДД()
//	ТолстыйКлиент - Булево, Неопределено - признак запуска толстого клиента
//	ОжидатьЗавершения - Булево - признак запуска ожидания, пока 1С завершится,
//				для разработки освобождения командной строки надо ставить Ложь;
//	ДопПараметры - Строка - дополнительные параметры для передачи в параметры запуска, например /DebugURLtcp://localhost
//	ТегиОтбор - Строка - Теги игнорирования фича-файлов
//	ТегиФильтр - Строка - Теги отбор фича-файлов
//	ДопКлючи - Строка - дополнительные параметры для передачи в параметры запуска /С, например NoLoadTestClientsTable
//
Процедура ВыполнитьТестированиеVanessaAutomation(Знач ПутьКФичам = Неопределено,
	Знач РабочийКаталогПроекта = Неопределено,
	Знач ПутьКНастройкам = "", Знач ПутьКИнструментам = "", Знач ТолстыйКлиент = Ложь,
	Знач ОжидатьЗавершения = Истина, Знач ДопПараметры = "",
	Знач ТегиОтбор = "", Знач ТегиФильтр = "",
	Знач ДопКлючи = "") Экспорт

	Лог.Информация("Начало тестирования с помощью фреймворка Vanessa Automation");

	Если РабочийКаталогПроекта = Неопределено Тогда
		РабочийКаталогПроекта = ".";
	КонецЕсли;
	РабочийКаталогПроекта = ОбщегоНазначения.ПолныйПуть(РабочийКаталогПроекта);
	УстановитьПеременнуюСреды("workspaceRoot", РабочийКаталогПроекта);
	Лог.Отладка("Рабочий каталог проекта <%1>", РабочийКаталогПроекта);
	УстановитьТекущийКаталог(РабочийКаталогПроекта);

	Если ПутьКФичам <> Неопределено Тогда
		ПутьКФичам = ОбщегоНазначения.ПолныйПуть(ПутьКФичам);
		Лог.Отладка("Абсолютный путь ПутьКФичам <%1>", ПутьКФичам);
		УстановитьПеременнуюСреды("VANESSA_FEATUREPATH", ПутьКФичам);
	КонецЕсли;
	ПутьКФичам = ФайловыеОперации.АбсолютныйПуть(ПутьКФичам);
	Если НЕ ФайловыеОперации.КаталогСуществует(ПутьКФичам) И НЕ ФайловыеОперации.ФайлСуществует(ПутьКФичам) Тогда		
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Фичи файлы не найдены <%1>", ПутьКФичам);
	КонецЕсли;

	ПутьКИнструментам = ОбщегоНазначения.ПолныйПуть(ПутьКИнструментам);
	Лог.Отладка("Путь к Vanessa Automation %1", ПутьКИнструментам);
	ФайлСуществует = Новый Файл(ПутьКИнструментам).Существует();
	Текст = СтрШаблон("Ожидаем, что файл <%1> существует, а его нет!", ПутьКИнструментам);
	Ожидаем.Что(ФайлСуществует, Текст).ЭтоИстина();

	НазваниеКлючаСтатуса = "ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев";
	НазваниеКлючаЛогаВыполнения = "ИмяФайлаЛогВыполненияСценариев";

	ПутьКФайлуСтатусаВыполнения = ОбъединитьПути(РабочийКаталогПроекта, "buildstatus.log");
	ПутьЛогаВыполненияСценариев = ОбъединитьПути(РабочийКаталогПроекта, "vanessaonline.txt");
	Если ФайловыеОперации.ФайлСуществует(ПутьКНастройкам) Тогда
		НастройкиЗапуска = ОбщегоНазначения.ПрочитатьФайлJSON(ПутьКНастройкам);
		Если НастройкиЗапуска.Получить(НазваниеКлючаСтатуса) <> Неопределено
			И НЕ ПустаяСтрока(НастройкиЗапуска.Получить(НазваниеКлючаСтатуса)) Тогда
			ПутьКФайлуСтатусаВыполнения = НастройкиЗапуска.Получить(НазваниеКлючаСтатуса);
		КонецЕсли;
		Если НастройкиЗапуска.Получить(НазваниеКлючаЛогаВыполнения) <> Неопределено 
			И НЕ ПустаяСтрока(НастройкиЗапуска.Получить(НазваниеКлючаЛогаВыполнения)) Тогда
			ПутьЛогаВыполненияСценариев = НастройкиЗапуска.Получить(НазваниеКлючаЛогаВыполнения);
		КонецЕсли;
	КонецЕсли;

	ПутьКФайлуСтатусаВыполнения = ФайловыеОперации.АбсолютныйПуть(ПутьКФайлуСтатусаВыполнения);
	ПутьЛогаВыполненияСценариев = ФайловыеОперации.АбсолютныйПуть(ПутьЛогаВыполненияСценариев);

	Лог.Информация("Путь к файлу статуса выполнения: <%1>", ПутьКФайлуСтатусаВыполнения);
	Лог.Информация("Путь к логу выполнения сценариев: <%1>", ПутьЛогаВыполненияСценариев);

	Если ПустаяСтрока(ДопКлючи) И НЕ Лев(ДопКлючи, 1) = ";" Тогда
		ДопКлючи = ";" + ДопКлючи;
	КонецЕсли;

	КлючЗапуска = """StartFeaturePlayer;ClearStepsCache;QuietInstallVanessaExt;"
					+ "VAParams=" + ПутьКНастройкам + ";"
					+ "WorkspaceRoot=" + РабочийКаталогПроекта
					+ ДопКлючи + """";

	Лог.Отладка(КлючЗапуска);

	ДополнительныеКлючи = " /TESTMANAGER " + ДопПараметры;

	ДопСообщения = НовыеДопСообщенияДляЗапускаПредприятия();
	ДопСообщения.Ключ = "ЗапуститьТестироватьПоведение";
	ДопСообщения.ПоказыватьДополнительноЛогПредприятия = Ложь;
	ДопСообщения.СообщениеВСлучаеУспеха = "Все фичи/сценарии выполнены!";
	ДопСообщения.СообщениеВСлучаеПадения = "Часть фич/сценариев упала!";
	ДопСообщения.СообщениеВСлучаеПропуска =
		"Ошибок при проверке поведения не найдено, но часть сценариев еще не реализована!";

	ЗапуститьВРежимеПредприятияСПроверкойВыполнения(
		ДопСообщения,
		КлючЗапуска, ПутьКИнструментам,
		ТолстыйКлиент, ДополнительныеКлючи, ОжидатьЗавершения,
		ПутьЛогаВыполненияСценариев, ПутьКФайлуСтатусаВыполнения);

	Лог.Информация("Тестирование поведения завершено");
	
КонецПроцедуры

// Создать структуру для дополнительных сообщений запуска 1С в режиме Предприятия
//
//  Возвращаемое значение:
//   Структура - ключи Ключ,СообщениеВСлучаеУспеха,СообщениеВСлучаеПадения,СообщениеВСлучаеПропуска с пустыми строками
//
Функция НовыеДопСообщенияДляЗапускаПредприятия() Экспорт
	Результат = Новый Структура("Ключ,СообщениеВСлучаеУспеха,СообщениеВСлучаеПадения",
		"", "", "");
	Результат.Вставить("СообщениеВСлучаеПропуска", "");
	Результат.Вставить("ПоказыватьДополнительноЛогПредприятия", Истина);
	Возврат Результат;
КонецФункции

// Выполнить команду/действие в режиме 1С:Предприятия
//	проверкой статус-файла выполнения и  возможностью ожидания выполнения и чтением лог-файла
//
// Параметры:
//   ДопСообщения - Структура - из метода НовыеДопСообщенияДляЗапускаПредприятия
//   ПараметрЗапуска - Строка - <описание параметра>
//   ОбработкаДляЗапуска - Строка - <описание параметра>
//   ТолстыйКлиент - Булево - признак запуска толстого клиента
//   ДополнительныеКлючиЗапуска - Строка - <описание параметра>
//   ОжидатьЗавершения - Булево - признак запуска толстого клиента
//   ПутьФайлаИнформации - Строка - путь файла информации 1С по ключу "/out".
//   ПутьКФайлуСтатусаВыполнения - Строка - путь файла статуса (внутри файла должно быть 1 или 0)
//
Процедура ЗапуститьВРежимеПредприятияСПроверкойВыполнения(
				Знач ДопСообщения,
				Знач ПараметрЗапуска,
				Знач ОбработкаДляЗапуска,
				Знач ТолстыйКлиент,
				Знач ДополнительныеКлючиЗапуска,
				Знач ОжидатьЗавершения,
				Знач ПутьЛогаВыполненияСценариев = Неопределено,
				Знач ПутьКФайлуСтатусаВыполнения = Неопределено) Экспорт

	Если Не ОжидатьЗавершения И ЗначениеЗаполнено(ПутьЛогаВыполненияСценариев) Тогда
		Текст = "Нельзя получать лог выполнения без включенного признака ожидания выполнения 1С";
		ОбщегоНазначения.ЗавершениеРаботыОшибка(Текст);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПутьКФайлуСтатусаВыполнения) Тогда
		ФайловыеОперации.УдалитьФайлЕслиОнСуществует(ПутьКФайлуСтатусаВыполнения);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутьЛогаВыполненияСценариев) Тогда
		ФайловыеОперации.УдалитьФайлЕслиОнСуществует(ПутьЛогаВыполненияСценариев);
	КонецЕсли;

	ЛогОт1С = "";

	Попытка
		Если ОжидатьЗавершения Тогда
			ЛогОт1С = ЗапуститьВРежимеПредприятияСЛогФайлом(
				ПараметрЗапуска, ОбработкаДляЗапуска,
				ПутьЛогаВыполненияСценариев,
				ТолстыйКлиент, ДополнительныеКлючиЗапуска, ДопСообщения);
		Иначе
			ЗапуститьВРежимеПредприятия(
				ПараметрЗапуска, ОбработкаДляЗапуска,
				ТолстыйКлиент, ДополнительныеКлючиЗапуска, Ложь, ДопСообщения);
		КонецЕсли;

	Исключение
		Текст = ИнформацияОбОшибке().Описание;
		Лог.Ошибка("Причина ошибки:
			|%1
			|Вывод от 1С:Предприятие:
			|%2", Текст, ЛогОт1С);
		ВызватьИсключение;
	КонецПопытки;

	Если ЗначениеЗаполнено(ПутьКФайлуСтатусаВыполнения) Тогда		
		Если ФайловыеОперации.ФайлСуществует(ПутьКФайлуСтатусаВыполнения) Тогда
			СтатусВозврата = СокрЛП(ФайловыеОперации.ПрочитатьТекстФайла(ПутьКФайлуСтатусаВыполнения));
			Лог.Отладка("Код возврата %1", СтатусВозврата);
			Если СтатусВозврата = "0" Тогда
				Лог.Информация(ДопСообщения.СообщениеВСлучаеУспеха);

			ИначеЕсли СтатусВозврата = "1" Тогда
				ДанныеОшибки = Новый Структура;
				ДанныеОшибки.Вставить("Предупреждение", "
					|Vanessa automation или 1С:Предприятие вернуло код возврата 1
					|");
				ВызватьИсключение Новый ИнформацияОбОшибке(ДопСообщения.СообщениеВСлучаеПадения, ДанныеОшибки);
	
			ИначеЕсли СтатусВозврата = "2" Тогда
				Лог.Предупреждение(ДопСообщения.СообщениеВСлучаеПропуска);

			Иначе
				// Если статус пуст, то вероятно были Warnings. Проверим текст, на словосочетания "БЫЛИ ОШИБКИ"
				ТекстОшибки = СтрШаблон("Получен неожиданный/неверный результат работы - %1
				|Возможно, работа 1С:Предприятие завершилась некорректно. Например, указана неверная версия платформы.
				|Или возникла ошибка при запуске. Проверьте журнал регистрации в ИБ.
				|Вывод от 1С:Предприятие:
				|%2", СтатусВозврата, ЛогОт1С);

				ДанныеОшибки = Новый Структура;
				ДанныеОшибки.Вставить("Предупреждение", "");
				ВызватьИсключение Новый ИнформацияОбОшибке(ТекстОшибки, ДанныеОшибки);

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Сохраняет информацию об обновлении в файлы HTML и TXT
//
// Параметры:
//   Параметры - Структура - параметры получения информации
//
Процедура СохранитьИнформациюОбОбновлении(Знач Параметры) Экспорт	

	УсловиеПроверки = ЗначениеЗаполнено(Параметры.HTML) ИЛИ ЗначениеЗаполнено(Параметры.TXT);
	Ожидаем.Что(УсловиеПроверки, "HTML или TXT должны быть заполнены").ЕстьИстина();

	ИнформацияОМетаданных = ПолучитьИнформациюОМетаданных(Параметры.Версия, Параметры.ИмяМакета);

	Если ЗначениеЗаполнено(Параметры.HTML) Тогда

		Если Параметры.ВключаяСтили = Истина Тогда
			СоздатьФайлДистрибутива(Параметры.HTML, "NewsTemplate.html", ИнформацияОМетаданных);
		Иначе
			ФайловыеОперации.ЗаписатьТекстФайла(Параметры.HTML, ИнформацияОМетаданных.ОписаниеИзмененийHTML);
		КонецЕсли;
		Лог.Информация("Записали информацию в HTML-файл <%1>", Параметры.HTML);

	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.TXT) Тогда
		ФайловыеОперации.ЗаписатьТекстФайла(Параметры.TXT, ИнформацияОМетаданных.ОписаниеИзмененийТекст);
		Лог.Информация("Записали информацию в текстовый файл <%1>", Параметры.TXT);
	КонецЕсли;

КонецПроцедуры

// Выполнить сборку дистрибутива с обновлениями
//
// Параметры:
//   Параметры - Структура - параметры сборки дистрибутива
//		* КаталогСборки - Строка - каталог сборки дистрибутива
//
Процедура СоздатьДистрибутив(Знач Параметры) Экспорт
	
	Лог.Информация("Начало создания дистрибутива");

	// Удаляем все файлы в папке сборки, если она есть
	Если ФайловыеОперации.КаталогСуществует(Параметры.КаталогСборки) Тогда
		Попытка
			УдалитьФайлы(Параметры.КаталогСборки);
		Исключение
			ОбщегоНазначения.ЗавершениеРаботыОшибка("Не удалось удалить каталог со старой версией для новой сборки: %1",
				ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ИнформацияОМетаданных = ПолучитьИнформациюОМетаданных(Параметры.Версия, Параметры.ИмяМакета);

	Дата 					= Параметры.Дата;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	ДатаСтрокой				= Формат(Дата, "ДФ=dd.MM.yyyy");
	Префикс					= Параметры.Префикс;
	КаталогСборки			= Параметры.КаталогСборки;
	КаталогВерсийОбновлений = Параметры.КаталогВерсий;
	КаталогОбщихФайлов		= Параметры.КаталогОбщихФайлов;
	ВерсияКонфигурации 		= ИнформацияОМетаданных.Версия;
	ВерсияСПодчеркиваниями	= СтрЗаменить(ИнформацияОМетаданных.Версия, ".", "_");
	ИмяКонфигурации 		= ИнформацияОМетаданных.Имя;
	СинонимКонфигурации 	= ИнформацияОМетаданных.Синоним;
	Поставщик				= Параметры.Поставщик; // Если поставщик задан в командной строке
	Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
		Поставщик			= ИнформацияОМетаданных.Поставщик;
	КонецЕсли;
	ИнформацияОМетаданных.Поставщик = Поставщик;
	ВерсииОбновления 		= Параметры.ВерсииОбновления;
	ИнформацияОМетаданных.Вставить("МинимальнаяВерсияПлатформы", Параметры.МинимальнаяВерсияПлатформы);
	МассивВерсий			= СтрРазделить(ВерсииОбновления, ",");

	Лог.Информация("Версия конфигурации %1", ВерсияКонфигурации);
	Лог.Информация("Имя конфигурации %1 (%2)", ИмяКонфигурации, СинонимКонфигурации);

	Лог.Информация("Создание каталогов и заполнение вспомогательных данных");
	КаталогВерсии 						= ОбъединитьПути(Параметры.КаталогСборки, ИнформацияОМетаданных.Версия);
	КаталогВерсииПолный 				= ОбъединитьПути(КаталогВерсии, "Полный");
	КаталогВерсииОбновление 			= ОбъединитьПути(КаталогВерсии, "Обновление");
	КаталогВерсииДополнительныеФайлы 	= ОбъединитьПути(КаталогВерсии, "Дополнительные файлы");	

	ИнформацияОМетаданных.Вставить("КаталогВерсии", КаталогВерсии);
	ИнформацияОМетаданных.Вставить("КаталогВерсииПолный", КаталогВерсииПолный);
	ИнформацияОМетаданных.Вставить("КаталогВерсииОбновление", КаталогВерсииОбновление);
	ИнформацияОМетаданных.Вставить("КаталогВерсииДополнительныеФайлы", КаталогВерсииДополнительныеФайлы);
	ИнформацияОМетаданных.Вставить("КаталогШаблоновПоставщика", Параметры.КаталогШаблоновПоставщика);
	ИнформацияОМетаданных.Вставить("Назначение", Параметры.Назначение);
	ИнформацияОМетаданных.Вставить("НазначениеДемо", Параметры.НазначениеДемо);
	ИнформацияОМетаданных.Вставить("ВерсияСПодчеркиваниями", ВерсияСПодчеркиваниями);
	ИнформацияОМетаданных.Вставить("ВерсииОбновления", ВерсииОбновления);
	ИнформацияОМетаданных.Вставить("КаталогСборки", КаталогСборки);
	ИнформацияОМетаданных.Вставить("КаталогВерсийОбновлений", КаталогВерсийОбновлений);
	ИнформацияОМетаданных.Вставить("КаталогОбщихФайлов", КаталогОбщихФайлов);
	ИнформацияОМетаданных.Вставить("Префикс", Префикс);
	ИнформацияОМетаданных.Вставить("Дата", Дата);
	ИнформацияОМетаданных.Вставить("ДатаСтрокой", ДатаСтрокой);

	// Создаем каталоги
	ФайловыеОперации.ОбеспечитьКаталог(КаталогВерсии);
	ФайловыеОперации.ОбеспечитьКаталог(КаталогВерсииПолный);	
	ФайловыеОперации.ОбеспечитьКаталог(КаталогВерсииДополнительныеФайлы);

	// Нужно делать и обновление
	мСтрокаСВерсиями = "";
	Если МассивВерсий.Количество() > 0 Тогда		
		// Создаем файл UpdInfo.txt
		ФайловыеОперации.ОбеспечитьКаталог(КаталогВерсииОбновление);
		Лог.Информация("Создание файла UpdInfo.txt");
		ТД = Новый ТекстовыйДокумент;
		ТекстВерсий = "Version=" + ВерсияКонфигурации + Символы.ПС + "FromVersions=;";
		Для Каждого мВерсия Из МассивВерсий Цикл
			ТекстВерсий = ТекстВерсий + мВерсия + ";";
			Если НЕ ПустаяСтрока(мСтрокаСВерсиями) Тогда
				мСтрокаСВерсиями = мСтрокаСВерсиями + ", ";
			КонецЕсли;
			мСтрокаСВерсиями = мСтрокаСВерсиями + мВерсия;
		КонецЦикла;
		ТекстВерсий = ТекстВерсий + Символы.ПС + "UpdateDate=" + ДатаСтрокой;
		ТД.УстановитьТекст(ТекстВерсий);
		ТД.Записать(ОбъединитьПути(КаталогВерсииДополнительныеФайлы, "UpdInfo.txt"));
	КонецЕсли;

	// Создаем ReadMe.txt
	ИмяФайла = ОбъединитьПути(КаталогВерсииДополнительныеФайлы, "ReadMe.txt");
	СоздатьФайлДистрибутива(ИмяФайла, "DistribReadMe.txt", ИнформацияОМетаданных);
	
	// Создаем 1cv8upd.html
	ИмяФайла = ОбъединитьПути(КаталогВерсииДополнительныеФайлы, "1cv8upd.html");
	СоздатьФайлДистрибутива(ИмяФайла, "DistribNewsTemplate.html", ИнформацияОМетаданных);
			
	// ШАГ 5. Создаем файл поставки
	ПараметрыЗапуска3 = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска3.Добавить("/CreateDistributionFiles");
	// Создаем дистрибутив
	ПараметрыЗапуска3.Добавить("-cffile """ + ОбъединитьПути(КаталогВерсии, "1Cv8.cf") + """");
	Если МассивВерсий.Количество() > 0 Тогда
		// Если надо, создаем обновления
		ПараметрыЗапуска3.Добавить("-cfufile """ + ОбъединитьПути(КаталогВерсии, "1Cv8.cfu") + """");
		Для Каждого мВерсия Из МассивВерсий Цикл
			ФайлКонкретнойВерсии = ОбъединитьПути(КаталогВерсийОбновлений, СокрЛП(мВерсия), "1Cv8.cf");
			ПараметрыЗапуска3.Добавить("-f """ + ФайлКонкретнойВерсии + """");
		КонецЦикла;
	КонецЕсли;

	Лог.Информация("Создание файла поставки");
	СтрПараметры = "";
	Для Каждого Стр Из ПараметрыЗапуска3 Цикл
		СтрПараметры = СтрПараметры + Стр + " ";
	КонецЦикла;
	Лог.Информация("Параметры файла поставки: " + СтрПараметры);
	
	Попытка		
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска3);
		Лог.Информация("Создание файла поставки завершено");
	Исключение												   
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при создании файла поставки %1",
			Конфигуратор.ВыводКоманды());
	КонецПопытки;

	// Создание файла манифеста 1cv8.mft
	ИмяФайла = ОбъединитьПути(КаталогВерсии, "1cv8.mft");
	СоздатьФайлДистрибутива(ИмяФайла, "Distrib1cv8.mft", ИнформацияОМетаданных);

	// Создание файла манифеста install.edf
	ИмяФайлаМанифеста = ОбъединитьПути(КаталогСборки, "install.edf");
	Лог.Информация("Создание файла манифеста %1", ИмяФайлаМанифеста);
	СоздатьФайлМанифеста(ИмяФайлаМанифеста, ИнформацияОМетаданных);
		
	// Создание дистрибутива
	ПараметрыЗапуска4 = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска4.Добавить("/CreateDistributive """ + КаталогВерсииПолный + """");
	ПараметрыЗапуска4.Добавить("-File """ + ИмяФайлаМанифеста + """");
	ПараметрыЗапуска4.Добавить("-MakeSetup");
	
	Лог.Информация("Создание дистрибутива");
	Попытка		
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска4);
		Лог.Информация("Создание дистрибутива завершено");
		
		// Делаем архив
		ИмяАрхива = ОбъединитьПути(КаталогВерсииПолный, Префикс + ВерсияСПодчеркиваниями + "_full.zip");
		Лог.Информация("Имя файла с архивом <%1>", ИмяАрхива);
		ЗаписьZIP =  Новый ЗаписьZipФайла(ИмяАрхива);
		ЗаписьZIP.Добавить(ОбъединитьПути(КаталогВерсииПолный, "*.*"),
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);		
		ЗаписьZIP.Записать();
		Лог.Информация("Создание архива дистрибутива завершено");
		
	Исключение
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при создании дистрибутива %1",
			Конфигуратор.ВыводКоманды());
	КонецПопытки;
	
	// ШАГ 7. Создание обновления
	Если МассивВерсий.Количество() > 0 Тогда
		ПараметрыЗапуска5 = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска5.Добавить("/CreateDistributive """ + КаталогВерсииОбновление + """");
		ПараметрыЗапуска5.Добавить("-File """ + ОбъединитьПути(КаталогСборки, "install.edf") + """");
		ПараметрыЗапуска5.Добавить("-Option Обновление");
		ПараметрыЗапуска5.Добавить("-MakeSetup");

		Лог.Информация("Создание обновления дистрибутива");
		Попытка
			Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска5);
			Лог.Информация("Создание обновления дистрибутива завершено");
			
			// Делаем архив
			ИмяАрхива = ОбъединитьПути(КаталогВерсииОбновление, Префикс + ВерсияСПодчеркиваниями + "_upd.zip");
			ЗаписьZIP =  Новый ЗаписьZipФайла(ИмяАрхива);     
			ЗаписьZIP.Добавить(ОбъединитьПути(КаталогВерсииОбновление, "*.*"),
				РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
				РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
			ЗаписьZIP.Записать();
			Лог.Информация("Создание архива обновления дистрибутива завершено");
			
		Исключение
			ОбщегоНазначения.ЗавершениеРаботыОшибка("Произошла ошибка при создании обновления дистрибутива %1",
				Конфигуратор.ВыводКоманды());
		КонецПопытки;
			
	КонецЕсли;

	Лог.Информация("Успешное завершение сборки.");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполнить команду/действие в режиме 1С:Предприятия
//
// Параметры:
//   ПараметрЗапуска - Строка - <описание параметра>
//   ОбработкаДляЗапуска - Строка - <описание параметра>
//   ТолстыйКлиент - Булево - признак запуска толстого клиента
//   ДополнительныеКлючиЗапуска - Строка - <описание параметра>
//   ОжидатьЗавершения - Булево - по умолчанию Истина, Ложь - запускает и завершает свой процесс.
//   ДопСообщения - Структура - сообщение для вывода
//
Процедура ЗапуститьВРежимеПредприятия(Знач ПараметрЗапуска,
	Знач ОбработкаДляЗапуска, Знач ТолстыйКлиент,
	Знач ДополнительныеКлючиЗапуска,
	Знач ОжидатьЗавершения, Знач ДопСообщения)

	Лог.Информация("Выполняю команду/действие в режиме 1С:Предприятие");

	Если ТолстыйКлиент = Ложь Тогда
		ТонкийКлиент1С = Конфигуратор.ПутьКТонкомуКлиенту1С(Конфигуратор.ПутьКПлатформе1С());
		Конфигуратор.ПутьКПлатформе1С(ТонкийКлиент1С);
	КонецЕсли;

	Конфигуратор.УстановитьПризнакОжиданияВыполненияПрограммы(ОжидатьЗавершения);

	Если Не ОжидатьЗавершения Тогда
		Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(ВременныеФайлы.НовоеИмяФайла());
	КонецЕсли;

	ДополнительныеКлючи = ДополнительныеКлючиЗапуска;
	Если Не ПустаяСтрока(ОбработкаДляЗапуска) Тогда
		ДополнительныеКлючи = "" + ДополнительныеКлючи + " /Execute" 
			+ ФайловыеОперации.ОбернутьПутьВКавычки(ОбработкаДляЗапуска);
	КонецЕсли;

	Лог.Отладка("ДополнительныеКлючи:" + ДополнительныеКлючи);
	Лог.Отладка("ПараметрЗапуска:" + ПараметрЗапуска);

	Попытка
		Конфигуратор.ЗапуститьВРежимеПредприятия(ПараметрЗапуска,
			?(ТипЗнч(ТолстыйКлиент) = Тип("Булево"), Не ТолстыйКлиент, ТолстыйКлиент),
			ДополнительныеКлючи
		);
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;

	Исключение
		ВыводКоманды = Конфигуратор.ВыводКоманды();
		ОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка запуска в режиме предприятия: %1
			|Вывод конфигуратора: %2", 
			ОписаниеОшибки, ВыводКоманды);
	КонецПопытки;

	Лог.Информация("Выполнение команды/действия в режиме 1С:Предприятие завершено.");
КонецПроцедуры

// Выполнить команду/действие в режиме 1С:Предприятия с ожиданием выполнения и чтением лог-файла
//
// Параметры:
//   ПараметрЗапуска - Строка - <описание параметра>
//   ОбработкаДляЗапуска - Строка - <описание параметра>
//   ПутьЛогаВыполненияСценариев - Строка - путь файла информации 1С по ключу "/out".
//   ТолстыйКлиент - Булево, Неопределено - признак запуска толстого клиента
//   ДополнительныеКлючиЗапуска - Строка - <описание параметра>
//   ДопСообщения - Строка - доп. сообщения для вывода
//
// Возвращаемое значение:
//	Строка - лог предприятия
Функция ЗапуститьВРежимеПредприятияСЛогФайлом(Знач ПараметрЗапуска,
										Знач ОбработкаДляЗапуска,
										Знач ПутьЛогаВыполненияСценариев,
										Знач ТолстыйКлиент,
										Знач ДополнительныеКлючиЗапуска,
										Знач ДопСообщения)

	Лог.Информация("Выполняю команду/действие в режиме 1С:Предприятие");

	Результат = "";

	Конфигуратор.УстановитьПризнакОжиданияВыполненияПрограммы(Истина);

	ПутьДамп = ВременныеФайлы.НовоеИмяФайла();
	Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(ПутьДамп);

	ДополнительныеКлючи = ДополнительныеКлючиЗапуска;
	Если Не ПустаяСтрока(ОбработкаДляЗапуска) Тогда
		ДополнительныеКлючи = "" + ДополнительныеКлючи + " /Execute"
			+ ФайловыеОперации.ОбернутьПутьВКавычки(ОбработкаДляЗапуска);
	КонецЕсли;

	Лог.Отладка("ДополнительныеКлючи:" + ДополнительныеКлючи);
	Лог.Отладка("ПараметрЗапуска:" + ПараметрЗапуска);

	ПараметрыСвязиСБазой = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыСвязиСБазой[0] = "ENTERPRISE";
	ПараметрыСвязиСБазой.Удалить(2);

	Если ЗначениеЗаполнено(ПараметрЗапуска) Тогда
		ПараметрыСвязиСБазой.Добавить("/C" + ПараметрЗапуска);
	КонецЕсли;

	Если ТолстыйКлиент = Истина Тогда
		ПараметрыСвязиСБазой.Добавить("/RunModeOrdinaryApplication ");
	КонецЕсли;

	ПараметрыСвязиСБазой.Добавить("/out""" + ПутьДамп + """");

	Если ДополнительныеКлючи <> Неопределено Тогда
		ПараметрыСвязиСБазой.Добавить(ДополнительныеКлючи);
	КонецЕсли;

	СтрокаЗапуска = "";
	Для Каждого Параметр Из ПараметрыСвязиСБазой Цикл
		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
	КонецЦикла;

	Приложение = Конфигуратор.ПутьКТонкомуКлиенту1С();
	Если ТолстыйКлиент = Истина Тогда
		Приложение = Конфигуратор.ПутьКПлатформе1С();
	КонецЕсли;

	Если Найти(Приложение, " ") > 0 Тогда
		Приложение = ФайловыеОперации.ОбернутьПутьВКавычки(Приложение);
	КонецЕсли;
	Приложение = Приложение + " " + СтрокаЗапуска;
	Лог.Отладка(Приложение);

	Попытка

		ПроцессЗапуска = Новый КонтролируемыйПроцесс();
		ЗапускПроцесса = ПроцессЗапуска.ЗапуститьИПодождать(Приложение);
		//ЗапуститьПроцесс1С(Приложение, ПутьЛогаВыполненияСценариев);
		Результат = ПоказатьЛогПредприятия(ПутьДамп, ДопСообщения.ПоказыватьДополнительноЛогПредприятия);

	Исключение

		ОписаниеОшибки = ОписаниеОшибки();
		Результат = ПоказатьЛогПредприятия(ПутьДамп, Истина);
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка запуска процесса для тестирования: %1
			|Лог: %2", ОписаниеОшибки, Результат);
		
	КонецПопытки;

	Лог.Информация("Выполнение команды/действия в режиме 1С:Предприятие завершено.");

	Возврат Результат;

КонецФункции

Процедура ЗапуститьПроцесс1С(Знач СтрокаЗапуска, Знач ПутьКФайлуЛога)

	ПериодОпросаВМиллисекундах = 3000;

	НадоЧитатьЛог = Истина;
	КолСтрокЛогаПрочитано = 0;

	Процесс = СоздатьПроцесс(СтрокаЗапуска);
	Процесс.Запустить();

	ТаймаутПоУмолчанию = 3000;
	Приостановить(ТаймаутПоУмолчанию);

	Пока НЕ Процесс.Завершен Цикл

		Если ПериодОпросаВМиллисекундах <> 0 Тогда
			Приостановить(ПериодОпросаВМиллисекундах);
		КонецЕсли;

		Если НадоЧитатьЛог Тогда
			ВывестиНовыеСообщения(ПутьКФайлуЛога, КолСтрокЛогаПрочитано);
		КонецЕсли;

	КонецЦикла;

	ОсвободитьОбъект(Процесс);
	ВыполнитьСборкуМусора();

КонецПроцедуры

Процедура ВывестиНовыеСообщения(ИмяФайлаЛога, КолСтрокЛогаПрочитано)

	Попытка
		МассивСтрок = ПолучитьНовыеСтрокиЛога(ИмяФайлаЛога, КолСтрокЛогаПрочитано);
		Для Каждого Стр Из МассивСтрок Цикл
			СтрокаЛога = СокрЛП(Стр);			
			Если СтрокаЛога = "" Тогда
				Продолжить;
			КонецЕсли;
			Лог.Информация(СтрокаЛога);
		КонецЦикла;
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Функция ПолучитьНовыеСтрокиЛога(Знач ИмяФайла, КолСтрокЛогаПрочитано)

	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8", , , Ложь);

	ВесьТекст = Текст.Прочитать();

	Текст.Закрыть();

	Массив = Новый Массив();

	МассивСтрок = СтрРазделить(ВесьТекст, Символы.ПС, Истина);
	Если ЗначениеЗаполнено(МассивСтрок) Тогда
		КоличествоМинус1 = МассивСтрок.Количество() - 1;
		Если МассивСтрок[КоличествоМинус1] = "" Тогда
			МассивСтрок.Удалить(КоличествоМинус1);
		КонецЕсли;
	КонецЕсли;

	Для Индекс = (КолСтрокЛогаПрочитано + 1) По МассивСтрок.Количество() Цикл
		Массив.Добавить(МассивСтрок[Индекс - 1]);
	КонецЦикла;

	КолСтрокЛогаПрочитано = МассивСтрок.Количество();

	Возврат Массив;
КонецФункции

Функция ПоказатьЛогПредприятия(Знач ПутьДамп, Знач ПоказыватьДополнительноЛогПредприятия)
	Результат = "";
	Если ФайловыеОперации.ФайлСуществует(ПутьДамп) Тогда
		Результат = ФайловыеОперации.ПрочитатьТекстФайла(ПутьДамп, КодировкаТекста.ANSI);

		Если Не ПустаяСтрока(Результат) Тогда
			Сообщение = СтрШаблон("Дополнительный лог выполнения 1С:Предприятие
			|
			|%1", Результат);
			Если ПоказыватьДополнительноЛогПредприятия Тогда
				Лог.Информация(Сообщение);
			Иначе
				Лог.Отладка(Сообщение);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Лог.Отладка("Не существует файл вывода от 1С - %1", ПутьДамп);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура СоздатьФайлДистрибутива(Знач ИмяФайла, Знач ИмяМакета, Знач Параметры)
	
	Файл = Новый Файл(ИмяФайла);	
	Лог.Информация("Создание файла %1", Файл.Имя);

	ТекстШаблона = ОбщегоНазначения.ПрочитатьДанныеИзМакета(ИмяМакета);
	ТекстШаблона = СтроковыеОперации.ЗаменитьПараметры(ТекстШаблона, Параметры);
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТекстШаблона);
	ТД.Записать(ИмяФайла);

	Лог.Информация("Файл %1 создан", Файл.Имя);

КонецПроцедуры

Процедура СоздатьФайлМанифеста(Знач ИмяФайла, Знач ИнформацияОМетаданных)

	Лог.Информация("Начало создания файла манифеста %1", ИмяФайла);
	
	// BSLLS:LatinAndCyrillicSymbolInWord-off
	// BSLLS:DuplicateStringLiteral-off
	// BSLLS:LineLength-off

	// Генерируем новый файл install.edf
	Версия = ИнформацияОМетаданных.Версия; // "3.1.7.7";
	
	ВерсияПодчеркивания = СтрЗаменить(Версия, ".", "_");
	КаталогСборкиВерсия = ОбъединитьПути(ИнформацияОМетаданных.КаталогСборки, Версия);
	КаталогОбщихФайлов	= ИнформацияОМетаданных.КаталогОбщихФайлов;

	ИмяКаталогаДополнительныхФайлов = "Дополнительные файлы";
	Файл1cv8upd = ОбъединитьПути(КаталогСборкиВерсия, ИмяКаталогаДополнительныхФайлов, "1cv8upd.html");
	ФайлReadMe 	= ОбъединитьПути(КаталогСборкиВерсия, ИмяКаталогаДополнительныхФайлов, "ReadMe.txt");
	ФайлUpdInfo = ОбъединитьПути(КаталогСборкиВерсия, ИмяКаталогаДополнительныхФайлов, "UpdInfo.txt");
	Файл1cv8mft = ОбъединитьПути(КаталогСборкиВерсия, "1Cv8.mft");
	Файл1cv8cfu = ОбъединитьПути(КаталогСборкиВерсия, "1Cv8.cfu");

	Имя 		= СтрокаМанифеста(ИнформацияОМетаданных.Имя);
	Поставщик 	= СтрокаМанифеста(ИнформацияОМетаданных.Поставщик);
	Синоним 	= СтрокаМанифеста(ИнформацияОМетаданных.Синоним);
	Префикс 	= СтрокаМанифеста(ИнформацияОМетаданных.Префикс);	

	// Генерируем новый файл install.edf
	Файл = Новый ТекстовыйДокумент;
	Файл.ДобавитьСтроку("{1,");
	Файл.ДобавитьСтроку("{");
	Файл.ДобавитьСтроку("{1,2,");
	Файл.ДобавитьСтроку("{""en"",""" + Поставщик + """},");
	Файл.ДобавитьСтроку("{""ru"",""" + Поставщик + """}");
	Файл.ДобавитьСтроку("},");
	Файл.ДобавитьСтроку("{1,2,");
	Файл.ДобавитьСтроку("{""en"",""" + Синоним + """},");
	Файл.ДобавитьСтроку("{""ru"",""" + Синоним + """}");
	Файл.ДобавитьСтроку("},");
	Файл.ДобавитьСтроку("{#base64:}");
	Файл.ДобавитьСтроку("},");
	Файл.ДобавитьСтроку("{1,");
	Файл.ДобавитьСтроку("{1,0,""" + Имя + """,""" + Поставщик + """,""" + Версия + """,""SoftOnIT\" + Префикс + "\" + ВерсияПодчеркивания + """,");
	Файл.ДобавитьСтроку("{");
	Файл.ДобавитьСтроку("{""/"",");
	Файл.ДобавитьСтроку("{7,");
	Файл.ДобавитьСтроку("{c61a3081-db7b-4d57-b836-150d73beff1f,""Файл конфигурации"",1,00000000-0000-0000-0000-000000000000,""" + Синоним + ""","""",00000000-0000-0000-0000-000000000000,"""",1,1,1,1},");
	Файл.ДобавитьСтроку("{ed7bf966-330d-46f0-9bf0-57a0db7ecd04,""Файл выгрузки информационной базы"",1,00000000-0000-0000-0000-000000000000,""" + Синоним + " (демо)"","""",00000000-0000-0000-0000-000000000000,"""",0,2,1,1},");
	Файл.ДобавитьСтроку("{a73646ed-6000-4541-b5d7-3b76985639f8,""1cv8upd.html"",0,"""",00000000-0000-0000-0000-000000000000,""" + Файл1cv8upd + """,0,0,0,0},");
	Файл.ДобавитьСтроку("{49e79e4d-ce7d-4197-b966-a5082632a23e,""ReadMe.txt"",0,"""",00000000-0000-0000-0000-000000000000,""" + ФайлReadMe + """,0,0,0,0},");
	Файл.ДобавитьСтроку("{14503a27-1ad8-472e-a13b-2aedfca7e89f,""UpdInfo.txt"",0,"""",00000000-0000-0000-0000-000000000000,""" + ФайлUpdInfo + """,0,0,0,0},");
	Файл.ДобавитьСтроку("{9def14b2-01de-46a0-9550-d509dcf78d74,""1Cv8.cfu"",0,"""",00000000-0000-0000-0000-000000000000,""" + Файл1cv8cfu + """,0,0,0,0},");
	Файл.ДобавитьСтроку("{87728706-8f7f-464d-9ec2-bb85454faa27,""1cv8.mft"",0,"""",00000000-0000-0000-0000-000000000000,""" + Файл1cv8mft + """,0,0,0,0}");
	Файл.ДобавитьСтроку("},");
	Если ЗначениеЗаполнено(КаталогОбщихФайлов) Тогда
		КаталогОбщихФайлов = СтрЗаменить(КаталогОбщихФайлов, """", "");
		КаталогОбщихФайлов = ФайловыеОперации.ДополнитьРазделителемПути(КаталогОбщихФайлов);
		Файл.ДобавитьСтроку("{1,");
		Файл.ДобавитьСтроку("{366f16f3-e8bf-455a-a547-b990015c4a94,""Общие файлы"",00000000-0000-0000-0000-000000000000,""" + КаталогОбщихФайлов + """,""*.*"",1}");
		Файл.ДобавитьСтроку("},");
	Иначе
		Файл.ДобавитьСтроку("{0},");
	КонецЕсли;
	Файл.ДобавитьСтроку("{0}");
	Файл.ДобавитьСтроку("}");
	Файл.ДобавитьСтроку("}");
	Файл.ДобавитьСтроку("}");
	Файл.ДобавитьСтроку("},");
	Файл.ДобавитьСтроку("{0},");
	Файл.ДобавитьСтроку("{2,""Полный"",0,");
	Файл.ДобавитьСтроку("{0},00000000-0000-0000-0000-000000000000,"""",00000000-0000-0000-0000-000000000000,"""",""Обновление"",1,""ru"",a73646ed-6000-4541-b5d7-3b76985639f8,");
	Файл.ДобавитьСтроку("{5,9def14b2-01de-46a0-9550-d509dcf78d74,a73646ed-6000-4541-b5d7-3b76985639f8,49e79e4d-ce7d-4197-b966-a5082632a23e,14503a27-1ad8-472e-a13b-2aedfca7e89f,366f16f3-e8bf-455a-a547-b990015c4a94},00000000-0000-0000-0000-000000000000,"""",00000000-0000-0000-0000-000000000000,""""},");
	Файл.ДобавитьСтроку("{0}");
	Файл.ДобавитьСтроку("}");
	Файл.Записать(ИмяФайла);	

	Лог.Информация("Файл создан");

	// BSLLS:LatinAndCyrillicSymbolInWord-on
	// BSLLS:DuplicateStringLiteral-on
	// BSLLS:LineLength-on

КонецПроцедуры

Функция СтрокаМанифеста(Знач Строка)

	Возврат СтрЗаменить(Строка, """", """""");

КонецФункции

#КонецОбласти

Лог = ПараметрыСистемы.Лог();