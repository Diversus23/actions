#Использовать 1connector

#Область ПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	// Данные для входа
	Команда.Опция("account acc", "",
		"Код вашего аккаунта (совпадает с основным логином) (обязательный)")
		.ТСтрока();
	
	Команда.Опция("apikey a", "",
		"Секретный API-ключ, пользователя SendSay, по которому будет осуществлена авторизация в API (обязательный)")
		.ТСтрока();
	
	// Настройки сохранения шаблона
	Команда.Опция("segment seg", "",
		"Идентификатор сегмента получателей рассылки (обязательный)")
		.ТСтрока();
	
	Команда.Опция("templateid tid", "",
		"Идентификатор шаблона рассылки, который необходимо изменить (обязательный)")
		.ТСтрока();
	
	Команда.Опция("templatename tname", "",
		"Наименование шаблона рассылки (обязательный)")
		.ТСтрока();
	
	// Данные для создания письма
	Команда.Опция("templatehtml html", "",
		"Локальный путь к файлу готового шаблона рассылки в формате HTML и в кодировке UTF-8 (обязательный)")
		.ТСтрока();
	
	Команда.Опция("subject sub", "Тема письма",
		"Тема письма (не обязательный)")
		.ТСтрока();
	
	Команда.Опция("from", "",
		"От имени кого будет отправлено письмо (обязательный)")
		.ТСтрока();
	
	Команда.Опция("email", "",
		"С какого e-mail будет отправлено письмо (обязательный)")
		.ТСтрока();
	
КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров(Команда);
	СозданиеШаблонаРассылки(СтруктураПараметров);
	
КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруПараметров(Знач Команда)
	
	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);
	ВыводОтладочнойИнформации = ЧтениеОпций.ЗначениеОпции("verbose");
	ПараметрыСистемы.УстановитьРежимОтладки(ВыводОтладочнойИнформации);
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Аккаунт", ЧтениеОпций.ЗначениеОпции("account", Истина));
	ПараметрыКоманды.Вставить("КлючAPI", ЧтениеОпций.ЗначениеОпции("apikey", Истина));
	
	ПараметрыКоманды.Вставить("ИдентификаторШаблона", ЧтениеОпций.ЗначениеОпции("templateid", Истина));
	ПараметрыКоманды.Вставить("ИмяШаблона", ЧтениеОпций.ЗначениеОпции("templatename", Истина));
	ПараметрыКоманды.Вставить("ИдентификаторСегмента", ЧтениеОпций.ЗначениеОпции("segment", Истина));
	
	ПараметрыКоманды.Вставить("ПутьКФайлуШаблона", ЧтениеОпций.ЗначениеОпции("templatehtml", Истина));
	Если НЕ ФайловыеОперации.ФайлСуществует(ПараметрыКоманды.ПутьКФайлуШаблона) Тогда
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ф))айл <%1> не существует. Параметр ""--templatehtml""",
			ПараметрыКоманды.ПутьКФайлуШаблона);
	КонецЕсли;
	ПараметрыКоманды.Вставить("Тема", ЧтениеОпций.ЗначениеОпции("subject"));
	ПараметрыКоманды.Вставить("ОтКого", ЧтениеОпций.ЗначениеОпции("from", Истина));
	ПараметрыКоманды.Вставить("Почта", ЧтениеОпций.ЗначениеОпции("email", Истина));
	
	Возврат ПараметрыКоманды;
	
КонецФункции // ПолучитьСтруктуруПараметров()

Процедура СозданиеШаблонаРассылки(Знач Параметры)
	
	Лог = ПараметрыСистемы.Лог();
	Лог.Информация("Получаем html готового шаблона рассылки.");
	
	ТекстHTML = ОбщегоНазначения.ПрочитатьФайл(Параметры.ПутьКФайлуШаблона, КодировкаТекста.UTF8);
	
	Структура = Новый Соответствие;
	Структура.Вставить("subject", Параметры.Тема);
	Структура.Вставить("from.name", Параметры.ОтКого);
	Структура.Вставить("from.email", Параметры.Почта);
	Структура.Вставить("message", Новый Структура("html", ТекстHTML));
	
	СтруктураШаблонаJSON = Новый Структура;
	СтруктураШаблонаJSON.Вставить("name", Параметры.ИмяШаблона);
	СтруктураШаблонаJSON.Вставить("letter", Структура);
	СтруктураШаблонаJSON.Вставить("group", Параметры.ИдентификаторСегмента);
	
	ПараметрыОтправкиJSON = Новый Структура;
	ПараметрыОтправкиJSON.Вставить("apikey", Параметры.КлючAPI);
	
	// Данный метод используется API SendSay для создания или изменения шаблона рассылки.
	ПараметрыОтправкиJSON.Вставить("action", "issue.draft.set");
	ПараметрыОтправкиJSON.Вставить("obj", СтруктураШаблонаJSON);
	ПараметрыОтправкиJSON.Вставить("id", Параметры.ИдентификаторШаблона);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	Лог.Информация("Формируем JSON");
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	ЗаписатьJSON(ЗаписьJSON, ПараметрыОтправкиJSON);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Лог.Информация("Выполняем отправку шаблона рассылки на сервер SendSay");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "text/json; charset=utf-8");
	Ответ = КоннекторHTTP.Post("https://api.sendsay.ru/general/api/v100/json/" + Параметры.Аккаунт, СтрокаJSON,
			Новый Структура("Заголовки", Заголовки));
	
	Если Ответ.КодСостояния = 200 Тогда
		
		Ответ = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если СтрНайти(Ответ, "error") <> 0 Тогда
			ОбщегоНазначения.ЗавершениеРаботыОшибка("Отправка шаблона рассылки прервана - ошибка: %1", Ответ);
		КонецЕсли;
		
		Лог.Информация("Шаблон рассылки УСПЕШНО отправлен на сервер SendSay: %1", Ответ);
	Иначе
		
		Для Каждого Заголовок Из Ответ.Заголовки Цикл
			Лог.Ошибка("Заголовок: %1 %2", Заголовок.Ключ, Заголовок.Значение);
		КонецЦикла;
		
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Ошибка отправки шаблона рассылки на сервер методом POST: %1",
			Ответ.КодСостояния);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции