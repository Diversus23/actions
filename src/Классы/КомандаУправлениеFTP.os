Перем мДействие;
Перем Лог;

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
    
	мДействие = НРег(ИмяКоманды);

	Если мДействие = Перечисления.ДействияСFTP.Отправка Тогда
		ТекстОписаниеКоманды = "Копирование файла на FTP-сервер";
	ИначеЕсли мДействие = Перечисления.ДействияСFTP.Получение Тогда
		ТекстОписаниеКоманды = "Копирование файла с FTP-сервера";
	Иначе
		ВызватьИсключение("Непредусмотренная команда");
	КонецЕсли;
	
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, ТекстОписаниеКоманды);
    Парсер.ДобавитьКоманду(ОписаниеКоманды);

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды,
		"-server",
		"Имя FTP-сервера (обязательный)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды,
		"-login",
		"Логин FTP-сервера (необязательный)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды,
		"-password",
		"Пароль FTP-сервера (необязательный)");

	Если мДействие = Перечисления.ДействияСFTP.Отправка Тогда

		Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды,
			"-local",
			"Имя файла, маски или директория для отправки на сервер на локальном компьютере (обязательный).
			|Пример:
			|* C:\Path\File.txt
			|* C:\Path\*.txt
			|* C:\Path\");

		Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды,
			"-remote",
			"Имя директории на FTP-сервере, куда необходимо сохранить отправляемые файлы (необязательный).
			|Если не указано, то будет сохранено в корень ""/""");

	ИначеЕсли мДействие = Перечисления.ДействияСFTP.Получение Тогда

		Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды,
			"-remote",
			"Имя директории на FTP-сервере, что необходимо получить (обязательный).
			|Если не указано, то будет использован корневой путь ""/""");

		Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды,
			"-mask",
			"Маска файлов для скачивания. Если не указана, то используется маска ""*"" (необязательный).
			|Пример: *.txt");

		Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды,
			"-path",
			"Директория на локальном компьютере куда необходимо загрузить файлы (обязательный).
			|Пример:
			|* C:\Path\File.txt
			|* C:\Path\");

		Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды,
			"-recursive",
			"Флаг рекурсивного копирования файлов с FTP-сервера (необязательный).
			|По умолчанию копирование выполняется только с указанной на сервере директории");
	
	КонецЕсли;

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды,
		"-port",
		"Порт на FTP-сервере (необязательный). Если не указано, то будет использован 21 порт");

КонецПроцедуры

Функция ВыполнитьКоманду(Знач Параметры) Экспорт
    

	Если мДействие = Перечисления.ДействияСFTP.Отправка Тогда
		КодВозврата = ОтправкаНаFTP(Параметры);
	ИначеЕсли мДействие = Перечисления.ДействияСFTP.Получение Тогда
		КодВозврата = ПолучениеСFTP(Параметры);
	КонецЕсли;

    Возврат КодВозврата;
    
КонецФункции

Функция ОтправкаНаFTP(Знач Параметры)

	ВозможныйРезультат = МенеджерКомандПриложения.РезультатыКоманд();
	Лог = ПараметрыСистемы.ПолучитьЛог();

	Возврат ВозможныйРезультат.Успех;

КонецФункции

Функция КонструкторFTP(Знач Параметры)

	Результат = Новый Структура("Сервер, Порт, ИмяПользователя, Пароль");	

	Результат.Сервер = ОбщегоНазначения.ПолучитьОбязательныйПараметр(Параметры, "-server", 
		"Не заполнен параметр ""-server"" - адрес для подключения по FTP");	
	Результат.ИмяПользователя = ОбщегоНазначения.ПолучитьПараметр(Параметры, "-login", "anonymous");
	Результат.Пароль = ОбщегоНазначения.ПолучитьПараметр(Параметры, "-password", "anonymous");
	Результат.Порт = ОбщегоНазначения.ПолучитьПараметрЧисло(Параметры, "-port", 21);

	Возврат Результат;

КонецФункции

Функция ПолучениеСFTP(Знач Параметры)

	ВозможныйРезультат = МенеджерКомандПриложения.РезультатыКоманд();
	Лог = ПараметрыСистемы.ПолучитьЛог();

	Лог.Информация("Начало загрузки файлов с FTP");

	Настройки = КонструкторFTP(Параметры);
	
	мЛокальныйКаталог = ОбщегоНазначения.ПолучитьОбязательныйПараметр(Параметры, "-local", 
		"Не заполнен параметр ""-local"" - локальная директория, куда необходимо сохранить файлы");
	мЛокальныйКаталог = ФайловыеОперации.ДополнитьРазделителемПути(мЛокальныйКаталог);
	мПутьНаСервере = ОбщегоНазначения.ПолучитьПараметр(Параметры, "-remote", "/");
	мМаска = ОбщегоНазначения.ПолучитьПараметр(Параметры, "-mask", "*");
	мРекурсивно = ОбщегоНазначения.ПолучитьПараметрБулево(Параметры, "-recursive", Ложь);

	Попытка
		FTPСоединение = Новый FtpСоединение(Настройки.Сервер, Настройки.Порт, 
			Настройки.ИмяПользователя, Настройки.Пароль,, Истина);
		FTPСоединение.УстановитьТекущийКаталог(мПутьНаСервере);			
		Лог.Информация("Текущий каталог на сервере <" + мПутьНаСервере + ">");		
	Исключение
		Лог.Ошибка("Ошибка подключения к серверу FTP: " + ОписаниеОшибки());
		Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
	КонецПопытки;

	МассивФайлов = FtpСоединение.НайтиФайлы(мПутьНаСервере, мМаска, мРекурсивно);
	Для Каждого Элем Из МассивФайлов Цикл				
		НовыйФайл = Новый Файл(мЛокальныйКаталог + Элем.Имя);
		FtpСоединение.Получить(Элем.ПолноеИмя, НовыйФайл.ПолноеИмя);		
		Лог.Информация("Получен файл <" + НовыйФайл.ПолноеИмя + ">");		
	КонецЦикла;

	Лог.Информация("Завершение загрузки файлов с FTP");	

	Возврат ВозможныйРезультат.Успех;

КонецФункции