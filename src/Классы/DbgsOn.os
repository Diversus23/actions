#Использовать v8runner

#Область ПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт

	ТекстШаблона = "%1 %2";
	ПараметрыОпций = Работа1С.КонструкторDbgsOn();
	Работа1С.ОписаниеКоманды(Команда, ПараметрыОпций);

	Команда.Опция("addr a", "",
		"Адрес сервера отладки. По умолчанию ""127.0.0.1"" (не обязательный)")
		.ТСтрока();

	Текст = СтрШаблон(ТекстШаблона, 
		"Порт сервера отладки. По умолчанию 1550.", 
		"Если порт будет занят, то будет найден свободный порт (не обязательный)");
	Команда.Опция("port p", "", Текст)
		.ТЧисло();	

	Текст = СтрШаблон(ТекстШаблона, 
		"Файл-флаг с результатом запуска dbgs. По умолчанию ""dbgs.json"".",
		"Нужен для последующей остановки сервера отладки (не обязательный)");
	Команда.Опция("file f", "", Текст)
		.ТСтрока();	

	Команда.Опция("processpath", "",
		"Каталог или файл данных о процессе. Если процесс зависнет, то система закроет его (не обязательный)")
		.ТСтрока();

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	Лог = ПараметрыСистемы.Лог();

	Лог.Информация("Старт сервера отладки dbgs");
	Параметры = ПолучитьСтруктуруПараметров(Команда);
	Конфигуратор = Новый УправлениеКонфигуратором();
	Если ЗначениеЗаполнено(Параметры.ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(Параметры.ВерсияПлатформы);
	КонецЕсли;
	Файл = Новый Файл(Конфигуратор.ПутьКПлатформе1С());
	Путь = Файл.Путь;
	ИмяФайлаОтладчика = ОбъединитьПути(Путь, "dbgs");
	Если ПараметрыСистемы.ЭтоWindows Тогда
		ИмяФайлаОтладчика = ИмяФайлаОтладчика + ".exe";
	КонецЕсли;
	
	ТекущийПорт = Параметры.Порт;
	Идентификатор = "";

	Пока Истина Цикл
		ПортСтрокой = Формат(ТекущийПорт, "ЧГ=0");
		Массив = Новый Массив();
		Массив.Добавить("--addr=" + Параметры.Адрес);
		Массив.Добавить("--port=" + ПортСтрокой);

		Если ПараметрыСистемы.ЭтоWindows Тогда
			// Запускаем скрипт PowerShell. Т.к. ЗапуститьПроцесс не заканчивается, если в тестах есть ошибки.
			// Это связано с тем, что в stderr появляется ошибка и она блокирует завершение работы CI.
			// Если же мы запускаем через PowerShell то мы делаем это вне CI/CD.
			ИмяВременногоФайла = ОбъединитьПути(Параметры.КаталогКонтроляОткрытыхПриложений, 
				Строка(Новый УникальныйИдентификатор()) + ".json");
			АргументыЗапуска = СтрСоединить(Массив, " ");
			КомандныйФайл = Новый КонтролируемыйКомандныйФайл();
			КомандныйФайл.УстановитьПриложение("C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe");
			КомандныйФайл.Создать("", ".ps1");		
			ТекстКоманды = СтрШаблон(
				"$ProcessInfo = New-Object System.Diagnostics.ProcessStartInfo;
				|$ProcessInfo.FileName = ""%1"";
				|$ProcessInfo.UseShellExecute = ""false"";
				|$ProcessInfo.Arguments = ""%2"";
				|$Process = New-Object System.Diagnostics.Process;
				|$Process.StartInfo = $ProcessInfo; 
				|$Process.Start() | Out-Null;
				|Start-Sleep 3;
				|$is_run = Get-Process -Id $Process.id -ErrorAction SilentlyContinue
				|if ($is_run){
				|	@{id=$Process.id;command=$ProcessInfo.FileName.ToString() + ' ' + $ProcessInfo.Arguments.ToString()} | ConvertTo-Json | Out-File ""%3"";
				|}
				|", ИмяФайлаОтладчика, АргументыЗапуска, ИмяВременногоФайла);
			КомандныйФайл.ПоказыватьВыводНемедленно(Ложь);
			КомандныйФайл.ДобавитьКоманду(ТекстКоманды);
			Лог.Информация("Попытка запуска сервера отладки dbgs на порту %1", ТекущийПорт);
			КодВозврата = КомандныйФайл.Исполнить();
			Если ФайловыеОперации.ФайлСуществует(ИмяВременногоФайла) Тогда
				ЗапущенныйПроцесс = РаботаJSON.ПрочитатьФайлJSON(ИмяВременногоФайла);
				Идентификатор = ЗапущенныйПроцесс["id"];
				Прервать;
			КонецЕсли;
		Иначе
			Команда = Новый КонтролируемыйПроцесс();
			Команда.УстановитьКаталогКонтроляОткрытыхПриложений(Параметры.КаталогКонтроляОткрытыхПриложений);	
			Команда.УстановитьКоманду(ИмяФайлаОтладчика);
			Команда.ДобавитьПараметры(Массив);
			Команда.ПоказыватьВыводНемедленно(Ложь);
			Команда.ПерехватыватьПотоки(Ложь);
			Процесс = Команда.ЗапуститьПроцесс();
			Идентификатор = Процесс.Идентификатор;
			Лог.Информация("Попытка запуска сервера отладки dbgs PID: %1", Идентификатор);
			ТаймаутПоУмолчанию = 3000;
			Приостановить(ТаймаутПоУмолчанию);		
			Если ЗначениеЗаполнено(Процесс) И Процесс.Завершен = Ложь Тогда
				Прервать;
			КонецЕсли;			
		КонецЕсли;
		ТекущийПорт = ТекущийПорт + 1;	
	КонецЦикла;

	// Пока Истина Цикл
	
	// КонецЦикла;

	ОбщегоНазначения.ЗаписатьНастройкуВФайл(Параметры.ИмяФайла, "port", ТекущийПорт);
	ОбщегоНазначения.ЗаписатьНастройкуВФайл(Параметры.ИмяФайла, "pid", Идентификатор);
	Лог.Информация("Сервер отладки запущен на свободном порту %1 (PID %2)", ТекущийПорт, Идентификатор);
	
КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруПараметров(Знач Команда)
	
	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);
	ВыводОтладочнойИнформации = ЧтениеОпций.ЗначениеОпции("verbose");
	ПараметрыСистемы.УстановитьРежимОтладки(ВыводОтладочнойИнформации);
	
	ПараметрыОпций = Работа1С.КонструкторDbgsOn();
	ПараметрыКоманды = Работа1С.ПрочитатьПараметры(Команда, ПараметрыОпций);

	// BSLLS:UsingHardcodeNetworkAddress-off
	ПараметрыКоманды.Вставить("Адрес", ЧтениеОпций.ЗначениеОпции("addr", Ложь, "127.0.0.1"));
	// BSLLS:UsingHardcodeNetworkAddress-on
	ПараметрыКоманды.Вставить("Порт", ЧтениеОпций.ЗначениеОпции("port"));
	Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.Порт) Тогда
		ПараметрыКоманды.Порт = 1550;
	КонецЕсли;
	Сообщить(ПараметрыКоманды.Порт);
	ИмяФайлаПоУмолчанию = ОбъединитьПути(ОбщегоНазначения.КаталогПроекта(), "dbgs.json");
	ПараметрыКоманды.Вставить("ИмяФайла", ЧтениеОпций.ЗначениеОпции("file", Ложь, ИмяФайлаПоУмолчанию));
	ПараметрыКоманды.Вставить("КаталогКонтроляОткрытыхПриложений", ЧтениеОпций.ЗначениеОпции("processpath"));

	Возврат ПараметрыКоманды;
	
КонецФункции // ПолучитьСтруктуруПараметров()

#КонецОбласти // СлужебныеПроцедурыИФункции