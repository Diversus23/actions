#Использовать v8runner

#Область ПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт

	Команда.Опция("path p", "",
		"Путь где будет осуществлен поиск log-файлов тестирования Vanessa-Automation (обязательный)")
		.ТСтрока();

	Команда.Опция("mask m", "",
		"Маска log-файлов тестирования Vanessa-Automation. По умолчанию ""*.log"" (не обязательный)")
		.ТСтрока();

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	Параметры = ПолучитьСтруктуруПараметров(Команда);

	Лог = ПараметрыСистемы.Лог();
	Лог.Информация("Начало проверки ошибок тестирования Vanessa Automation");

	Файлы = НайтиФайлы(Параметры.Путь, Параметры.Маска, Ложь);
	МассивОшибок = Новый Массив();
	Для Каждого Файл Из Файлы Цикл
		ПроверитьЛогФайл(Файл.ПолноеИмя, МассивОшибок);
	КонецЦикла;

	Если МассивОшибок.Количество() > 0 Тогда
		Лог.Ошибка("Найдены ошибки тестирования:");
		Прочерк = "========================================================================";
		Лог.Информация(Прочерк);
		Для Каждого Стр Из МассивОшибок Цикл
			Лог.Ошибка(Стр);
			Лог.Информация(Прочерк);
		КонецЦикла;
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Найдено ошибок: %1", МассивОшибок.Количество());
	Иначе
		Лог.Информация("Окончание проверки ошибок тестирования Vanessa Automation");
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруПараметров(Знач Команда)
	
	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);
	ВыводОтладочнойИнформации = ЧтениеОпций.ЗначениеОпции("verbose");
	ПараметрыСистемы.УстановитьРежимОтладки(ВыводОтладочнойИнформации);
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("Путь", ЧтениеОпций.ЗначениеОпции("path", Истина));
	ПараметрыКоманды.Вставить("Маска", ЧтениеОпций.ЗначениеОпции("mask", Ложь, "*.log"));
	Если НЕ ФайловыеОперации.КаталогСуществует(ПараметрыКоманды.Путь) Тогда
		ОбщегоНазначения.ЗавершениеРаботыОшибка("Каталог для поиска <%1> не существует",
			ПараметрыКоманды.Путь);
	КонецЕсли;

	Возврат ПараметрыКоманды;
	
КонецФункции // ПолучитьСтруктуруПараметров()

Процедура ПроверитьЛогФайл(Знач ИмяФайла, МассивОшибок)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	СтрокаСОшибкой = "";
	Для Индекс = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Стр = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		Если ПустаяСтрока(Стр) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Стр, "Failed:") Тогда
			СтрокаСОшибкой = СтрокаСОшибкой + Стр + Символы.ПС;
		Иначе			
			Если НЕ ПустаяСтрока(СтрокаСОшибкой) Тогда

				УсловиеПроверки = СтрНачинаетсяС(Стр, "Фича:") 
					ИЛИ СтрНачинаетсяС(Стр, "Feature:") 
					ИЛИ СтрНачинаетсяС(Стр, "Script:")
					ИЛИ СтрНачинаетсяС(Стр, "CheckConfig:");

				Если УсловиеПроверки Тогда
					МассивОшибок.Добавить(СтрокаСОшибкой);
					СтрокаСОшибкой = "";
				Иначе
					СтрокаСОшибкой = СтрокаСОшибкой + Стр + Символы.ПС;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ПустаяСтрока(СтрокаСОшибкой) Тогда
		МассивОшибок.Добавить(СтрокаСОшибкой);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции