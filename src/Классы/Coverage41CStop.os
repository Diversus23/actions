#Использовать 1connector
#Использовать 1commands

#Область ПрограммныйИнтерфейс

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("infobase i", "",
		"Имя информационной базы. По умолчанию DefAlias (не обязательный)")
		.ТСтрока();

	Команда.Опция("debugger u", "",
		"Адрес отладчика. Пример: http://localhost:1550 (обязательный)")
		.ТСтрока();

	Текст = СтрШаблон("%1 %2", 
		"Файл-флаг с результатом запуска. По умолчанию ""cover.json"".",
		"Нужен для последующей остановки приложения (не обязательный)");
	Команда.Опция("file f", "", Текст)
		.ТСтрока();	

	Команда.Опция("processpath", "",
		"Каталог или файл данных о процессе. Если процесс зависнет, то система закроет его (не обязательный)")
		.ТСтрока();

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	Лог = ПараметрыСистемы.Лог();
	Лог.Информация("Остановка Coverage41C");

	Параметры = ПолучитьСтруктуруПараметров(Команда);	
	ПутьКПриложению = ОбщегоНазначения.НайтиПриложениеВСистеме("Coverage41C");
	Если ПараметрыСистемы.ЭтоWindows И НЕ СтрЗаканчиваетсяНа(НРег(ПутьКПриложению), ".bat") Тогда
		ПутьКПриложению = ПутьКПриложению + ".bat";
	КонецЕсли;
	Массив = Новый Массив();
	Массив.Добавить(ФайловыеОперации.ОбернутьПутьВКавычки(ПутьКПриложению));
	Массив.Добавить("stop");
	Массив.Добавить("-i " + ФайловыеОперации.ОбернутьПутьВКавычки(Параметры.ИнформационнаяБаза));
	Массив.Добавить("-u " + ФайловыеОперации.ОбернутьПутьВКавычки(Параметры.Отладчик));
	СтрокаЗапуска = СтрСоединить(Массив, " ");
	// Процесс = СоздатьПроцесс(СтрокаЗапуска, "./", Истина, Истина);
	// Процесс.Запустить();

	НовыйПроцесс = Новый КонтролируемыйПроцесс(Параметры.КаталогКонтроляОткрытыхПриложений);
	РезультатЗапуска = НовыйПроцесс.ЗапуститьИПодождать(СтрокаЗапуска, Ложь);

	ИдентификаторОстановки = РезультатЗапуска.Процесс.Идентификатор;
	ДлительностьМинуты = 120; // 2 минуты
	Настройки = ОбщегоНазначения.ПрочитатьФайлJSON(Параметры.ИмяФайла);
	Идентификатор = Настройки.Получить("pid");
	ВремяНачала = ТекущаяДата();	
	Пока Истина Цикл
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			Процесс = НайтиПроцессПоИдентификатору(Идентификатор);
			Если НЕ ЗначениеЗаполнено(Процесс) Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

		ТаймаутПоУмолчанию = 1000;
		Приостановить(ТаймаутПоУмолчанию);

		Если ВремяНачала - ТекущаяДата() > ДлительностьМинуты Тогда
			Процесс.Завершить();			
			ФайловыеОперации.УдалитьФайлЕслиОнСуществует(Параметры.ИмяФайла);	
			ОбщегоНазначения.ЗавершениеРаботыОшибка("Coverage41C остановлен принудительно. Данные не получены (PID %1)",
				Идентификатор);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Процесс = НайтиПроцессПоИдентификатору(ИдентификаторОстановки);
	Если НЕ ЗначениеЗаполнено(Процесс) Тогда
		Процесс.Завершить();
	КонецЕсли;
	Лог.Предупреждение("Coverage41C успешно закрыт с указанным PID (%1)", Идентификатор);

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруПараметров(Знач Команда)
	
	ЧтениеОпций = Новый ЧтениеОпцийКоманды(Команда);	
	ВыводОтладочнойИнформации = ЧтениеОпций.ЗначениеОпции("verbose");	
	ПараметрыСистемы.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	ПараметрыКоманды = Новый Структура;	
	ПараметрыКоманды.Вставить("ИнформационнаяБаза", ЧтениеОпций.ЗначениеОпции("infobase", Ложь, "DefAlias"));
	ПараметрыКоманды.Вставить("Отладчик", ЧтениеОпций.ЗначениеОпции("debugger", Истина));
	ИмяФайлаПоУмолчанию = ОбъединитьПути(ОбщегоНазначения.КаталогПроекта(), "cover.json");
	ПараметрыКоманды.Вставить("ИмяФайла", ЧтениеОпций.ЗначениеОпции("file", Ложь, ИмяФайлаПоУмолчанию));
	ПараметрыКоманды.Вставить("КаталогКонтроляОткрытыхПриложений", ЧтениеОпций.ЗначениеОпции("processpath"));

	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции