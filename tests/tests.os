#Использовать ".."
#Использовать logos
#Использовать asserts
#Использовать 1commands

// Переменная тестирования
Перем юТест;
// Глобальный лог-файл
Перем Лог;
// Определяем какие тесты можно запускать в облаке, а какие на локальном компьютере.
Перем ЭтоЛокальноеТестирование;
// Путь к статистике
Перем ВключенСборСтатистики;
// Регулярное выражение тестов, которые надо выполнить
Перем РегулярноеВыражениеТестовКоторыеНадоВыполнить;

// BSLLS:LatinAndCyrillicSymbolInWord-off

Процедура Инициализация()

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИмяКомпьютера = ВРег(СистемнаяИнформация.ИмяКомпьютера);
	ЭтоЛокальноеТестирование = ИмяКомпьютера = "SPC" ИЛИ ИмяКомпьютера = "MSI";
	РегулярноеВыражениеТестовКоторыеНадоВыполнить = "";	
	
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт

	ВключенСборСтатистики = АргументыКоманднойСтроки.Количество() = 0;

КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт

	юТест.УдалитьВременныеФайлы();

КонецПроцедуры

Процедура ЯВыполняюКомандуПродуктаCПередачейПараметров(Знач КомандаТестера, Знач ПараметрыКоманды,
		Знач ОжидаемыйКодВозврата = 0, ТекстВывода = "")
	
	Если Лог.Уровень() >= УровниЛога.Отладка Тогда
		юТест.ВключитьОтладкуВЛогахЗапускаемыхСкриптовOnescript();
	КонецЕсли;

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;	
	
	ПутьСтартера = ОбъединитьПути(КаталогИсходников(), "src", "actions.os");
	ФайлСтартера = Новый Файл(ПутьСтартера);
	Ожидаем.Что(ФайлСтартера.Существует(), "Ожидаем, что скрипт-стартер <actions.os> существует, а его нет. "
		+ ФайлСтартера.ПолноеИмя).Равно(Истина);
	
	КомандаДвижка = "oscript";
	Если ЭтоWindows Тогда
		КомандаДвижка = СтрШаблон("%1 %2", КомандаДвижка, "-encoding=utf-8");
	КонецЕсли;
	Если ВключенСборСтатистики = Истина Тогда
		КомандаДвижка = СтрШаблон("%1 %2", КомандаДвижка, ПараметрСтатистикиДляКомандыОСкрипт());
	КонецЕсли;

	СтрокаКоманды = СтрШаблон("%1 %2 %3 %4", КомандаДвижка, ПутьСтартера, КомандаТестера, ПараметрыКоманды);
	
	Команда = Новый Команда;
	
	Команда.УстановитьСтрокуЗапуска(СтрокаКоманды);
	Команда.УстановитьКодировкуВывода(КодировкаТекста.UTF8);
	КодВозврата = Команда.Исполнить();
	ТекстВывода = Команда.ПолучитьВывод();
	
	Лог.Отладка(ТекстВывода);
	
	Если ОжидаемыйКодВозврата <> Неопределено И КодВозврата <> ОжидаемыйКодВозврата
		ИЛИ Лог.Уровень() <= УровниЛога.Отладка Тогда
		ВывестиТекст(ТекстВывода);
		Ожидаем.Что(КодВозврата, "Код возврата в ЯВыполняюКомандуПродуктаCПередачейПараметров")
		.Равно(ОжидаемыйКодВозврата);
	КонецЕсли;
КонецПроцедуры

Функция ПараметрСтатистикиДляКомандыОСкрипт()

	ОбъектКаталогаСтатистики = ОбъединитьПути(ОбщегоНазначения.КаталогПроекта(), "out");
	Если Не ЗначениеЗаполнено(ОбъектКаталогаСтатистики) Тогда
		Возврат "";
	КонецЕсли;

	Ожидаем.Что(ФайловыеОперации.КаталогСуществует(ОбъектКаталогаСтатистики),
	 	"Каталог статистики должен существовать перед выполнения скрипта OneScript").Равно(Истина);

	МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов;
	МенеджерВременныхФайлов.БазовыйКаталог = ОбъектКаталогаСтатистики;
	ИмяФайлаСтатистики = "stat" + Строка(Новый УникальныйИдентификатор()) + ".json";
	ПутьФайлаСтатистики = ОбъединитьПути(ОбъектКаталогаСтатистики, ИмяФайлаСтатистики);

	Возврат СтрШаблон("-codestat=%1", ПутьФайлаСтатистики);
КонецФункции

Процедура ВключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ВыключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Информация);
КонецПроцедуры

Процедура ВывестиТекст(Знач Строка)
	
	Лог.Отладка("");
	Лог.Отладка("  ----------------    ----------------    ----------------  ");
	Лог.Отладка(Строка);
	Лог.Отладка("  ----------------    ----------------    ----------------  ");
	Лог.Отладка("");
	
КонецПроцедуры

Функция КаталогТестовыхФикстур() Экспорт
	Возврат ОбъединитьПути(КаталогТестов(), "fixtures");
КонецФункции

Функция КаталогТестов() Экспорт
	Возврат ОбъединитьПути(КаталогИсходников(), "tests");
КонецФункции

Функция КаталогИсходников() Экспорт
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции

Функция ПолучитьТекстИзФайла(ИмяФайла)
	
	ФайлОбмена = Новый Файл(ИмяФайла);
	Данные = "";
	Если ФайлОбмена.Существует() Тогда
		Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
		Данные = Текст.Прочитать();
		Текст.Закрыть();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Процедура Тест_Должен_Выполнить_Команду_checksum() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "checksum.txt");
	ПутьФайлаТестаВременный = юТест.ИмяВременногоФайла("txt");
	Текст = ПолучитьТекстИзФайла(ПутьФайлаТеста);
	Текст = СтрЗаменить(Текст, Символы.ПС, "");
	Текст = СтрЗаменить(Текст, Символ(10), "");
	Текст = СтрЗаменить(Текст, Символ(13), "");
	Файл = Новый ЗаписьТекста(ПутьФайлаТестаВременный, КодировкаТекста.UTF8, Символы.ПС, Истина, Символы.ПС);
	Файл.Записать(Текст);
	Файл.Закрыть();

	ЯВыполняюКомандуПродуктаCПередачейПараметров("checksum", "--file " + ПутьФайлаТестаВременный);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_checksum_СОшибкой() Экспорт

	ЯВыполняюКомандуПродуктаCПередачейПараметров("checksum", "", 1);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_obfuscation() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "code.os");
	ПутьФайлаТестаВременный = юТест.ИмяВременногоФайла("txt");
	мПараметры = "--in """ + ПутьФайлаТеста + """"
		+ " --out """ + ПутьФайлаТестаВременный + """";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("obfuscation", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_changelog() Экспорт
	
	мПараметры = "";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("changelog", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_changelog_init() Экспорт

	ПутьФайлаТеста = юТест.ИмяВременногоФайла("md");
	мПараметры = "--file """ + ПутьФайлаТеста + """";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("changelog init", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_changelog_txt() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "changelog.md");
	ПутьФайлаТестаРезультат = юТест.ИмяВременногоФайла("txt");
	ПутьФайлаТестаСравнить = ОбъединитьПути(КаталогТестовыхФикстур(), "changelog.txt");
	Команда = "--in ""%1"" --out ""%2"" --format %3";
	мПараметры = СтрШаблон(Команда, ПутьФайлаТеста, ПутьФайлаТестаРезультат, "txt");
	ЯВыполняюКомандуПродуктаCПередачейПараметров("changelog convert", мПараметры);

	Текст1 = ПолучитьТекстИзФайла(ПутьФайлаТестаРезультат);
	Текст2 = ПолучитьТекстИзФайла(ПутьФайлаТестаСравнить);

	Ожидаем.Что(Текст1).Равно(Текст2);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_changelog_htmlfull() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "changelog.md");
	ПутьФайлаТестаРезультат = юТест.ИмяВременногоФайла("txt");
	ПутьФайлаТестаСравнить = ОбъединитьПути(КаталогТестовыхФикстур(), "changelog.full.html");
	Команда = "--in ""%1"" --out ""%2"" --format %3";
	мПараметры = СтрШаблон(Команда, ПутьФайлаТеста, ПутьФайлаТестаРезультат, "htmlfull");
	ЯВыполняюКомандуПродуктаCПередачейПараметров("changelog convert", мПараметры);

	Текст1 = ПолучитьТекстИзФайла(ПутьФайлаТестаРезультат);
	Текст2 = ПолучитьТекстИзФайла(ПутьФайлаТестаСравнить);

	Ожидаем.Что(Текст1).Равно(Текст2);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_changelog_html() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "changelog.md");
	ПутьФайлаТестаРезультат = юТест.ИмяВременногоФайла("html");
	ПутьФайлаТестаСравнить = ОбъединитьПути(КаталогТестовыхФикстур(), "changelog.html");
	Команда = "--in ""%1"" --out ""%2"" --format %3";
	мПараметры = СтрШаблон(Команда, ПутьФайлаТеста, ПутьФайлаТестаРезультат, "html");
	ЯВыполняюКомандуПродуктаCПередачейПараметров("changelog convert", мПараметры);

	Текст1 = ПолучитьТекстИзФайла(ПутьФайлаТестаРезультат);
	Текст2 = ПолучитьТекстИзФайла(ПутьФайлаТестаСравнить);

	Ожидаем.Что(Текст1).Равно(Текст2);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_version() Экспорт

	ЯВыполняюКомандуПродуктаCПередачейПараметров("--version", "");
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_autodoc() Экспорт

	ПутьФайлаТестаРезультат = ОбъединитьПути(КаталогИсходников(), "docs", "COMMAND.md");
	мПараметры = "--file """ + ПутьФайлаТестаРезультат + """";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("autodoc", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_json() Экспорт

	мПараметры = "";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("json", мПараметры);

КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_json_write_string() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "test.json");
	мПараметры = "--file """ + ПутьФайлаТеста + """ --key ""default.test.string"" --string ""Hello world""";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("json write", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_json_write_number() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "test.json");
	мПараметры = "--file """ + ПутьФайлаТеста + """ --key ""default.test.number"" --number 555";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("json write", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_json_write_boolean() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "test.json");
	мПараметры = "--file """ + ПутьФайлаТеста + """ --key ""default.test.boolean"" --boolean true";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("json write", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_ftp_get() Экспорт

	ПутьФайлаТеста = КаталогВременныхФайлов();
	мПараметры = "--path " + ПутьФайлаТеста;
	ЯВыполняюКомандуПродуктаCПередачейПараметров("ftp get", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_infobase_create_file() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогВременныхФайлов(), "test");
	ФайловыеОперации.ОбеспечитьПустойКаталог(ПутьФайлаТеста);
	мПараметры = "--path " + ПутьФайлаТеста;
	ЯВыполняюКомандуПродуктаCПередачейПараметров("infobase create file", мПараметры);

КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_fs() Экспорт

	мПараметры = "";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("fs", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_fs_newtemppath() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогВременныхФайлов(), "test");
	ФайловыеОперации.ОбеспечитьПустойКаталог(ПутьФайлаТеста);
	мПараметры = "--path " + ПутьФайлаТеста;
	ЯВыполняюКомандуПродуктаCПередачейПараметров("fs newtemppath", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_fs_newtempfile() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогВременныхФайлов(), "test");
	мПараметры = "--path " + ПутьФайлаТеста + " --ext txt";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("fs newtempfile", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_fs_delete() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогВременныхФайлов(), "test");
	мПараметры = "--path " + ПутьФайлаТеста;
	ЯВыполняюКомандуПродуктаCПередачейПараметров("fs delete", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_zip() Экспорт

	мПараметры = "";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("zip", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_edt() Экспорт

	мПараметры = "";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("edt", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_edt_export() Экспорт

	мПараметры = "";
	ЯВыполняюКомандуПродуктаCПередачейПараметров("edt export", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_zip_add_ДобавилиОдинФайлВАрхив() Экспорт

	ПутьАрхива = юТест.ИмяВременногоФайла("zip");
	МаскаФайлов = ОбъединитьПути(КаталогТестовыхФикстур(), "changelog.md");
	мПараметры = СтрШаблон("--file ""%1"" --mask ""%2""", ПутьАрхива, МаскаФайлов);
	ЯВыполняюКомандуПродуктаCПередачейПараметров("zip add", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_zip_add_ДобавилиДваФайлаВАрхив() Экспорт

	ПутьАрхива = юТест.ИмяВременногоФайла("zip");
	МаскаФайлов = ОбъединитьПути(КаталогТестовыхФикстур(), "changelog.md") + ";"
		+ ОбъединитьПути(КаталогТестовыхФикстур(), "changelog.txt");
	мПараметры = СтрШаблон("--file ""%1"" --mask ""%2""", ПутьАрхива, МаскаФайлов);
	ЯВыполняюКомандуПродуктаCПередачейПараметров("zip add", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_zip_add_ДобавилиПоМаске() Экспорт

	ПутьАрхива = юТест.ИмяВременногоФайла("zip");
	МаскаФайлов = ОбъединитьПути(КаталогТестовыхФикстур(), "*.html");
	мПараметры = СтрШаблон("--file ""%1"" --mask ""%2""", ПутьАрхива, МаскаФайлов);
	ЯВыполняюКомандуПродуктаCПередачейПараметров("zip add", мПараметры);
	
КонецПроцедуры

Процедура Тест_Должен_Выполнить_Команду_zip_extract() Экспорт

	ПутьАрхива = юТест.ИмяВременногоФайла("zip");
	ДобавляемыеФайлы = ОбъединитьПути(КаталогТестовыхФикстур(), "changelog.html");
	МассивФайлов = Новый Массив();
	МассивФайлов.Добавить(ДобавляемыеФайлы);
	АрхиваторФайлов = Новый Архиватор(ПутьАрхива);
	АрхиваторФайлов.Добавить(МассивФайлов);	
	
	КудаРаспаковать = ОбъединитьПути(КаталогВременныхФайлов(), "folder");
	мПараметры = СтрШаблон("--file ""%1"" --path ""%2""", ПутьАрхива, КудаРаспаковать);
	ЯВыполняюКомандуПродуктаCПередачейПараметров("zip extract", мПараметры);
	
КонецПроцедуры

Процедура ДобавитьТест(СписокТестов, ИмяТеста)
	
	Если НЕ ПустаяСтрока(РегулярноеВыражениеТестовКоторыеНадоВыполнить) Тогда
		МассивПоиска = ОбщегоНазначения.НайтиПоРегулярномуВыражению(ИмяТеста, 
			РегулярноеВыражениеТестовКоторыеНадоВыполнить);
		ТестНайден = МассивПоиска.Количество() > 1;
		Если ТестНайден Тогда
			Лог.Информация("Тест <%1> будет выполнен", ИмяТеста);
		КонецЕсли;
	Иначе
		ТестНайден = Истина;
	КонецЕсли;

	Если ТестНайден Тогда
		СписокТестов.Добавить(ИмяТеста);	
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	юТест = Тестирование;	

	РегулярноеВыражениеТестовКоторыеНадоВыполнить = "";

	СписокТестов = Новый Массив;
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_version");	
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_autodoc");	
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_checksum");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_checksum_СОшибкой");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_changelog");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_changelog_init");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_changelog_txt");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_changelog_html");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_changelog_htmlfull");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_json");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_json_write_string");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_json_write_number");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_json_write_boolean");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_fs");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_fs_newtemppath");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_fs_newtempfile");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_fs_delete");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_zip");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_zip_add_ДобавилиОдинФайлВАрхив");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_zip_add_ДобавилиДваФайлаВАрхив");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_zip_add_ДобавилиПоМаске");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_zip_extract");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_edt");
	ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_edt_export");
	Если ЭтоЛокальноеТестирование Тогда
		ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_ftp_get");
		ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_obfuscation");
		// Написать тест "Тест_Должен_Выполнить_Команду_ftp_put"
		// Написать тест "Тест_Должен_Выполнить_Команду_ftp_delete"
		// Написать тест "Тест_Должен_Выполнить_Команду_infobase_create_file"
		// Написать тест "Тест_Должен_Выполнить_Команду_infobase_create_server"
		// Написать тест "Тест_Должен_Выполнить_Команду_edt_export_xml1c"
		ДобавитьТест(СписокТестов, "Тест_Должен_Выполнить_Команду_infobase_create_file");
	КонецЕсли;
	
	Возврат СписокТестов;
	
КонецФункции

Инициализация();
Лог = Логирование.ПолучитьЛог("actions1c.tests");

Отладка = Ложь;
Если Отладка Тогда
	ВключитьПоказОтладки();
КонецЕсли;

// BSLLS:LatinAndCyrillicSymbolInWord-on