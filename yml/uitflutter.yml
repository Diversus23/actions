# GitLab CI/CD Pipeline –¥–ª—è Flutter –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ macOS Runner
# 
# ‚úÖ –£–ü–†–ê–í–õ–Ø–ï–ú–´–ï PIPELINE –î–õ–Ø –í–ï–¢–ö–ò RELEASE (—á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ):
# - PIPELINE_TYPE="test": prepare ‚Üí test ‚Üí security_scan
# - PIPELINE_TYPE="android_release": build_android_release ‚Üí deploy_google_play ‚Üí notify_success_android  
# - PIPELINE_TYPE="ios_release": build_ios_release ‚Üí deploy_app_store ‚Üí notify_success_ios
# - PIPELINE_TYPE="all_release": build_android_release ‚Üí deploy_google_play ‚Üí build_ios_release ‚Üí deploy_app_store ‚Üí notify_success_all
# 
# ‚úÖ WORKFLOW –î–õ–Ø –í–ï–¢–ö–ò MAIN:
# - prepare ‚Üí test ‚Üí security_scan (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
# - prepare_release, build_dev (manual jobs)
# - –ö–∞–∂–¥—ã–π job –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
# - –ü—Ä–∏ –æ—à–∏–±–∫–µ –ª—é–±–æ–≥–æ job –≤–µ—Å—å pipeline –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
# 
# üìã –°–¢–ê–î–ò–ò:
# - prepare: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# - test: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
# - prepare_release: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ (manual, –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
# - build_android, deploy_android: —Å–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π Android
# - build_ios, deploy_ios: —Å–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π iOS
# - post_deploy: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ä–µ–ª–∏–∑–∞ (manual jobs)
# - notify: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
# 
# üéØ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –ü–û –ü–õ–ê–¢–§–û–†–ú–ê–ú:
# - ANDROID: build_android_release ‚Üí deploy_google_play ‚Üí notify_success_android (–∏–ª–∏ notify_failure_android –ø—Ä–∏ –æ—à–∏–±–∫–µ)
# - iOS: build_ios_release ‚Üí deploy_app_store ‚Üí notify_success_ios (–∏–ª–∏ notify_failure_ios –ø—Ä–∏ –æ—à–∏–±–∫–µ)
# 
# üîê iOS –ü–û–î–ü–ò–°–¨:
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å—å —á–µ—Ä–µ–∑ App Store Connect API
# - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è APPLE_ID, APPLE_APP_ID –∏ FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD
# - –ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ provisioning profiles
# 
# üîê ANDROID –ü–û–î–ü–ò–°–¨:
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å—å —á–µ—Ä–µ–∑ keystore
# - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ANDROID_KEYSTORE_*
# 
# üöÄ –î–ï–ü–õ–û–ô:
# - iOS: TestFlight —á–µ—Ä–µ–∑ fastlane pilot
# - Android: Google Play Production Track —á–µ—Ä–µ–∑ fastlane supply

stages:
  - maintenance  # –°—Ç–∞–¥–∏—è –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  - prepare
  - test
  - prepare_release  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  - build_android
  - deploy_android
  - build_ios
  - deploy_ios
  - post_deploy  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
  - notify

variables:
  FLUTTER_VERSION: "stable"
  # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏
  PUB_CACHE: "$CI_PROJECT_DIR/.pub-cache"
  COCOAPODS_CACHE: "$CI_PROJECT_DIR/.cocoapods-cache"
  LANG: "en_US.UTF-8"
  LC_ALL: "en_US.UTF-8"
  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Git –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–∑ submodules
  GIT_SUBMODULE_STRATEGY: none
  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ shallow clone
  GIT_DEPTH: 50
  
  # –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  SETUP_ENVIRONMENT: &setup_env |
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    git config --global user.name "GitLab CI"
    git config --global user.email "ci@gitlab.com"
    export PATH="$PATH:$HOME/.pub-cache/bin"
    export PATH="$PATH:/opt/homebrew/bin"
  
  FLUTTER_CLEAN_AND_GET: &flutter_clean_get |
    echo "üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Flutter –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    flutter clean
    flutter pub get
  
  IOS_SETUP: &ios_setup |
    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ iOS –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    (cd ios && pod install --repo-update)
    pwd # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
  
  FASTLANE_CHECK: &fastlane_check |
    echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ fastlane..."
    if command -v fastlane &> /dev/null; then 
      echo "‚úÖ Fastlane —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
      fastlane --version
    else 
      echo "‚ùå Fastlane –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
      echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ fastlane –∫–æ–º–∞–Ω–¥–æ–π: brew install fastlane"
      echo "üîó –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.fastlane.tools/getting-started/ios/setup/"
      exit 1
    fi
  
  TELEGRAM_NOTIFICATION: &telegram_notification |
    send_telegram_notification() {
      local message="$1"
      local platform="$2"
      
      echo "üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ($platform)..."
      
      if [ -n "$TELEGRAM_BOT_TOKEN" ]; then
        if [ -n "$TELEGRAM_CHAT_IDS" ]; then
          CHAT_LIST="$TELEGRAM_CHAT_IDS"
          echo "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç—ã: $CHAT_LIST"
          
          IFS=',' read -ra CHAT_ARRAY <<< "$CHAT_LIST"
          SUCCESS_COUNT=0
          TOTAL_COUNT=${#CHAT_ARRAY[@]}
          
          for chat_id in "${CHAT_ARRAY[@]}"; do
            echo "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç: $chat_id"
            RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d chat_id="$chat_id" \
              -d text="$message" \
              -d parse_mode="HTML")
            
            if echo "$RESPONSE" | grep -q '"ok":true'; then
              echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç: $chat_id"
              ((SUCCESS_COUNT++))
            else
              echo "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç $chat_id: $RESPONSE"
            fi
          done
          
          echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: $SUCCESS_COUNT/$TOTAL_COUNT —É—Å–ø–µ—à–Ω–æ"
        else
          echo "‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_CHAT_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
          echo "üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ GitLab CI/CD Settings"
        fi
      else
        echo "‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        echo "üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ GitLab CI/CD Settings"
      fi
    }
  
  CHECK_VARIABLE: &check_variable |
    check_required_variable() {
      local var_name="$1"
      local var_value="$2"
      local help_message="$3"
      
      if [ -z "$var_value" ]; then
        echo "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var_name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        echo "üí° $help_message"
        return 1
      fi
      return 0
    }
  
  GET_VERSION_INFO: &get_version_info |
    get_version_info() {
      VERSION=$(grep "const version = " lib/common/version.dart | cut -d"'" -f2 | tr -d '\r')
      BUILD_VERSION=$(grep "const buildVersion = " lib/common/version.dart | cut -d" " -f4 | cut -d";" -f1 | tr -d '\r')
      echo "–í–µ—Ä—Å–∏—è: $VERSION+$BUILD_VERSION"
    }


# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è macOS (—Ç–æ–ª—å–∫–æ PATH –∏ git config)
.macos_minimal: &macos_minimal
  image: macos-12-xcode-14
  tags:
    - mac
  before_script:
    - *setup_env

# –®–∞–±–ª–æ–Ω –¥–ª—è macOS —Å Flutter –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π (–±–µ–∑ iOS)
.macos_flutter: &macos_flutter
  image: macos-12-xcode-14
  tags:
    - mac
  before_script:
    - *setup_env
    - *flutter_clean_get

# –®–∞–±–ª–æ–Ω –¥–ª—è macOS —Å iOS –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π
.macos_ios: &macos_ios
  image: macos-12-xcode-14
  tags:
    - mac
  before_script:
    - *setup_env
    - *flutter_clean_get
    - *ios_setup

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
prepare:
  <<: *macos_flutter
  stage: prepare
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    - flutter doctor -v
    - flutter pub deps
  artifacts:
    paths:
      - pubspec.lock
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_REF_NAME == "main" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "test"
    - if: $CI_MERGE_REQUEST_ID

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —Ç–µ—Å—Ç—ã
test:
  <<: *macos_minimal
  stage: test
  needs:
    - prepare
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  script:
    - echo "üìä –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞..."
    - flutter analyze --no-fatal-infos
    - echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    - flutter test
    - echo "‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
    - dart format lib/ test/
    - dart format --set-exit-if-changed lib/ test/
  rules:
    - if: $CI_COMMIT_REF_NAME == "main" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "test"
    - if: $CI_MERGE_REQUEST_ID


# –°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–≤–µ—Ç–∫–∞ main) - —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é
build_dev:
  <<: *macos_ios
  stage: prepare
  script:
    - echo "–°–±–æ—Ä–∫–∞ development version..."
    - flutter build apk --debug
    - flutter build ios --debug --no-codesign
  artifacts:
    paths:
      - build/app/outputs/flutter-apk/*-debug.apk
      - build/ios/iphoneos/*.app
    exclude:
      - build/app/outputs/flutter-apk/*-release.apk
      - build/app/outputs/flutter-apk/*-profile.apk
    expire_in: 3 days
  only:
    - main
  when: manual

# –°–±–æ—Ä–∫–∞ Android Release
build_android_release:
  <<: *macos_minimal
  stage: build_android
  allow_failure: false
  before_script:
    - *setup_env
    - *check_variable
    - echo "üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ keystore –¥–ª—è –ø–æ–¥–ø–∏—Å–∏..."
    - |
      check_required_variable "ANDROID_KEYSTORE_BASE64" "$ANDROID_KEYSTORE_BASE64" "–î–æ–±–∞–≤—å—Ç–µ keystore –≤ base64 —Ñ–æ—Ä–º–∞—Ç–µ –≤ GitLab CI/CD Variables. –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/ANDROID_SIGNING_SETUP.md" || exit 1
      check_required_variable "ANDROID_KEYSTORE_PASSWORD" "$ANDROID_KEYSTORE_PASSWORD" "–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å keystore –≤ GitLab CI/CD Variables. –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/ANDROID_SIGNING_SETUP.md" || exit 1
      check_required_variable "ANDROID_KEY_ALIAS" "$ANDROID_KEY_ALIAS" "–î–æ–±–∞–≤—å—Ç–µ –∞–ª–∏–∞—Å –∫–ª—é—á–∞ –≤ GitLab CI/CD Variables. –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/ANDROID_SIGNING_SETUP.md" || exit 1
      check_required_variable "ANDROID_KEY_PASSWORD" "$ANDROID_KEY_PASSWORD" "–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –∫–ª—é—á–∞ –≤ GitLab CI/CD Variables. –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/ANDROID_SIGNING_SETUP.md" || exit 1
      
      echo "‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
      echo "üîß –°–æ–∑–¥–∞–µ–º keystore –∏–∑ base64..."
      mkdir -p android/keystore
      echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/keystore/release.keystore
      chmod 600 android/keystore/release.keystore
      echo "‚úÖ Keystore —Å–æ–∑–¥–∞–Ω"
  script:
    - echo "–°–±–æ—Ä–∫–∞ Android Release..."
    - echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Android signing..."
    - |
      if [ -f "android/keystore/release.keystore" ]; then
        echo "‚úÖ Keystore –Ω–∞–π–¥–µ–Ω, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å..."
        echo "ANDROID_KEYSTORE_PASSWORD: ${ANDROID_KEYSTORE_PASSWORD:+***}"
        echo "ANDROID_KEY_ALIAS: ${ANDROID_KEY_ALIAS:+[–°–ö–†–´–¢–û]}"
        echo "ANDROID_KEY_PASSWORD: ${ANDROID_KEY_PASSWORD:+***}"
      else
        echo "‚ùå Keystore –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        echo "–§–∞–π–ª android/keystore/release.keystore –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ANDROID_KEYSTORE_BASE64 –≤ GitLab CI/CD Variables"
        echo "üìñ –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/ANDROID_SIGNING_SETUP.md"
        echo "‚ö†Ô∏è  –°–±–æ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - –ø–æ–¥–ø–∏—Å—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞!"
        exit 1
      fi
    - flutter build apk --release --split-per-abi
    - flutter build appbundle --release
    - echo "üìä –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:"
    - du -h build/app/outputs/bundle/*.aab 2>/dev/null || echo "AAB —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    - echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ build/app/outputs/bundle/:"
    - ls -la build/app/outputs/bundle/ || echo "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    - echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ build/app/outputs/bundle/release/:"
    - ls -la build/app/outputs/bundle/release/ || echo "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    - echo "üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö AAB —Ñ–∞–π–ª–æ–≤:"
    - find build -name "*.aab" -type f || echo "AAB —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    - echo "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ AAB —Ñ–∞–π–ª–∞..."
    - |
      if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
        if jarsigner -verify -verbose -certs build/app/outputs/bundle/release/app-release.aab 2>/dev/null | grep -q "jar verified"; then
          echo "‚úÖ AAB —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        else
          echo "‚ö†Ô∏è  AAB —Ñ–∞–π–ª –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
          echo "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –≤ GitLab CI/CD Variables"
          echo "üìñ –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/ANDROID_SIGNING_SETUP.md"
        fi
      else
        echo "‚ùå AAB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏"
      fi
  artifacts:
    paths:
      - build/app/outputs/bundle/release/app-release.aab
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "android_release"
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "all_release"

build_ios_release:
  <<: *macos_ios
  stage: build_ios
  allow_failure: false
  needs:
    - job: deploy_google_play
      optional: true
  before_script:
    - *setup_env
    - *flutter_clean_get
    - *ios_setup
    - *check_variable
  script:
    - |
      echo "üì± –°–±–æ—Ä–∫–∞ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è TestFlight..."
      echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä–∫–µ:"
      echo "   –í–µ—Ä—Å–∏—è: $(grep '^version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//')"
      echo "   –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏: $(grep '^version:' pubspec.yaml | sed 's/.*+//')"
      echo "   –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: $(grep 'buildDate' lib/common/version.dart | sed 's/.*buildDate = '\''//' | sed 's/'\'';.*//')"
      echo ""
      echo "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
      check_required_variable "APPLE_ID" "$APPLE_ID" "–î–æ–±–∞–≤—å—Ç–µ APPLE_ID –≤ GitLab CI/CD Variables" || exit 1
      check_required_variable "FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD" "$FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD" "–î–æ–±–∞–≤—å—Ç–µ FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD –≤ GitLab CI/CD Variables" || exit 1
      check_required_variable "IOS_TEAM_ID" "$IOS_TEAM_ID" "–î–æ–±–∞–≤—å—Ç–µ IOS_TEAM_ID –≤ GitLab CI/CD Variables" || exit 1
      echo "‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
      echo "üì± –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–±–æ—Ä–∫–µ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
      echo "üì± –°–±–æ—Ä–∫–∞ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
      # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏ –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏ –∏–∑ pubspec.yaml
      VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//' | sed 's/#.*//' | xargs)
      BUILD_NUMBER=$(grep '^version:' pubspec.yaml | sed 's/.*+//' | sed 's/#.*//' | xargs)
      echo "üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è: $VERSION"
      echo "üìã –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏: $BUILD_NUMBER"
      flutter build ios --release --build-name=$VERSION --build-number=$BUILD_NUMBER
      echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞..."
      cd ios
      xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -archivePath build/Runner.xcarchive -destination generic/platform=iOS archive
      echo "üì§ –≠–∫—Å–ø–æ—Ä—Ç IPA..."
      xcodebuild -exportArchive -archivePath build/Runner.xcarchive -exportOptionsPlist exportOptions.plist -exportPath build/
      cd ..
      echo "‚úÖ iOS —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
      echo "üìä –†–∞–∑–º–µ—Ä IPA: $(find ios/build -name '*.ipa' -exec ls -lh {} \; | awk '{print $5}' | head -n1)" || echo "IPA —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
  artifacts:
    paths:
      - build/ios/iphoneos/*.app
      - build/ios/ipa/*.ipa
      - ios/build/*.ipa
      - ios/build/*.ipa
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "ios_release"
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "all_release"

# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º (—Ä—É—á–Ω–∞—è)
build_all_platforms:
  <<: *macos_ios
  stage: post_deploy
  parallel:
    matrix:
      - PLATFORM: ["android", "ios"]
  script:
    - echo "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è $PLATFORM..."
    - |
      if [ "$PLATFORM" = "android" ]; then
        echo "–°–±–æ—Ä–∫–∞ Android..."
        flutter build apk --release --split-per-abi
        flutter build appbundle --release
      elif [ "$PLATFORM" = "ios" ]; then
        echo "–°–±–æ—Ä–∫–∞ iOS..."
        export DEVELOPER_TEAM_ID="$IOS_TEAM_ID"
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏ –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏ –∏–∑ pubspec.yaml
        VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//' | sed 's/#.*//' | xargs)
        BUILD_NUMBER=$(grep '^version:' pubspec.yaml | sed 's/.*+//' | sed 's/#.*//' | xargs)
        flutter build ios --release --build-name=$VERSION --build-number=$BUILD_NUMBER
        
        # –°–æ–∑–¥–∞–µ–º IPA —Ñ–∞–π–ª
        mkdir -p build/ios/ipa
        APP_FILE=$(find build/ios/iphoneos -name "*.app" -type d | head -n 1)
        if [ -n "$APP_FILE" ]; then
          APP_NAME=$(basename "$APP_FILE")
          IPA_NAME=$(echo "$APP_NAME" | sed 's/\.app$//')
          cd build/ios/iphoneos
          mkdir -p Payload
          cp -R "$APP_NAME" Payload/
          zip -r "../ipa/$IPA_NAME.ipa" Payload/
          rm -rf Payload
          cd ../../..
        fi
      fi
  artifacts:
    paths:
      - build/app/outputs/bundle/release/app-release.aab
      - build/ios/iphoneos/*.app
      - build/ios/ipa/*.ipa
    expire_in: 1 week
  only:
    - release
  when: manual



deploy_google_play:
  <<: *macos_minimal
  stage: deploy_android
  needs:
    - build_android_release
  allow_failure: false
  before_script:
    - *setup_env
    - *fastlane_check
    - *check_variable
  script:
    - |
      echo "\n=== [Google Play Deploy] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ª–∏–∑–∞ ===\n"
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è AAB —Ñ–∞–π–ª–∞
      if [ ! -f "build/app/outputs/bundle/release/app-release.aab" ]; then
        echo "‚ùå AAB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ build/app/outputs/bundle/:"
        ls -la build/app/outputs/bundle/ || echo "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ build/app/outputs/bundle/release/:"
        ls -la build/app/outputs/bundle/release/ || echo "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        echo "üí° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π –≤ Google Play"
        echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–∂–æ–± –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ AAB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
      fi
      
      echo "‚úÖ AAB —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: build/app/outputs/bundle/release/app-release.aab"
      echo "üìä –†–∞–∑–º–µ—Ä AAB —Ñ–∞–π–ª–∞: $(du -h build/app/outputs/bundle/release/app-release.aab | cut -f1)"
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      check_required_variable "GOOGLE_PLAY_SERVICE_ACCOUNT_JSON" "$GOOGLE_PLAY_SERVICE_ACCOUNT_JSON" "–î–æ–±–∞–≤—å—Ç–µ JSON –∫–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ GitLab CI/CD Variables. –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/GOOGLE_PLAY_SETUP.md" || exit 1
      check_required_variable "PACKAGE_NAME" "$PACKAGE_NAME" "–î–æ–±–∞–≤—å—Ç–µ package name –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ GitLab CI/CD Variables. –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/GOOGLE_PLAY_SETUP.md. –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è: com.example.yourapp" || exit 1
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è PACKAGE_NAME —Å applicationId
      # –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Package Name
      EXPECTED_PACKAGE_NAME="com.example.yourapp"
      if [ "$PACKAGE_NAME" != "$EXPECTED_PACKAGE_NAME" ]; then
        echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: PACKAGE_NAME ($PACKAGE_NAME) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å applicationId ($EXPECTED_PACKAGE_NAME)"
        echo "üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ Google Play Console –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Package Name"
        echo "üìñ –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/GOOGLE_PLAY_SETUP.md"
      fi
      
      echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
      echo "üì¶ Package Name: [–°–ö–†–´–¢–û]"
      
      # –°–æ–∑–¥–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥–∏)
      echo "$GOOGLE_PLAY_SERVICE_ACCOUNT_JSON" > google-play-service-account.json 2>/dev/null
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
      if ! jq empty google-play-service-account.json 2>/dev/null; then
        echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ GOOGLE_PLAY_SERVICE_ACCOUNT_JSON!"
        echo "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON –∫–ª—é—á–∞"
        echo "üìñ –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/GOOGLE_PLAY_SETUP.md"
        rm -f google-play-service-account.json
        exit 1
      fi
      
      echo "‚úÖ JSON –∫–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∞–ª–∏–¥–µ–Ω"
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ JSON (–±–µ–∑ –≤—ã–≤–æ–¥–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
      CLIENT_EMAIL=$(jq -r '.client_email' google-play-service-account.json 2>/dev/null)
      PROJECT_ID=$(jq -r '.project_id' google-play-service-account.json 2>/dev/null)
      
      if [ -n "$CLIENT_EMAIL" ] && [ -n "$PROJECT_ID" ]; then
        echo "‚úÖ –°–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
      else
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –∫–ª—é—á–∞"
        rm -f google-play-service-account.json
        exit 1
      fi
      
      echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å .aab —Ñ–∞–π–ª–∞–º–∏:"
      ls -la build/app/outputs/bundle/release/
      
      echo "üöÄ –ó–∞–ø—É—Å–∫ fastlane supply (–∑–∞–≥—Ä—É–∑–∫–∞ .aab –Ω–∞ Production Track)..."
      
      # –ó–∞–ø—É—Å–∫ fastlane –¥–ª—è production —Ç—Ä–µ–∫–∞ (–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–∞)
      echo "üì± –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Production Track (–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–∞)..."
      if fastlane supply \
        --aab build/app/outputs/bundle/release/app-release.aab \
        --package_name "$PACKAGE_NAME" \
        --json_key google-play-service-account.json \
        --track production \
        --skip_upload_metadata true \
        --skip_upload_images true \
        --skip_upload_screenshots true \
        --skip_upload_changelogs true \
        --validate_only false \
        --release_status draft; then
        echo "‚úÖ fastlane supply –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ. .aab –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Production Track."
        echo "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ –≥–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        echo "üí° –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Google Play Console ‚Üí Production"
      else
        echo "‚ùå –û–®–ò–ë–ö–ê: fastlane supply –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!"
        echo "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
        echo "   - –ù–µ–≤–µ—Ä–Ω—ã–π JSON –∫–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
        echo "   - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –≤ Google Play Console"
        echo "   - –ù–µ–≤–µ—Ä–Ω—ã–π Package Name"
        echo "   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Google"
        echo "üìñ –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/GOOGLE_PLAY_SETUP.md"
        rm -f google-play-service-account.json
        exit 1
      fi
      
      # –û—á–∏—Å—Ç–∫–∞
      rm -f google-play-service-account.json
      
      echo "\n=== [Google Play Deploy] –ó–∞–≤–µ—Ä—à–µ–Ω–æ ===\n"
  rules:
    - if: $CI_COMMIT_REF_NAME == "release" && ($PIPELINE_TYPE == "android_release" || $PIPELINE_TYPE == "all_release")
      allow_failure: false

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ–± —É—Å–ø–µ—à–Ω–æ–º Android —Ä–µ–ª–∏–∑–µ
notify_success_android:
  <<: *macos_minimal
  stage: notify
  needs:
    - deploy_google_play
  script:
    - *get_version_info
    - *telegram_notification
    - |
      get_version_info
      MESSAGE="‚úÖ Android —Ä–µ–ª–∏–∑ $VERSION+$BUILD_VERSION —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!%0A%0Aü§ñ –í–µ—Ç–∫–∞: $CI_COMMIT_REF_NAME%0Aüì± –ö–æ–º–º–∏—Ç: $CI_COMMIT_SHA%0Aüë§ –ê–≤—Ç–æ—Ä: $GITLAB_USER_NAME%0A%0Aü§ñ Android: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Google Play Production Track"
      send_telegram_notification "$MESSAGE" "Android —Ä–µ–ª–∏–∑"
  rules:
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "android_release"
  allow_failure: true

deploy_app_store:
  <<: *macos_minimal
  stage: deploy_ios
  needs:
    - build_ios_release
  allow_failure: false
  before_script:
    - *setup_env
    - *fastlane_check
    - *check_variable
  script:
    - |
      echo "\n=== [App Store Deploy] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ TestFlight ===\n"
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è IPA —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∏–∂–µ
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      check_required_variable "APPLE_ID" "$APPLE_ID" "–î–æ–±–∞–≤—å—Ç–µ APPLE_ID –≤ GitLab CI/CD Variables. –ü—Ä–∏–º–µ—Ä: your-apple-id@example.com" || exit 1
      check_required_variable "FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD" "$FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD" "–î–æ–±–∞–≤—å—Ç–µ FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD –≤ GitLab CI/CD Variables. –ü—Ä–∏–º–µ—Ä: xxxx-xxxx-xxxx-xxxx" || exit 1
      check_required_variable "APPLE_APP_ID" "$APPLE_APP_ID" "–î–æ–±–∞–≤—å—Ç–µ APPLE_APP_ID (—á–∏—Å–ª–æ–≤–æ–π ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è) –≤ GitLab CI/CD Variables. –ü—Ä–∏–º–µ—Ä: 1234567890" || exit 1
      
      echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
      echo "üçé Apple ID: [–°–ö–†–´–¢–û]"
      echo "üì± Apple App ID: [–°–ö–†–´–¢–û]"
      echo "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ fastlane..."
      echo "   FASTLANE_USER: ${FASTLANE_USER:+[–£–°–¢–ê–ù–û–í–õ–ï–ù]}"
      echo "   FASTLANE_PASSWORD: ${FASTLANE_PASSWORD:+[–£–°–¢–ê–ù–û–í–õ–ï–ù]}"
      echo "   FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD:+[–£–°–¢–ê–ù–û–í–õ–ï–ù]}"
      echo "   SPACESHIP_ONLY_ALLOW_INTERACTIVE_2FA: ${SPACESHIP_ONLY_ALLOW_INTERACTIVE_2FA:+[–£–°–¢–ê–ù–û–í–õ–ï–ù]}"
      
      echo "üöÄ –ó–∞–ø—É—Å–∫ fastlane pilot (–∑–∞–≥—Ä—É–∑–∫–∞ –≤ TestFlight)..."
      
      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è fastlane
      export FASTLANE_USER="$APPLE_ID"
      export FASTLANE_PASSWORD="$FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"
      export FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD="$FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"
      export SPACESHIP_ONLY_ALLOW_INTERACTIVE_2FA=true
      export FASTLANE_SKIP_UPDATE_CHECK=true
      export FASTLANE_HIDE_CHANGELOG=true
      export FASTLANE_DISABLE_COLORS=true
      
      # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ fastlane –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      mkdir -p ~/.fastlane
      cat > ~/.fastlane/env << EOF
      FASTLANE_USER="$APPLE_ID"
      FASTLANE_PASSWORD="$FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"
      FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD="$FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"
      SPACESHIP_ONLY_ALLOW_INTERACTIVE_2FA=true
      FASTLANE_SKIP_UPDATE_CHECK=true
      FASTLANE_HIDE_CHANGELOG=true
      FASTLANE_DISABLE_COLORS=true
      EOF
      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏
      chmod 600 ~/.fastlane/env
      
      # –ü–æ–∏—Å–∫ IPA —Ñ–∞–π–ª–∞
      IPA_FILE=""
      # –ò—â–µ–º –ª—é–±–æ–π IPA —Ñ–∞–π–ª –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
      if [ -n "$(find ios/build -name '*.ipa' -type f 2>/dev/null)" ]; then
        IPA_FILE="$(find ios/build -name '*.ipa' -type f | head -n 1)"
      elif [ -n "$(find build/ios/ipa -name '*.ipa' -type f 2>/dev/null)" ]; then
        IPA_FILE="$(find build/ios/ipa -name '*.ipa' -type f | head -n 1)"
      elif [ -f "build/ios/ipa/Runner.ipa" ]; then
        IPA_FILE="build/ios/ipa/Runner.ipa"
      else
        echo "‚ùå IPA —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Å—Ç!"
        echo "üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö IPA —Ñ–∞–π–ª–æ–≤:"
        find . -name "*.ipa" -type f 2>/dev/null || echo "IPA —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        exit 1
      fi
      
      echo "‚úÖ –ù–∞–π–¥–µ–Ω IPA —Ñ–∞–π–ª: $IPA_FILE"
      echo "üìä –†–∞–∑–º–µ—Ä IPA —Ñ–∞–π–ª–∞: $(du -h $IPA_FILE | cut -f1)"
      
      # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
      echo "üîê –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:"
      echo "   APPLE_ID: ${APPLE_ID:+[–£–°–¢–ê–ù–û–í–õ–ï–ù]}"
      echo "   APPLE_APP_ID: ${APPLE_APP_ID:+[–£–°–¢–ê–ù–û–í–õ–ï–ù]}"
      echo "   FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD:+[–£–°–¢–ê–ù–û–í–õ–ï–ù]}"
      echo "   FASTLANE_USER: ${FASTLANE_USER:+[–£–°–¢–ê–ù–û–í–õ–ï–ù]}"
      echo "   FASTLANE_PASSWORD: ${FASTLANE_PASSWORD:+[–£–°–¢–ê–ù–û–í–õ–ï–ù]}"
      echo "   SPACESHIP_ONLY_ALLOW_INTERACTIVE_2FA: ${SPACESHIP_ONLY_ALLOW_INTERACTIVE_2FA:+[–£–°–¢–ê–ù–û–í–õ–ï–ù]}"
      
      # –ó–∞–ø—É—Å–∫ fastlane pilot –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ TestFlight
      if fastlane pilot upload \
        --ipa "$IPA_FILE" \
        --username "$APPLE_ID" \
        --apple_id "$APPLE_APP_ID" \
        --skip_waiting_for_build_processing true \
        --skip_submission true \
        --distribute_external false; then
        echo "‚úÖ fastlane pilot –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ. IPA –∑–∞–≥—Ä—É–∂–µ–Ω –≤ TestFlight."
        echo "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ TestFlight –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
      else
        echo "‚ùå –û–®–ò–ë–ö–ê: fastlane pilot –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!"
        echo "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
        echo "   - –ù–µ–≤–µ—Ä–Ω—ã–π Apple ID –∏–ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        echo "   - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –≤ App Store Connect"
        echo "   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–ø–∏—Å—å—é –∫–æ–¥–∞"
        echo "   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Apple"
        echo "üìñ –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/APP_STORE_SETUP.md"
        exit 1
      fi
      
      # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏
      rm -f ~/.fastlane/env
      
      echo "\n=== [App Store Deploy] –ó–∞–≤–µ—Ä—à–µ–Ω–æ ===\n"
  rules:
    - if: $CI_COMMIT_REF_NAME == "release" && ($PIPELINE_TYPE == "ios_release" || $PIPELINE_TYPE == "all_release")
      allow_failure: false

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ–± —É—Å–ø–µ—à–Ω–æ–º iOS —Ä–µ–ª–∏–∑–µ
notify_success_ios:
  <<: *macos_minimal
  stage: notify
  needs:
    - deploy_app_store
  script:
    - *get_version_info
    - *telegram_notification
    - |
      get_version_info
      MESSAGE="‚úÖ iOS —Ä–µ–ª–∏–∑ $VERSION+$BUILD_VERSION —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!%0A%0Aü§ñ –í–µ—Ç–∫–∞: $CI_COMMIT_REF_NAME%0Aüì± –ö–æ–º–º–∏—Ç: $CI_COMMIT_SHA%0Aüë§ –ê–≤—Ç–æ—Ä: $GITLAB_USER_NAME%0A%0Aüçé iOS: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ TestFlight –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
      send_telegram_notification "$MESSAGE" "iOS —Ä–µ–ª–∏–∑"
  rules:
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "ios_release"
  allow_failure: true

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
update_version:
  <<: *macos_ios
  stage: prepare
  script:
    - echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏..."
    - chmod +x scripts/update_version.sh
    - ./scripts/update_version.sh
    - |
      # –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–µ—Ä—Å–∏–∏
      if [ -n "$(git status --porcelain)" ]; then
        git config user.name "GitLab CI"
        git config user.email "ci@gitlab.com"
        git add lib/common/version.dart pubspec.yaml
        git commit -m "ci: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏ –¥–∞—Ç—ã —Å–±–æ—Ä–∫–∏ [skip ci]"
        git push origin $CI_COMMIT_REF_NAME
      fi
  only:
    - release
  when: manual

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ –∫–µ—à–∞
cleanup:
  <<: *macos_ios
  stage: maintenance  # –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ —Å—Ç–∞–¥–∏—é maintenance –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  script:
    - echo "üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã..."
    - echo "–î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –¥–æ –æ—á–∏—Å—Ç–∫–∏:"
    - df -h /
    
    - echo "üìä –†–∞–∑–º–µ—Ä—ã –∫–µ—à–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏:"
    - du -sh $PUB_CACHE || echo "PUB_CACHE –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    - du -sh $COCOAPODS_CACHE || echo "COCOAPODS_CACHE –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    - du -sh build/ || echo "build/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    - du -sh ios/Pods/ || echo "ios/Pods/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    - du -sh ~/Library/Developer/Xcode/DerivedData/ || echo "DerivedData –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    - echo "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    - flutter clean
    - cd ios && pod cache clean --all && cd ..
    
    - echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–µ—à–µ–π..."
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Flutter
    - pkill -f "flutter" || true
    - pkill -f "dart" || true
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    - |
      remove_with_retry() {
        local path="$1"
        local max_attempts=3
        local attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "–ü–æ–ø—ã—Ç–∫–∞ $attempt –∏–∑ $max_attempts —É–¥–∞–ª–∏—Ç—å $path"
          
          if [ ! -e "$path" ]; then
            echo "‚úÖ –ü—É—Ç—å $path –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
            return 0
          fi
          
          if rm -rf "$path" 2>/dev/null; then
            echo "‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: $path"
            return 0
          else
            echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ $path"
            if [ $attempt -lt $max_attempts ]; then
              echo "–û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π..."
              sleep 5
            fi
          fi
          
          attempt=$((attempt + 1))
        done
        
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å $path –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
        return 1
      }
      
      # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      remove_with_retry "build/" || true
      remove_with_retry "$PUB_CACHE" || true
      remove_with_retry "$COCOAPODS_CACHE" || true
      remove_with_retry "ios/Pods/" || true
      remove_with_retry ~/Library/Developer/Xcode/DerivedData/ || true
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:"
      for path in "build/" "$PUB_CACHE" "$COCOAPODS_CACHE" "ios/Pods/"; do
        if [ -e "$path" ]; then
          echo "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: $path –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else
          echo "‚úÖ $path —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        fi
      done
    
    - echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    - echo "üìä –î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:"
    - df -h /
    - echo "üí° –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"
  when: manual
  allow_failure: true

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_scan:
  <<: *macos_minimal
  stage: test
  needs:
    - test
  script:
    - dart run dependency_validator
  rules:
    - if: $CI_COMMIT_REF_NAME == "main" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "test"
    - if: $CI_MERGE_REQUEST_ID



# –†—É—á–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è changelog
prepare_release:
  <<: *macos_minimal
  stage: prepare_release
  variables:
    GIT_STRATEGY: clone
  before_script:
    - *setup_env
    - *check_variable
  script:
    - |
      echo "üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Makefile..."
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è PAT –¥–ª—è push –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      check_required_variable "GITLAB_PAT" "$GITLAB_PAT" "–°–æ–∑–¥–∞–π—Ç–µ Personal Access Token —Å –ø—Ä–∞–≤–∞–º–∏ write_repository –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ CI/CD Variables –∫–∞–∫ GITLAB_PAT" || exit 1
      
      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –∏ push
      git config --global user.name "GitLab CI"
      git config --global user.email "ci@${CI_SERVER_HOST}"
      git remote set-url origin "https://oauth2:${GITLAB_PAT}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
      
      # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Ä–µ–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Makefile
      echo "üöÄ –ó–∞–ø—É—Å–∫ make prepare-release..."
      make prepare-release
      
      # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
      echo "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏..."
      # –í–ù–ò–ú–ê–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ
      git add pubspec.yaml lib/common/version.dart assets/changelog/changelog.html lib/feature/presentation/screen/splash_screen/bloc/splash_bloc.dart
      
      if ! git commit -m "release: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫ —Ä–µ–ª–∏–∑—É [skip ci]"; then
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞"
        exit 1
      fi
      
      # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      echo "üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
      if ! git push origin HEAD:main; then
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
        exit 1
      fi
      
      echo "‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
  artifacts:
    when: always
    paths:
      - pubspec.yaml
      - lib/common/version.dart
      - assets/changelog/changelog.html
    expire_in: 1 week
  only:
    - main
  when: manual

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ–± –æ—à–∏–±–∫–µ Android —Ä–µ–ª–∏–∑–∞
notify_failure_android:
  <<: *macos_minimal
  stage: notify
  script:
    - *telegram_notification
    - |
      MESSAGE="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Android —Ä–µ–ª–∏–∑–∞!%0A%0Aü§ñ –í–µ—Ç–∫–∞: $CI_COMMIT_REF_NAME%0Aüì± –ö–æ–º–º–∏—Ç: $CI_COMMIT_SHA%0Aüë§ –ê–≤—Ç–æ—Ä: $GITLAB_USER_NAME%0A%0Aü§ñ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Android%0Aüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ pipeline: $CI_PIPELINE_URL"
      send_telegram_notification "$MESSAGE" "–æ—à–∏–±–∫–∞ Android —Ä–µ–ª–∏–∑–∞"
  rules:
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "android_release"
      when: on_failure
  allow_failure: true

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ–± –æ—à–∏–±–∫–µ iOS —Ä–µ–ª–∏–∑–∞
notify_failure_ios:
  <<: *macos_minimal
  stage: notify
  script:
    - *telegram_notification
    - |
      MESSAGE="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ iOS —Ä–µ–ª–∏–∑–∞!%0A%0Aü§ñ –í–µ—Ç–∫–∞: $CI_COMMIT_REF_NAME%0Aüì± –ö–æ–º–º–∏—Ç: $CI_COMMIT_SHA%0Aüë§ –ê–≤—Ç–æ—Ä: $GITLAB_USER_NAME%0A%0Aüçé –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: iOS%0Aüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ pipeline: $CI_PIPELINE_URL"
      send_telegram_notification "$MESSAGE" "–æ—à–∏–±–∫–∞ iOS —Ä–µ–ª–∏–∑–∞"
  rules:
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "ios_release"
      when: on_failure
  allow_failure: true

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ–± —É—Å–ø–µ—à–Ω–æ–º All Release (Android + iOS)
notify_success_all:
  <<: *macos_minimal
  stage: notify
  needs:
    - deploy_app_store
  script:
    - *get_version_info
    - *telegram_notification
    - |
      get_version_info
      MESSAGE="‚úÖ All Release $VERSION+$BUILD_VERSION —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!%0A%0Aü§ñ –í–µ—Ç–∫–∞: $CI_COMMIT_REF_NAME%0Aüì± –ö–æ–º–º–∏—Ç: $CI_COMMIT_SHA%0Aüë§ –ê–≤—Ç–æ—Ä: $GITLAB_USER_NAME%0A%0Aü§ñ Android: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Google Play Production Track%0Aüçé iOS: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ TestFlight –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è%0A%0AüöÄ –û–±–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!"
      send_telegram_notification "$MESSAGE" "All Release - Android + iOS"
  rules:
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "all_release"
  allow_failure: true

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ–± –æ—à–∏–±–∫–µ All Release
notify_failure_all:
  <<: *macos_minimal
  stage: notify
  script:
    - *telegram_notification
    - |
      MESSAGE="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ All Release!%0A%0Aü§ñ –í–µ—Ç–∫–∞: $CI_COMMIT_REF_NAME%0Aüì± –ö–æ–º–º–∏—Ç: $CI_COMMIT_SHA%0Aüë§ –ê–≤—Ç–æ—Ä: $GITLAB_USER_NAME%0A%0AüîÑ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: Android + iOS%0Aüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ pipeline: $CI_PIPELINE_URL"
      send_telegram_notification "$MESSAGE" "–æ—à–∏–±–∫–∞ All Release"
  rules:
    - if: $CI_COMMIT_REF_NAME == "release" && $PIPELINE_TYPE == "all_release"
      when: on_failure
  allow_failure: true 