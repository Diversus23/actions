# Основной yml-файл для сборки конфигураций на платформе 1С.

stages:
  - Подготовка
  # + Скачивание actions
  # - Защита конфигурации (только для УИТ, возможно еще для чего-нибудь) (релиз)
  - Сборка
  # - Создание пустой базы
  # - Выгрузка из EDT исходников в XML 1C
  # - Загрузка исходников XML в пустую базу
  # - Выгрузка из EDT исходников расширений в XML 1C
  # - Загрузка расширений в базу
  # - Копирование базы в каталог конвеера
  - Тестирование
  # - Проверка конфигурации средствами платформы
  # - В базе тестов проставляем теги для тестов для выполнения конвеера
  # - Выполняем тесты для ветки
  # - Выполняем дымовые тесты
  # - Выполняем основные тесты
  - Сонар
  # - Анализ работы в сонаре
  # - Отчет Allure
  # - Полнота дымовых тестов для вливаемых веток
  - Развертывание
  # - Отправка новостей об обновлении на сайт
  # - Обновление на сайте спецификаций API
  # - Сборка дистрибутива
  # - Отправление дистрибутива в облако S3
  # - Обновление эталонной базы
  - Завершение
  # - Удаление старых баз в конвеере

# Переменные для работы
variables:
  # Поверхностное клонирование репозитория https://docs.gitlab.com/ee/ci/large_repositories/.
  GIT_DEPTH: 10
  # Использовать быстрое сжатие.
  FF_USE_FASTZIP: "true"
  # Сжатие артефактов выше среднего.
  ARTIFACT_COMPRESSION_LEVEL: "fast" 
  # Сжатие кэша быстрое.
  CACHE_COMPRESSION_LEVEL: "fast"
  # Сколько нодов использовать для распаралеливаемых работ
  # Внутри джобов с инструкцией parallels можно использовать CI_NODE_INDEX и CI_NODE_TOTAL
  # См. https://habr.com/ru/companies/tinkoff/articles/662069/
  USE_NODES: 3
  # Для сокращения описания переменная
  ACTIONS: '-encoding=utf-8 "$CI_PROJECT_DIR\actions\src\actions.os"'

# Настройки по умолчанию для всех job-ов.
default:
  # Все jobs прерываемые, если будут изменения в текущей ветке, то текущее задание будет прервано и начнется новое.
  interruptible: true

# Всегда выполняется перед стартом по умолчанию для всех job-ов.
before_script:
  - chcp 65001
  - echo "$CI_PROJECT_DIR"
  - git config --local core.quotepath false;  
  - if (Test-Path "$CI_PROJECT_DIR\actions") { Remove-item "$CI_PROJECT_DIR\actions" -recurse -force }
  - git clone https://github.com/Diversus23/actions.git

# Только для проекта Управление IT-отделом 8
Защита конфигурации:
  stage: Подготовка
  artifacts:
    name: "СЛС"
    paths: ['$CI_PROJECT_DIR\it\src\CommonModules\СЛС\Module.bsl']
    expire_in: 1 day
  script:
    # Проверим необходимо ли обфусцировать защищенный модуль (файл существует и ветка мастер).
    - $SLS_EXISTS = oscript -encoding=utf-8 "$CI_PROJECT_DIR\actions\src\actions.os" fs fileexists --file "$CI_PROJECT_DIR\it\src\CommonModules\СЛС\Module.bsl"
    - $NEED_OBFUSCATE = (($SLS_EXISTS -eq '1') && (($CI_COMMIT_BRANCH -eq 'master') -or ($CI_COMMIT_REF_NAME -eq 'master') -or ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME -eq 'master')))
    - echo "Модуль СЛС обфусцирован = $NEED_OBFUSCATE"
    - if ($NEED_OBFUSCATE -eq $true) 
        { 
          oscript -encoding=utf-8 "$CI_PROJECT_DIR\actions\src\actions.os" obfuscation --in "$CI_PROJECT_DIR\it\src\CommonModules\СЛС\Module.bsl" --apikey $NETLENKA_APIKEY
        }
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" && $CI_PROJECT_NAME == "it"'
    - if: '$CI_COMMIT_REF_NAME == "master" && $CI_PROJECT_NAME == "it"'

Сборка базы:
  stage: Сборка
  script:
    # Создадим пустую базу / возьмем эталонную
    - oscript $ACTIONS fs newpath --path "$CI_PROJECT_DIR\build" --clear
    - oscript $ACTIONS infobase create file --path "$CI_PROJECT_DIR\build\base"
    # Конвертация проекта EDT в XML 1C
    - oscript $ACTIONS fs newpath --path "$CI_PROJECT_DIR\workspace" --clear
    - oscript $ACTIONS edt srctoxml --project "$CI_PROJECT_DIR\$CI_PROJECT_NAME" --path "$CI_PROJECT_DIR\build\config" --workspace "$CI_PROJECT_DIR\workspace"
    # Загрузка исходников XML 1C в информационную базу
    - oscript $ACTIONS infobase configloadfromxml --path "$CI_PROJECT_DIR\$CI_PROJECT_NAME" --path "$CI_PROJECT_DIR\build\config" --connection /S$CI_PROJECT_DIR\build\base
    # Создадим серверную базу для этой сборки
  only:
    refs:
      - develop
      - master
      - main
      - merge_requests

Тесты ветки:
  stage: Тестирование
  parallel: 3
  script:
    - echo "Основные тесты"
    - echo $CI_NODE_INDEX
  only:
    refs:
      - develop
      - merge_requests      

Дымовые тесты:
  stage: Тестирование
  parallel: 3
  script:
    - echo "Дымовые тесты "
    - echo $CI_NODE_INDEX
  only:
    refs:
      - develop
      - merge_requests

Основные тесты:
  stage: Тестирование
  parallel: 3
  script:
    - echo "Основные тесты"
    - echo $CI_NODE_INDEX
  only:
    refs:
      - develop
      - merge_requests

SonarQube:
  stage: Сонар
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"  
  cache:
    key: "$CI_PROJECT_NAME-SONAR_CACHE"
    paths:
      - .sonar/cache
  script:
    - echo "Основные тесты"
    - echo $CI_NODE_INDEX
  only:
    refs:
      - develop
      - merge_requests      

Развертывание:
  stage: Развертывание
  script:
    - echo "Развертывание"
  only:
    refs:
      - master
      - main
      - merge_requests    

Удаление старых баз конвеера:
  stage: Завершение
  script:
    - echo "Завершение"
  only:
    refs:
      - master
      - main
      - merge_requests    
