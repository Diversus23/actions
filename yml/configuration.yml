# Основной yml-файл для сборки конфигураций на платформе 1С.
# В основной сборке использовать вот этот код:
# =============
# include:
#   - remote: 'https://raw.githubusercontent.com/Diversus23/actions/main/yml/configuration.yml'
# =============
# Требования:
# 1. Название проекта и папка в которой лежат исходники конфигурации EDT должны совпадать
# 2. Надо подготовить папку MASTER_PATH (папка с мастер-базами проектов) в которой должны быть подготовленные и заполненные базы с пользователем "Администратор" (для тестов)
# 3. Надо подготовить папку PIPELINE_PATH (временная папка для сборки) Туда копируем MASTER_BASE и загружаем изменения. Для каждого пайпалайна создается своя подпапка. Старые базы в ней очищаются (старше 3 дней).
# 4. Запуск билда релиза осуществляется в ручном режиме на странице https://demo.softonit.ru/softonit/it/-/pipelines/new Необходимо выполнить запуск с переменными LaunchMode = "BUILD" (без кавычек)
# 5. Выпуск релиза в свет осуществляется в ручном режиме на странице https://demo.softonit.ru/softonit/it/-/pipelines/new Необходимо выполнить запуск с переменными LaunchMode = "RELEASE" и VERSION = "3.1.17.1" нужная версия (без кавычек)
# $LaunchMode == "BUILD" - создание релиза
# $LaunchMode == "RELEASE" + $VERSION - выпуск релиза
# $LaunchMode == "ALLTEST" - выполнение всех тестов

stages:
  - Подготовка
  # + Скачивание actions    
  - Сборка
  - Сборка расширений
  # + Защита конфигурации (только для УИТ, возможно еще для чего-нибудь) (релиз)
  # + Создание базы из эталанной
  # + Выгрузка из EDT исходников в XML 1C
  # + Загрузка исходников XML в базу конвейера
  # + Выгрузка из EDT исходников расширений в XML 1C
  # + Загрузка расширений в базу конвейера
  - Тесты дымовые
  - Тесты основные
  # + Создание двух типов агентов, одни с тегом test - для тестирования (на один сеанс только одна копия), второй без тегов - для не интерактивных работ (много копий)
  # + Добавление параллельности тестов
  # + Проверка конфигурации средствами платформы  
  # + В базе тестов проставляем теги для тестов для выполнения конвеера
  # + Запуск dbgs
  # + Запуск Coverage41C
  # + Выполняем дымовые тесты (не падаем, если есть проблемы)
  # + Выполняем основные тесты (не падаем, если есть проблемы) См. https://habr.com/ru/companies/tinkoff/articles/662069/
  # + Остановка Coverage41C
  # + Остановка dbgs
  # + При завершении тестирования, закрываем все сеансы 1С
  - Сонар
  # + Анализ работы в сонаре
  # + Проверка файлов тестирования и всех тестов и падаем, если были проблемы с тестами
  # - Полнота дымовых тестов для вливаемых веток
  - Развертывание
  # + Создание отчета Allure
  # + Отправка отчета Allure на сервер Allure 
  # + Отправка новостей об обновлении на сайт
  # - Скачивание необходимых версий из облака S3 для сборки
  # + Сборка дистрибутива
  # + Отправление дистрибутива в облако S3
  - Выход релиза
  # + Если версия не задана или такой версии нет, вызываем исключение
  # + Опубликовать новость на сайте (делается на шаге Запись новостей на сайт) для версии $VERSION
  # + Открыть обновление на сайте для версии $VERSION
  # + Обновление API на сайте (только для УИТ)
  # + Обновление эталонной базы на версию $VERSION
  # + Выгрузка эталонной базы в dt
  # + Загрузка эталонной базы в мастер-базу
  # + Очистка мастер-базы от "чувствительных" данных
  #- Завершение
  # + Удаление старых баз в конвейере

# Переменные для работы
variables:
  # Версия файла yml (не забывать изменять при изменении yml-файла)
  YML_VERSION: "2024-03-23-3"
  # Поверхностное клонирование репозитория https://docs.gitlab.com/ee/ci/large_repositories/.
  GIT_DEPTH: 5
  # Использовать быстрое сжатие.
  FF_USE_FASTZIP: "true"
  # Сжатие артефактов выше среднего.
  ARTIFACT_COMPRESSION_LEVEL: "fast" 
  # Сжатие кэша быстрое.
  CACHE_COMPRESSION_LEVEL: "fast"
  # Сервер эталонных баз и эталонная база
  MODEL_SERVER: "192.168.1.40"
  MODEL_BASE: "${CI_PROJECT_NAME}demoref"
  # Список мастер-баз
  MASTER_PATH: "g:/gitlab/master_base"
  # Список баз конвейера
  PIPELINE_PATH: "g:/gitlab/pipeline_base"
  # Где хранится подготовленная база проекта (которая берется за основу и в которую загружаются изменения)
  MASTER_BASE: "$MASTER_PATH/$CI_PROJECT_NAME"
  # Где хранится рабочая база, с которой будем работать в
  PIPELINE_BASE: "$PIPELINE_PATH/$CI_PROJECT_NAME/$CI_PIPELINE_ID"
  # Полный путь к обработке Vanessa Automation
  VANESSA_AUTOMATION: "c:/tools/vanessa-automation/vanessa-automation.epf"
  # Команда запуска SonarSсanner (или полный путь к ней)
  SONAR_SCANNER: "c:/tools/sonar-scanner/bin/sonar-scanner.bat"
  # Команда запуска Coverage41C (или полный путь к ней)
  COVERAGE41C: "c:/tools/coverage41C/bin/Coverage41C.bat"
  # Путь к actions.os
  ACTIONS_PATH: "$PIPELINE_BASE/actions"
  ACTIONS: "$ACTIONS_PATH/src/actions.os"
  # Каталог контролируемых процессов (куда сохраняем информацию обо всем, что было запущено)
  PROCESS_PATH: "g:/gitlab/cancel_builds/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME"
  # Каталог версий для сборки (необходимые cfu/сf файлы для сборки дистрибутива)
  BUILD_PATH: "C:/Work/$CI_PROJECT_NAME"
  UserName: "Администратор"

# Настройки по умолчанию для всех job-ов.
#default:
  # Все jobs прерываемые, если будут изменения в текущей ветке, то текущее задание будет прервано и начнется новое.
  # interruptible: true

# Всегда выполняется перед стартом по умолчанию для всех job-ов.
before_script:
  - chcp 65001
  - $LINE = '[Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding("UTF-8")'
  - Invoke-Expression $LINE
  - $LINE = '[Console]::InputEncoding = [System.Text.Encoding]::GetEncoding("UTF-8")'
  - Invoke-Expression $LINE
  - Write-Host "YML_VERSION - $YML_VERSION"
  - Write-Host "LaunchMode - $LaunchMode"
  - Write-Host "CI_PROJECT_TITLE - $CI_PROJECT_TITLE"
  - Write-Host "CI_PROJECT_NAME - $CI_PROJECT_NAME"
  - Write-Host "CI_COMMIT_REF_NAME - $CI_COMMIT_REF_NAME"
  - Write-Host "CI_PIPELINE_SOURCE - $CI_PIPELINE_SOURCE"  
  - Write-Host "CI_PIPELINE_ID - $CI_PIPELINE_ID"
  - Write-Host "CI_PROJECT_DIR - $CI_PROJECT_DIR"
  - Write-Host "MASTER_BASE - $MASTER_BASE"
  - Write-Host "PIPELINE_BASE - $PIPELINE_BASE"
  - git config --local core.quotepath false
  - if ($CI_PROJECT_NAME -eq "itmobile") { $UserName = "null";}
  - Write-Host "UserName - $UserName"

#=========================================================
# ===================== Подготовка =======================
#=========================================================

Actions:
  stage: Подготовка
  script:
    # Если версия не задана указываем на это при выпуске релиза
    - if ($VERSION -eq $null -and $LaunchMode -eq "RELEASE") {echo "Не указана переменная VERSION для публикации релиза"; exit 1;}
    # Возьмем эталонную базу и подготовим ее в конвейере
    - New-Item -Path "$PIPELINE_BASE" -ItemType Directory
    - git clone --depth 5 https://github.com/Diversus23/actions.git $PIPELINE_BASE\actions
    - oscript -encoding=utf-8 $ACTIONS fs copy --from "$MASTER_BASE\1Cv8.1CD" --to "$PIPELINE_BASE"
    - oscript -encoding=utf-8 $ACTIONS fs copy --from "$MASTER_BASE\*.txt" --to "$PIPELINE_BASE"
    - oscript -encoding=utf-8 $ACTIONS fs copy --from "$CI_PROJECT_DIR\settings.json" --to "$PIPELINE_BASE"    
    # Если старая сборка прерывается, то новая удаляет все запущенные процессы
    - oscript -encoding=utf-8 $ACTIONS process killpath --processpath "$PROCESS_PATH"

#=========================================================
#======================== Сборка =========================
#=========================================================

Сборка базы:
  stage: Сборка  
  script:
    # Обновление описания изменений в конфигурации
    - if ($CI_PROJECT_NAME -eq 'it') { oscript -encoding=utf-8 $ACTIONS changelog convert --in "$CI_PROJECT_DIR\CHANGELOG.md" --out "$CI_PROJECT_DIR\$CI_PROJECT_NAME\src\CommonTemplates\ОписаниеИзменений\Template.txt" --template Softonit.html --all --lazyload --parser_configuration_src "$CI_PROJECT_DIR\it" }
    - if ($CI_PROJECT_NAME -eq 'telegram') { oscript -encoding=utf-8 $ACTIONS changelog convert --in "$CI_PROJECT_DIR\CHANGELOG.md" --out "$CI_PROJECT_DIR\$CI_PROJECT_NAME\src\CommonTemplates\TelegramОписаниеИзменений\Template.txt" --template Softonit.html --all --lazyload }
    # Обфускация / защита модулей
    - $NEED_OBFUSCATE = $CI_PROJECT_NAME -eq 'it' -and (($CI_PIPELINE_SOURCE -eq "schedule" -and $LaunchMode -eq "BUILD") -or ($CI_COMMIT_REF_NAME -eq "release"))
    - echo "Нужна обфускация - $NEED_OBFUSCATE"
    - if ($NEED_OBFUSCATE) { oscript -encoding=utf-8 $ACTIONS zip add --file "$CI_PROJECT_DIR\ИсходныйСЛС.zip" --mask "$CI_PROJECT_DIR\it\src\CommonModules\СЛС\*.*" }
    - if ($NEED_OBFUSCATE) { oscript -encoding=utf-8 $ACTIONS zip add --file "$CI_PROJECT_DIR\ИсходныйДоксинумШаблоны.zip" --mask "$CI_PROJECT_DIR\it\src\CommonModules\ДоксинумШаблоны\*.*" }
    - if ($NEED_OBFUSCATE) { oscript -encoding=utf-8 $ACTIONS netlenka module --in "$CI_PROJECT_DIR\it\src\CommonModules\СЛС\Module.bsl" --apikey $NETLENKA_APIKEY }
    - if ($NEED_OBFUSCATE) { oscript -encoding=utf-8 $ACTIONS netlenka module --in "$CI_PROJECT_DIR\it\src\CommonModules\ДоксинумШаблоны\Module.bsl" --apikey $NETLENKA_APIKEY }
    # Готовим сборку
    - oscript -encoding=utf-8 $ACTIONS fs newpath --path "$CI_PROJECT_DIR\config" --clear    
    # Конвертация проекта EDT в XML 1C
    - oscript -encoding=utf-8 $ACTIONS fs newpath --path "$CI_PROJECT_DIR\workspace" --clear
    - oscript -encoding=utf-8 $ACTIONS edt srctoxml --project "$CI_PROJECT_DIR\$CI_PROJECT_NAME" --path "$CI_PROJECT_DIR\config" --workspace "$CI_PROJECT_DIR\workspace" --processpath "$PROCESS_PATH"
    # Загрузка исходников XML 1C в информационную базу
    - oscript -encoding=utf-8 $ACTIONS infobase configloadfromxml --path "$CI_PROJECT_DIR\config" --connection "/F$PIPELINE_BASE" --user "$UserName" --processpath "$PROCESS_PATH"
    # Обновление конфигурации
    - if ($CI_PROJECT_NAME -eq 'it') { oscript -encoding=utf-8 $ACTIONS infobase setlegal --connection "/F$PIPELINE_BASE" --user "$UserName" --processpath "$PROCESS_PATH" }
    # Архивирование полученной базы и файла DoNotCopy.txt
    - oscript -encoding=utf-8 $ACTIONS zip add --file "$PIPELINE_BASE\base.zip" --mask "$PIPELINE_BASE\1Cv8.1cd;$PIPELINE_BASE\DoNotCopy.txt"
    # Очистка job
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR\workspace"
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR\config"
  artifacts:
    name: "СЛС"
    paths:
      - ИсходныйСЛС.zip
      - ИсходныйДоксинумШаблоны.zip
      - $CI_PROJECT_DIR/it/src/CommonModules/СЛС/Module.bsl
      - $CI_PROJECT_DIR/it/src/CommonModules/ДоксинумШаблоны/Module.bsl
    expire_in: 1 day

#=========================================================
#================== Сборка расширений ====================
#=========================================================

# Только для УИТ
Сборка расширения МИКО:
  stage: Сборка расширений
  script:
    # Конвертация проекта EDT в XML 1C
    - oscript -encoding=utf-8 $ACTIONS fs newpath --path "$CI_PROJECT_DIR\workspace" --clear
    - oscript -encoding=utf-8 $ACTIONS fs newpath --path "$CI_PROJECT_DIR\build\extension-miko" --clear
    - oscript -encoding=utf-8 $ACTIONS edt srctoxml --project "$CI_PROJECT_DIR\it.miko" --path "$CI_PROJECT_DIR\build\extension-miko" --workspace "$CI_PROJECT_DIR\workspace" --processpath "$PROCESS_PATH"
    # Загрузка расширения МИКО в базу конвейера из XML 1C
    - oscript -encoding=utf-8 $ACTIONS infobase extension loadfromsrc --connection "/F$PIPELINE_BASE" --user "$UserName" --path "$CI_PROJECT_DIR\build\extension-miko" --name "ПодсистемаТелефонии40_УИТ8" --update --processpath "$PROCESS_PATH"
    # Повторное архивирование полученной базы и файла DoNotCopy.txt уже с расширением
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$PIPELINE_BASE" --mask "base.zip"
    - oscript -encoding=utf-8 $ACTIONS zip add --file "$PIPELINE_BASE\base.zip" --mask "$PIPELINE_BASE\1Cv8.1cd;$PIPELINE_BASE\DoNotCopy.txt"
    # Очистка job
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR\workspace"
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR\build\extension-miko"
  allow_failure: false
  rules:
    - if: '$CI_PROJECT_NAME == "it"'

# Только для УИТ
Сборка расширения Telegram:
  stage: Сборка расширений
  script:
    # Конвертация проекта EDT в XML 1C
    - oscript -encoding=utf-8 $ACTIONS fs newpath --path "$CI_PROJECT_DIR\workspace" --clear
    - oscript -encoding=utf-8 $ACTIONS fs newpath --path "$CI_PROJECT_DIR\build\extension" --clear
    - oscript -encoding=utf-8 $ACTIONS edt srctoxml --project "$CI_PROJECT_DIR\telegram.РасширениеДляТестов" --path "$CI_PROJECT_DIR\build\extension" --workspace "$CI_PROJECT_DIR\workspace" --processpath "$PROCESS_PATH"
    # Загрузка расширения МИКО в базу конвейера из XML 1C
    - oscript -encoding=utf-8 $ACTIONS infobase extension loadfromsrc --connection "/F$PIPELINE_BASE" --user "$UserName" --path "$CI_PROJECT_DIR\build\extension" --name "РасширениеДляТестов" --update --processpath "$PROCESS_PATH"
    # Повторное архивирование полученной базы и файла DoNotCopy.txt уже с расширением
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$PIPELINE_BASE" --mask "base.zip"
    - oscript -encoding=utf-8 $ACTIONS zip add --file "$PIPELINE_BASE\base.zip" --mask "$PIPELINE_BASE\1Cv8.1cd;$PIPELINE_BASE\DoNotCopy.txt"
    # Очистка job
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR\workspace"
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR\build\extension"
  allow_failure: false
  rules:
    - if: '$CI_PROJECT_NAME == "telegram"'

#=========================================================
#===================== Тестирование ======================
#=========================================================     

Проверка средствами платформы:
  stage: Тесты дымовые
  variables:
    GIT_STRATEGY: none
  script:
    # Разворачиваем базу из архива в каталог с текущим CI
    - oscript -encoding=utf-8 $ACTIONS zip extract --file "$PIPELINE_BASE\base.zip" --path "$CI_PROJECT_DIR\base"
    # Выполняем проверку средствами платформы
    - oscript -encoding=utf-8 $ACTIONS infobase configcheck --connection "/F$CI_PROJECT_DIR\base" --user "$UserName" --file "$CI_PROJECT_DIR\config_test_log_check.log"  --AllExtensions --ThinClient --WebClient --Server --ExternalConnection --ExternalConnectionServer --ThickClientManagedApplication --ThickClientServerManagedApplication --processpath "$PROCESS_PATH"
    # Очистка job
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR\base"    
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
    paths:
      - config_test_log_check.log
    expire_in: 1 day
    when: always
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" && $LaunchMode != "RELEASE" && $LaunchMode != "BUILD"'
    - if: '$CI_COMMIT_REF_NAME == "main" && $LaunchMode != "RELEASE" && $LaunchMode != "BUILD"'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $LaunchMode == "ALLTEST"'
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_COMMIT_MESSAGE =~ "/@test/"'

Дымовые тесты:
  stage: Тесты дымовые
  #parallel: 2
  script:
    - echo "$CI_NODE_INDEX из $CI_NODE_TOTAL"
    # Разворачиваем базу из архива в каталог с текущим CI
    - $BASE_TEST = "$CI_PROJECT_DIR\base$CI_NODE_INDEX"
    - echo "$BASE_TEST"
    - oscript -encoding=utf-8 $ACTIONS zip extract --file "$PIPELINE_BASE\base.zip" --path "$BASE_TEST"
    - if ($CI_NODE_TOTAL -eq "1") { $TAG = "SmokeTest1" } else { $TAG = "SmokeTest$CI_NODE_INDEX" }
    - echo $TAG
    # Удаление лишних файлов
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR" --mask "genericCoverage*.xml"
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR\allurereport"
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR" --mask "*.log"    
    # Не выполняем шаг, если тесты с таким тегом не найдены    
    - oscript -encoding=utf-8 $ACTIONS vanessa-automation tag-partition --path "$CI_PROJECT_DIR\tests\features\" --max $CI_NODE_TOTAL --prefix SmokeTest --filtertags SmokeTest
    - $TEST_COUNT = oscript -encoding=utf-8 $ACTIONS vanessa-automation tag-count --path "$CI_PROJECT_DIR\tests\features" --tag $TAG
    - if ($TEST_COUNT -eq "0") {echo "Не найдены тесты"; exit 0;} else {echo "Найдено тестов - $TEST_COUNT";}
    # Запускаем сервер отладки dbgs.exe на случайном порту. Если порт будет занят, actions берет следующий и пробует его, пока не найдет свободный
    - $PORT = Get-Random -Minimum 1570 -Maximum 1650
    - oscript -encoding=utf-8 $ACTIONS dbgs on --port $PORT --processpath "$PROCESS_PATH" --file "$CI_PROJECT_DIR\dbgs$CI_NODE_INDEX.json"
    - $PORT = oscript -encoding=utf-8 $ACTIONS json read --file "$CI_PROJECT_DIR\dbgs$CI_NODE_INDEX.json" --key port
    - echo $PORT
    # Запустим инструмент подсчета покрытия кода тестами    
    - oscript -encoding=utf-8 $ACTIONS coverage41c start -i "DefAlias" -u "http://127.0.0.1:$PORT" -p "$CI_PROJECT_DIR\$CI_PROJECT_NAME" -o "$CI_PROJECT_DIR\genericCoverage$TAG.xml" --file "$CI_PROJECT_DIR\cover$CI_NODE_INDEX.json" --processpath "$PROCESS_PATH"
    - oscript -encoding=utf-8 $ACTIONS pause --timeout 5
    # Создадим папки и файлы для сохранения результатов тестов
    - oscript -encoding=utf-8 $ACTIONS fs newpath --path "$CI_PROJECT_DIR\allurereport\smoke_report$CI_NODE_INDEX" --clear
    # Дополним параметры запуска ванессы 
    - $VAPARAMS = "$CI_PROJECT_DIR\tests\VAParams.json"
    - $VAPARAMS_EXISTS = oscript -encoding=utf-8 $ACTIONS fs fileexists --file "$VAPARAMS"
    - if ($VAPARAMS_EXISTS -eq "0") {echo "Файл с параметрами Vanessa не найден"; exit 1;}
    - oscript -encoding=utf-8 $ACTIONS json write --action cleararray --file "$VAPARAMS" --key "СписокТеговОтбор"
    - oscript -encoding=utf-8 $ACTIONS json write --action addinarray --file "$VAPARAMS" --key "СписокТеговОтбор" --str "$TAG"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$VAPARAMS" --key "КлиентТестирования.ДиапазонПортовTestclient" --str "48000-48100"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$VAPARAMS" --key "КлиентТестирования.АдресОтладчика" --str "http://127.0.0.1:$PORT"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$VAPARAMS" --key "КаталогOutputAllureБазовый" --str "./allurereport/smoke_report$CI_NODE_INDEX"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$VAPARAMS" --key "ИмяФайлаЛогВыполненияСценариев" --str "./smoke_test_log$CI_NODE_INDEX.log"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$VAPARAMS" --key "ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев" --str "./smoke_test_status$CI_NODE_INDEX.log"
    # Прогоним тесты в базе для конвейера с помощью ванессы
    - oscript -encoding=utf-8 $ACTIONS vanessa-automation run --connection "/F$BASE_TEST" --user "$UserName" -w "$CI_PROJECT_DIR" --vs "$CI_PROJECT_DIR\tests\VAParams.json" --pathvanessa "$VANESSA_AUTOMATION" --path "$CI_PROJECT_DIR\tests\features" --processpath "$PROCESS_PATH"
    # Остановим инструмент подсчета покрытия кода тестами
    - oscript -encoding=utf-8 $ACTIONS coverage41c stop -i "DefAlias" -u "http://127.0.0.1:$PORT" --file "$CI_PROJECT_DIR\cover$CI_NODE_INDEX.json" --processpath "$PROCESS_PATH"
    - oscript -encoding=utf-8 $ACTIONS pause --timeout 15
    - oscript -encoding=utf-8 $ACTIONS dbgs off --file "$CI_PROJECT_DIR\dbgs$CI_NODE_INDEX.json"
    # Принудительно завершим окна клиентов тестирования, если вдруг остались висеть они закроются
    - if ($CI_PROJECT_NAME -eq 'it') { oscript  -encoding=utf-8 $ACTIONS process kill --windowtitle "Управление IT-отделом 8" }
    - if ($CI_PROJECT_NAME -eq 'telegram') { oscript  -encoding=utf-8 $ACTIONS process kill --windowtitle "Telegram" }
    #- oscript -encoding=utf-8 $ACTIONS infobase close-all-clients
    # Очистка job
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$BASE_TEST"
  after_script:
    - oscript -encoding=utf-8 $ACTIONS allure categories --path "$CI_PROJECT_DIR\allurereport\smoke_report$CI_NODE_INDEX" --name "SmokeTest"
  tags:
    - test
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_NODE_INDEX"
    paths:
      - genericCoverage*.xml
      - allurereport/
      - smoke_test_status*.log
      - smoke_test_log*.log
    expire_in: 1 day
    when: always
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $LaunchMode == "ALLTEST"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $LaunchMode == "ALLTEST" && $CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_COMMIT_MESSAGE =~ "/@test/"'

Основные тесты:
  stage: Тесты основные
  #parallel: 2
  script:
    - echo "$CI_NODE_INDEX из $CI_NODE_TOTAL"
    # Завершаем все открытые сеансы клиентов 1С
    - oscript -encoding=utf-8 $ACTIONS infobase close-all-clients
    # Разворачиваем базу из архива в каталог с текущим CI
    - $BASE_TEST = "$CI_PROJECT_DIR\base$CI_NODE_INDEX"
    - echo "$BASE_TEST"
    - oscript -encoding=utf-8 $ACTIONS zip extract --file "$PIPELINE_BASE\base.zip" --path "$BASE_TEST"
    - if ($CI_NODE_TOTAL -eq "1") { $TAG = "MainTest1" } else { $TAG = "MainTest$CI_NODE_INDEX" }
    - echo $TAG
    # Удаление лишних файлов
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR" --mask "genericCoverage*.xml"
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR\allurereport"
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR" --mask "*.log"    
    # Не выполняем шаг, если тесты с таким тегом не найдены
    - oscript -encoding=utf-8 $ACTIONS vanessa-automation tag-partition --path "$CI_PROJECT_DIR\tests\features\Main" --max $CI_NODE_TOTAL --prefix MainTest
    - $TEST_COUNT = oscript -encoding=utf-8 $ACTIONS vanessa-automation tag-count --path "$CI_PROJECT_DIR\tests\features\Main" --tag $TAG
    - if ($TEST_COUNT -eq "0") {echo "Не найдены тесты"; exit 0;} else {echo "Найдено тестов - $TEST_COUNT";}
    # Запускаем сервер отладки dbgs.exe на случайном порту. Если порт будет занят, actions берет следующий и пробует его, пока не найдет свободный
    - $PORT = Get-Random -Minimum 1570 -Maximum 1650
    - oscript -encoding=utf-8 $ACTIONS dbgs on --port $PORT --processpath "$PROCESS_PATH" --file "$CI_PROJECT_DIR\dbgs$CI_NODE_INDEX.json"
    - $PORT = oscript -encoding=utf-8 $ACTIONS json read --file "$CI_PROJECT_DIR\dbgs$CI_NODE_INDEX.json" --key port
    # Запустим инструмент подсчета покрытия кода тестами
    - oscript -encoding=utf-8 $ACTIONS coverage41c start -i "DefAlias" -u "http://127.0.0.1:$PORT" -p "$CI_PROJECT_DIR\$CI_PROJECT_NAME" -o "$CI_PROJECT_DIR\genericCoverage$TAG.xml" --file "$CI_PROJECT_DIR\cover$CI_NODE_INDEX.json" --processpath "$PROCESS_PATH"
    - oscript -encoding=utf-8 $ACTIONS pause --timeout 5
    # Создадим папки и файлы для сохранения результатов тестов
    - oscript -encoding=utf-8 $ACTIONS fs newpath --path "$CI_PROJECT_DIR\allurereport\main_report$CI_NODE_INDEX" --clear
    # Дополним параметры запуска ванессы    
    - $VAPARAMS = "$CI_PROJECT_DIR\tests\VAParams.json"
    - $VAPARAMS_EXISTS = oscript -encoding=utf-8 $ACTIONS fs fileexists --file "$VAPARAMS"
    - if ($VAPARAMS_EXISTS -eq "0") {echo "Файл с параметрами Vanessa не найден"; exit 1;}
    - oscript -encoding=utf-8 $ACTIONS json write --action cleararray --file "$VAPARAMS" --key "СписокТеговОтбор"
    - oscript -encoding=utf-8 $ACTIONS json write --action addinarray --file "$VAPARAMS" --key "СписокТеговОтбор" --str "$TAG"
    - oscript -encoding=utf-8 $ACTIONS json write --action addinarray --file "$VAPARAMS" --key "СписокТеговИсключение" --str "SmokeTest"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$VAPARAMS" --key "КлиентТестирования.ДиапазонПортовTestclient" --str "48000-48100"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$VAPARAMS" --key "КлиентТестирования.АдресОтладчика" --str "http://127.0.0.1:$PORT"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$VAPARAMS" --key "КаталогOutputAllureБазовый" --str "./allurereport/main_report$CI_NODE_INDEX"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$VAPARAMS" --key "ИмяФайлаЛогВыполненияСценариев" --str "./main_test_log$CI_NODE_INDEX.log"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$VAPARAMS" --key "ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев" --str "./main_test_status$CI_NODE_INDEX.log"
    # Прогоним тесты в базе для конвейера с помощью ванессы
    - oscript -encoding=utf-8 $ACTIONS vanessa-automation run --connection "/F$BASE_TEST" --user "$UserName" -w "$CI_PROJECT_DIR" --vs "$CI_PROJECT_DIR\tests\VAParams.json" --pathvanessa "$VANESSA_AUTOMATION" --path "$CI_PROJECT_DIR\tests\features" --processpath "$PROCESS_PATH"
    # Остановим инструмент подсчета покрытия кода тестами
    - oscript -encoding=utf-8 $ACTIONS coverage41c stop -i "DefAlias" -u "http://127.0.0.1:$PORT" --file "$CI_PROJECT_DIR\cover$CI_NODE_INDEX.json" --processpath "$PROCESS_PATH"
    - oscript -encoding=utf-8 $ACTIONS pause --timeout 15
    - oscript -encoding=utf-8 $ACTIONS dbgs off --file "$CI_PROJECT_DIR\dbgs$CI_NODE_INDEX.json"
    # Принудительно завершим окна клиентов тестирования, если вдруг остались висеть они закроются
    - if ($CI_PROJECT_NAME -eq 'it') { oscript  -encoding=utf-8 $ACTIONS process kill --windowtitle "Управление IT-отделом 8" }
    - if ($CI_PROJECT_NAME -eq 'telegram') { oscript  -encoding=utf-8 $ACTIONS process kill --windowtitle "Telegram" }
    # Очистка job
    - oscript -encoding=utf-8 $ACTIONS fs delete --path "$BASE_TEST"
  after_script:
    - oscript -encoding=utf-8 $ACTIONS allure categories --path "$CI_PROJECT_DIR\allurereport\main_report$CI_NODE_INDEX" --name "MainTest"    
  tags:
    - test
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-$CI_NODE_INDEX"
    paths:
      - genericCoverage*.xml
      - allurereport/
      - main_test_status*.log
      - main_test_log*.log
    expire_in: 1 day
    when: always
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $LaunchMode == "ALLTEST"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $LaunchMode == "ALLTEST" && $CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_COMMIT_MESSAGE =~ "/@test/"'

#=========================================================
#======================== Сонар ==========================
#=========================================================

SonarQube:
  stage: Сонар
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  cache:
    key: "$CI_PROJECT_NAME-SONAR_CACHE"
    paths:
      - .sonar/cache
  script:
    # Определяем версию конфигурации из исходников
    - $CONFIG_VERSION = oscript -encoding=utf-8 $ACTIONS edt versionconfig --project "$CI_PROJECT_DIR\$CI_PROJECT_NAME"
    # Формируем параметры запуска сонар-сканера с учетом замеров
    - $FILES = Get-Childitem -Path "$CI_PROJECT_DIR" -Name "genericCoverage*.xml"
    - $COVERAGE_REPORTS = "";
    - foreach ($FILE in $FILES) { $comma = ""; if ($COVERAGE_REPORTS) { $comma = ","; }; $COVERAGE_REPORTS = $COVERAGE_REPORTS + $comma + "$CI_PROJECT_DIR\" + $FILE; }
    - $SONAR_PROJECT = $CI_PROJECT_NAME
    - if ($COVERAGE_REPORTS) { Write-Host "$COVERAGE_REPORTS"; $SONAR_PROJECT = $SONAR_PROJECT + "_coverage"; }
    - $SONAR_ARGUMENT_ARRAY =
        "-Dsonar.host.url=$SONAR_HOST_URL",
        "-Dsonar.token=$SONAR_LOGIN",
        "-Dsonar.projectName=$SONAR_PROJECT",
        "-Dsonar.projectKey=$SONAR_PROJECT",
        "-Dsonar.projectBaseDir=$CI_PROJECT_DIR\$CI_PROJECT_NAME",
        "-Dsonar.sourceEncoding=UTF-8",
        "-Dsonar.qualitygate.wait=true",
        "-Dsonar.qualitygate.timeout=1800",
        "-Dsonar.bsl.calculateLineCover=true",
        "-Dsonar.coverageReportPaths=$COVERAGE_REPORTS",
        "-Dsonar.bsl.languageserver.overrideConfiguration=true",
        "-Dsonar.bsl.languageserver.configurationPath=$CI_PROJECT_DIR\.bsl-language-server.json",
        "-Dsonar.bsl.languageserver.diagnosticLanguage=ru",
        "-Dsonar.inclusions=**/*.bsl,**/*.os,**/*.xml,**/*.form,**/*.dcs",
        "-Dsonar.exclusions=**/*.html",
        "-Dsonar.lang.patterns.xml=**/*.xsd,**/*.xsl",
        "-Dsonar.scm.provider=git",
        "-Dsonar.scm.enabled=true",
        "-Dsonar.pullrequest.key=$CI_MERGE_REQUEST_ID",
        "-Dsonar.pullrequest.branch=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME",
        "-Dsonar.pullrequest.base=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME",
        "-Dsonar.projectVersion=$CONFIG_VERSION";        
    # Запускаем сканер
    - Start-Process -FilePath $SONAR_SCANNER -ArgumentList $SONAR_ARGUMENT_ARRAY -NoNewWindow -Wait
    # Запрашиваем у API сонара результат проверки
    - $BRANCH_NAME = "branch=$CI_COMMIT_REF_NAME"
    - if ($CI_MERGE_REQUEST_IID -ne $null -and $CI_MERGE_REQUEST_IID -ne "") {$BRANCH_NAME = "pullRequest=$CI_MERGE_REQUEST_IID"}
    - $SONAR_BRANCH_URL = "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$CI_PROJECT_NAME&$BRANCH_NAME"
    - oscript -encoding=utf-8 $ACTIONS http get --url "$SONAR_BRANCH_URL" --login "$SONAR_LOGIN" --out "$CI_PROJECT_DIR\sonar_status.json"
    - $SONAR_PROJECT_STATUS = oscript -encoding=utf-8 $ACTIONS json read --file "$CI_PROJECT_DIR\sonar_status.json" --key "projectStatus.status"
    # Роняем задание если порог качества не пройден (раскомментировать, если у вас порог качества в норме)
    #- if ($SONAR_PROJECT_STATUS -ne "OK") {echo "Порог качества сонара не пройден"; exit 1}
    # Останавливаем конвейер, если любые тесты упали    
    - oscript -encoding=utf-8 $ACTIONS vanessa-automation check-errors --path "." --mask "*test_log*.log"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $LaunchMode == "ALLTEST"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $LaunchMode == "ALLTEST" && $CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_PIPELINE_SOURCE == "push"'

#=========================================================
#==================== Развертывание ======================
#=========================================================

Allure:
  stage: Развертывание
  needs: [Основные тесты, Дымовые тесты]
  when: always
  allow_failure: true
  script:
    # Готовим список файлов
    - $ALLURE_REPORTS = New-Object System.Collections.ArrayList;
    - $ALLURE_REPORTS.Add("$CI_PROJECT_DIR\allurereport");
    - $FOLDERS = Get-Childitem -Path "$CI_PROJECT_DIR\allurereport" -Directory;
    - $ALLURE_REPORTS.Add("$CI_PROJECT_DIR\allurereport")
    - foreach ($FOLDER in $FOLDERS) { Write-Host "$CI_PROJECT_DIR\allurereport\$FOLDER"; $ALLURE_REPORTS.Add("$CI_PROJECT_DIR\allurereport\$FOLDER"); }
    - Write-Host "$ALLURE_REPORTS"
    # Скачиваем History из каталога IIS
    - $PATH_ALLURE = "C:\inetpub\wwwroot\allure\$CI_PROJECT_NAME"
    - oscript -encoding=utf-8 $ACTIONS fs newpath --path "$PATH_ALLURE"
    - if ($ALLURE_REPORTS.count -ne 0)
        {
          $HISTORY_EXISTS = oscript -encoding=utf-8 $ACTIONS fs pathexists --path "$PATH_ALLURE\$CI_COMMIT_REF_NAME\history";
          Write-Host "$PATH_ALLURE\$CI_COMMIT_REF_NAME\history";
          Write-Host $HISTORY_EXISTS;
          if ($HISTORY_EXISTS -eq "1") { oscript -encoding=utf-8 $ACTIONS fs copy --from "$PATH_ALLURE\$CI_COMMIT_REF_NAME\history" --to "$CI_PROJECT_DIR\allurereport\history" };
        }
    # Создаем отчет
    - allure generate $ALLURE_REPORTS -c -o ./public
    # Копируем в нужную папку
    - oscript -encoding=utf-8 $ACTIONS fs newpath --path "$PATH_ALLURE\$CI_COMMIT_REF_NAME"
    - oscript -encoding=utf-8 $ACTIONS fs copy --from "$CI_PROJECT_DIR\public" --to "$PATH_ALLURE\$CI_COMMIT_REF_NAME" --recursive
    - echo Allure results - $PAGE_ALLURE
  artifacts:
    when: always
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - public
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $LaunchMode == "ALLTEST"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $LaunchMode == "ALLTEST" && $CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_COMMIT_MESSAGE =~ "/@test/"'

Запись новостей на сайт:
  stage: Развертывание
  when: always
  script:
    # Восстанавливаем файл ДоксинумШаблоны
    - $DOCSINUM_TEMPLATES = "$CI_PROJECT_DIR\ИсходныйДоксинумШаблоны.zip"
    - if (Test-Path $DOCSINUM_TEMPLATES) { oscript -encoding=utf-8 $ACTIONS zip extract --file "$CI_PROJECT_DIR\ИсходныйДоксинумШаблоны.zip" --path "$CI_PROJECT_DIR\it\src\CommonModules\ДоксинумШаблоны" }
    # Для релиза проверим, что такая версия существует в changelog
    - if ($LaunchMode -eq "RELEASE" -and $VERSION -ne $null) { oscript -encoding=utf-8 $ACTIONS changelog check-version --file "$CI_PROJECT_DIR\CHANGELOG.md" --version "$VERSION" }
    # Для какой версии получаем новости
    - if ($LaunchMode -eq "RELEASE" -and $VERSION -ne $null) { $future_version = $VERSION } else { $future_version = oscript -encoding=utf-8 $ACTIONS json read --file "$CI_PROJECT_DIR\settings.json" --key "default.version" }
    - echo "Версия новости - $future_version"
    - $site_version = $future_version.Replace(".", "-")
    - $news_link = "https://softonit.ru/blog/news/update$CI_PROJECT_NAME/upd$CI_PROJECT_NAME-$site_version/"
    - echo "Ссылка новости на сайте - $news_link"
    # Создаем новости из общего макета
    - oscript -encoding=utf-8 $ACTIONS fs newpath --path "$CI_PROJECT_DIR\build\news" --clear
    - oscript -encoding=utf-8 $ACTIONS changelog convert --in "$CI_PROJECT_DIR\CHANGELOG.md" --out "$CI_PROJECT_DIR\build\news\news.html" --template "SimpleWithoutVersion.html" --productname "$CI_PROJECT_TITLE" --version "$future_version" --news_url "$news_link" --parser_configuration_src "$CI_PROJECT_DIR\it"
    - oscript -encoding=utf-8 $ACTIONS changelog convert --in "$CI_PROJECT_DIR\CHANGELOG.md" --out "$CI_PROJECT_DIR\build\news\news.txt" --template "SimpleTextWithoutVersion.txt" --productname "$CI_PROJECT_TITLE" --version "$future_version" --news_url "$news_link" --parser_configuration_src "$CI_PROJECT_DIR\it"
    - oscript -encoding=utf-8 $ACTIONS changelog convert --in "$CI_PROJECT_DIR\CHANGELOG.md" --out "$CI_PROJECT_DIR\build\news\letter.html" --template "Letter.html" --productname "$CI_PROJECT_TITLE" --version "$future_version" --maximgwidth 540 --news_url "$news_link" --parser_configuration_src "$CI_PROJECT_DIR\it"
    - oscript -encoding=utf-8 $ACTIONS changelog convert --in "$CI_PROJECT_DIR\CHANGELOG.md" --out "$CI_PROJECT_DIR\build\news\changelog.html" --template "Softonit.html" --all --lazyload --parser_configuration_src "$CI_PROJECT_DIR\it"
    # Отправка новостей на сайт
    - echo "Отправка новостей на сайт"
    - oscript -encoding=utf-8 $ACTIONS json read --file "$CI_PROJECT_DIR\settings.json" --key "default" --out "$CI_PROJECT_DIR\news.json"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$CI_PROJECT_DIR\news.json" --key "html" --filevalue "$CI_PROJECT_DIR\build\news\news.html"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$CI_PROJECT_DIR\news.json" --key "txt" --filevalue "$CI_PROJECT_DIR\build\news\news.txt"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$CI_PROJECT_DIR\news.json" --key "version" --str "$future_version"
    - oscript -encoding=utf-8 $ACTIONS ftp put --server "$FTP_HOSTNAME" --login "$FTP_USERNAME" --password "$FTP_PASSWORD" --local "$CI_PROJECT_DIR\build\news" --mask "changelog.html" --remote "/upd/$CI_PROJECT_NAME/"
    # Если публикация обновления, то сразу публикуем новость в блоге
    - if ($LaunchMode -eq "RELEASE") { $is_future_version = "0" } else { $is_future_version = "1" }
    - echo "Это описание будущей версии - $is_future_version"
    - oscript -encoding=utf-8 $ACTIONS json write --file "$CI_PROJECT_DIR\news.json" --key "is_future_version" --str "$is_future_version"
    - oscript -encoding=utf-8 $ACTIONS http post --url "$NEWS_SCRIPT_UPDATE" --fileparams "$CI_PROJECT_DIR\news.json" --p1 "action" --v1 "setnews"
  allow_failure: false
  artifacts:
    paths:
      - build/news
    expire_in: 1 day
    when: always
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
    - if: '$CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_COMMIT_REF_NAME == "release"'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $LaunchMode == "BUILD"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $LaunchMode == "BUILD" && $CI_COMMIT_REF_NAME == "release"'

Сборка дистрибутива:
  stage: Развертывание
  script:
    # Восстанавливаем файл ДоксинумШаблоны
    - $DOCSINUM_TEMPLATES = "$CI_PROJECT_DIR\ИсходныйДоксинумШаблоны.zip"
    - if (Test-Path $DOCSINUM_TEMPLATES) { oscript -encoding=utf-8 $ACTIONS zip extract --file "$CI_PROJECT_DIR\ИсходныйДоксинумШаблоны.zip" --path "$CI_PROJECT_DIR\it\src\CommonModules\ДоксинумШаблоны" }
    # Сохраняем расширения для дистрибутива в общие файлы
    # Для УИТ расширение для МИКО
    - if ($CI_PROJECT_NAME -eq 'it') { oscript -encoding=utf-8 $ACTIONS fs delete --path "$CI_PROJECT_DIR\data\Общие файлы для дистрибутива\Общие файлы" --mask "ПодсистемаТелефонии40_УИТ8.cfe" }
    - if ($CI_PROJECT_NAME -eq 'it') { oscript -encoding=utf-8 $ACTIONS infobase extension save --connection "/F$PIPELINE_BASE" --user "$UserName" --name "ПодсистемаТелефонии40_УИТ8" --to "$CI_PROJECT_DIR\data\Общие файлы для дистрибутива\Общие файлы\ПодсистемаТелефонии40_УИТ8.cfe" }
    # Создание дистрибутива
    - oscript -encoding=utf-8 $ACTIONS infobase distrib --connection "/F$PIPELINE_BASE" --user "$UserName" --path "$CI_PROJECT_DIR\build\distrib" --versions_path "$BUILD_PATH" --changelog "$CI_PROJECT_DIR\CHANGELOG.md" --maximgwidth 540 --parser_configuration_src "$CI_PROJECT_DIR\it"
    # Копируем их в каталог сборки и каталог отправки в облако
    - oscript -encoding=utf-8 $ACTIONS fs copy --from "$CI_PROJECT_DIR\build\distrib\*.*" --to "$BUILD_PATH" --recursive
    - oscript -encoding=utf-8 $ACTIONS fs findcopy --from "$CI_PROJECT_DIR\build\distrib" --mask "*.zip" --to "$CI_PROJECT_DIR\build\artifacts" --recursive
    # Загрузка в облако S3
    - aws.exe s3 cp "$CI_PROJECT_DIR\build\artifacts" "s3://$AWS_BUCKET/distrib/$CI_PROJECT_NAME" --endpoint-url $AWS_HOSTNAME --recursive --exclude "*" --include "*.zip"
    # Сохранение необфусцированного модуля СЛС. Только для УИТ
    - if ($CI_PROJECT_NAME -eq 'it')
        {
          oscript -encoding=utf-8 $ACTIONS zip add --file "$CI_PROJECT_DIR\СЛС.zip" --mask "$CI_PROJECT_DIR\$PROJECT_NAME\src\CommonModules\СЛС\*.*;$CI_PROJECT_DIR\ИсходныйСЛС.zip";
          $CONFIG_VERSION = oscript -encoding=utf-8 $ACTIONS edt versionconfig --project "$CI_PROJECT_DIR\$CI_PROJECT_NAME";
          oscript -encoding=utf-8 $ACTIONS fs copy --from "$CI_PROJECT_DIR\СЛС.zip" --to "$BUILD_PATH\$CONFIG_VERSION";
        }
  allow_failure: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $LaunchMode == "BUILD"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $LaunchMode == "BUILD" && $CI_COMMIT_REF_NAME == "release"'

#=========================================================
#==================== Выход релиза =======================
#=========================================================

Выход релиза:
  stage: Выход релиза
  script:
    # + Опубликовать новость на сайте (делается на шаге Запись новостей на сайт) для версии $VERSION
    # + Открыть обновление на сайте для версии $VERSION (делается на шаге Запись новостей на сайт)
    # Обновление API на сайте (только для УИТ)
    - if ($CI_PROJECT_NAME -eq 'it') { oscript -encoding=utf-8 $ACTIONS ftp put --server "$FTP_HOSTNAME" --login "$FTP_USERNAME" --password "$FTP_PASSWORD" --local "$CI_PROJECT_DIR/docs/api/docs/Исходники_SwaggerUI" --mask "*.json" --remote "/api/docs" }
    # Обновление эталонной базы на версию $VERSION
    - echo "/S$MODEL_SERVER\$MODEL_BASE"
    - oscript -encoding=utf-8 $ACTIONS infobase updatecfg --file "$BUILD_PATH/$VERSION/1Cv8.cf" --connection "/S$MODEL_SERVER\$MODEL_BASE" --user "$UserName" --password "$MODEL_PASSWORD"
    - if ($CI_PROJECT_NAME -eq 'it') { oscript -encoding=utf-8 $ACTIONS infobase setlegal --connection "/S$MODEL_SERVER\$MODEL_BASE" --user "$UserName" --password "$MODEL_PASSWORD" }
    # + Выгрузка эталонной базы в dt
    - oscript -encoding=utf-8 $ACTIONS infobase dump --file "$MASTER_BASE/last.dt" --connection "/S$MODEL_SERVER\$MODEL_BASE" --user "$UserName" --password "$MODEL_PASSWORD"    
    # + Загрузка эталонной базы в мастер-базу
    - oscript -encoding=utf-8 $ACTIONS infobase dump --file "$MASTER_BASE/pre.dt" --connection "/F$MASTER_BASE" --user "$UserName"
    - oscript -encoding=utf-8 $ACTIONS infobase restore --file "$MASTER_BASE/last.dt" --connection "/F$MASTER_BASE" --user "$UserName"
    # + Очистка мастер-базы от "чувствительных" данных (пароль администратора, пароль ящика почты)
    - oscript -encoding=utf-8 $ACTIONS infobase runcode --file "$ACTIONS_PATH/tools/ОчисткаЧувствительныхДанных.os" --connection "/F$MASTER_BASE" --user "$UserName" --password "$MODEL_PASSWORD"
    # Обновление на сайте спецификаций API    
  allow_failure: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $LaunchMode == "RELEASE" && $CI_COMMIT_REF_NAME == "release"'

#=========================================================
#===================== Завершение ========================
#=========================================================

# Удаление старых баз конвеера:  
#   stage: Завершение
#   when: always
#   variables:
#     GIT_STRATEGY: none
#   script:
#     # Удаление в папке конвеера устаревших папок за последние 3 дня
#     - oscript -encoding=utf-8 $ACTIONS fs deleteold --path "$PIPELINE_PATH/$CI_PROJECT_NAME" --type day --value 3
#   allow_failure: true
#   tags:
#     - test
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "schedule"'
#     - if: '$CI_COMMIT_REF_NAME == "main"'
